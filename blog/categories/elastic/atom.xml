<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elastic | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/elastic/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-09-09T16:32:58+02:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Timelion, le petit nouveau de Kibana 5]]></title>
    <link href="https://rnowif.github.io/blog/2016/10/26/timelion/"/>
    <updated>2016-10-26T22:26:16+02:00</updated>
    <id>https://rnowif.github.io/blog/2016/10/26/timelion</id>
    <content type="html"><![CDATA[<p>Elastic vient de sortir <a href="https://www.elastic.co/blog/elastic-stack-5-0-0-released">sa dernière mouture de la stack Elastic</a>. Il s'agit de la version 5 et, pour la première fois, tous les produits ont une version commune. Cette nouvelle version vient avec son lot de nouveautés. Dans cet article, nous allons nous concentrer sur les nouveautés apportées à Kibana, et principalement Timelion.</p>

<p>Les exemples sont tirés de métriques fournies par le plugin <a href="https://www.elastic.co/guide/en/beats/metricbeat/5.0/metricbeat-getting-started.html">MetricBeat</a>, qui remplace TopBeat dans la version 5 de la stack.</p>

<!-- more -->


<h2>Généralités</h2>

<p>Au lancement de Kibana, on remarque tout d'abord le changement visuel. Le menu est désormais à gauche, les icônes un peu cryptiques de Kibana 4 pour ajouter, sauvegarder ou ouvrir des éléments sont remplacées par des boutons avec du texte et les contours des visualisations dans les dashboards sont supprimés. Pour le reste, on retrouve assez vite ses habitudes de Kibana 4.</p>

<p><img class="center" src="/images/kibana_new_look.png"></p>

<p>Les principales évolutions tiennent dans l'ajout des plugins <a href="https://www.elastic.co/guide/en/sense/current/introduction.html">Sense</a> et <a href="https://www.elastic.co/fr/blog/timelion-timeline">Timelion</a> (prononcez <em>timeline</em>). Ces modules ne sont pas nouveaux mais ils sont désormais intégrés de base dans Kibana.</p>

<h2>Timelion</h2>

<h3>Présentation</h3>

<p>Timelion permet d'afficher des courbes décrites par un langage particulier. Pour accéder à cette fonctionnalité, il faut cliquer sur l'icône avec une tête de lion.</p>

<p><img class="center" src="/images/timelion_intro.png"></p>

<p>La requête décrivant la courbe à afficher est présente dans le champ au dessus de la courbe. La requête de base est <code>.es(*)</code>. Cela va afficher le nombre total d'événements reçus au fil du temps. La datasource <code>.es</code> (ou <code>.elasticsearch</code>) permet d'effectuer une <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html">requête lucène</a> dans l'index elasticsearch par défaut. Il est possible de spécifier l'index et la requête de cette manière :
<code>
.es(index='metricbeat-*', q='*')
</code></p>

<p><em>NB : Il existe plusieurs datasources en plus de Elasticsearch, notamment Graphite, <a href="https://www.quandl.com/">Quandl</a> et <a href="http://data.worldbank.org/">WorldBank</a></em></p>

<h3>Afficher une courbe</h3>

<p>Si on veut afficher une métrique plutôt que le nombre d'événements, il est possible d'ajouter un attribut <code>metric</code> à la requête. Les métriques disponibles sont <code>avg</code>, <code>sum</code>, <code>min</code>, <code>max</code> et <code>cardinality</code> (nombre de valeurs distinctes). Par exemple, pour afficher l'évolution de la consommation CPU de java, il faut effectuer la requête suivante :
<code>
.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct')
</code></p>

<p><img class="center" src="/images/evolution_cpu_java.png"></p>

<p>Timelion affiche la requête en label de la courbe, ce qui n'est pas très lisible ici. Il est donc possible de fournir sont propre label avec la fonction <code>label()</code> :
<code>
.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java')
</code></p>

<h3>Afficher plusieurs courbes</h3>

<p>Maintenant, on aimerait afficher également le nombre d'événements qui arrivent afin de chercher une éventuelle corrélation entre la consommation CPU et la charge d'événements. Pour ce faire, il suffit d'ajouter à la requête une deuxième datasource, afin de récupérer ce nombre d'événements. Cependant, les deux échelles n'ont rien à voir, il faut donc ajouter une deuxième axe y avec la fonction <code>yaxis</code>.</p>

<pre><code>.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java'), .es(*).yaxis(yaxis=2).label('Evénements')
</code></pre>

<p><img class="center" src="/images/java_cpu_vs_events.png"></p>

<p>Les variations de la courbe des événements n'est pas très visible, on va donc fixer un seuil minimal à l'axe y pour y voir plus clair, avec la propriété <code>min</code> de <code>yaxis</code>. Avec un titre en plus (fonction <code>title</code>) et des couleurs fixes (fonction <code>color</code>), le graphe est prêt à mettre dans un dashboard.
<code>
.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java').color('#F00'), .es(*).yaxis(yaxis=2, min=330).label('Evénements').color('#00F').title('Consommation CPU vs Evénements')
</code></p>

<p><img class="center" src="/images/cpu_vs_events_final.png"></p>

<p>Visiblement, la charge n'est pas suffisante pour voir une corrélation entre la consommation CPU et le nombre d'événements.</p>

<h3>Opérer sur des courbes</h3>

<p>Timelion propose également de faire des opérations entre les courbes. Par exemple, il est possible de suivre la taille moyenne des paquets qui arrivent par l'interface <em>lo</em> en divisant (avec la fonction <code>divide</code>) le volume moyen qui transite par le nombre moyen de paquets.
<code>
.es(q='metricset.name:network AND system.network.name:lo', metric='avg:system.network.in.bytes').divide(.es(q='metricset.name:network AND system.network.name:lo', metric='avg:system.network.in.packets')).label('Taille moyenne des paquets')
</code></p>

<p><img class="center" src="/images/avg_packet_size.png"></p>

<p><em>NB : Il existe de nombreuses opérations qu'il est possible d'utiliser pour traiter les courbes : <code>abs</code>, <code>movingaverage</code>, <code>multiply</code>, <code>subtract</code>, <code>sum</code>, etc. Se référer à la <a href="https://github.com/elastic/timelion/blob/master/FUNCTIONS.md">documentation complète</a> pour plus d'informations</em></p>

<h2>Conclusion</h2>

<p>Kibana 5 est assez agréable à utiliser mais ne change pas radicalement l'expérience utilisateur par rapport à la version 4. Les retouches graphiques sont appréciables mais les évolutions réellement impactantes sont à chercher du coté des plugins Sense et Timelion. Ce dernier est un outil très puissant pour mettre des courbes de différentes sources en corrélation (ou d'index différents dans un même cluster Elasticsearch) et je suis sûr que vous trouverez des tas de cas d'usage bien plus pertinents que ceux que j'ai pu montrer dans cet article.</p>
]]></content>
  </entry>
  
</feed>
