<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: craftsmanship | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/craftsmanship/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-10-10T06:13:52+13:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests plus robustes au changement]]></title>
    <link href="https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement/"/>
    <updated>2016-11-03T05:31:42+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement</id>
    <content type="html"><![CDATA[<p>Un des principaux freins à l'écriture de tests est quand ceux-ci doivent être mis à jour à chaque fois qu'une classe ou qu'une méthode est modifiée. Parfois, les tests à mettre à jour n'ont rien à voir avec la classe ou la méthode modifiée, mais comme ils s'en servent, ils s'en retrouvent affectés eux aussi. Ce problème survient quand le test est trop couplé à l'implémentation.
Dans cet article, nous allons voir comment découpler les tests des classes qu'ils utilisent et ainsi les rendre plus robustes.</p>

<!-- more -->


<h2>Méthode 0 : La méthode naïve</h2>

<p>Soit une classe qui doit tester si une personne a accès à une ressource ou non. L'API de la classe <code>Person</code> est maintenue par une autre équipe et est donc hors de contrôle.
La façon la plus naïve d'écrire le test pourrait être la suivante :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = new Person();
  kid.setAge(17);

  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}
</code></pre>

<p>Si l'API de la classe <code>Person</code> évolue et prend l'âge directement en paramètre du constructeur, ce test ne compilera plus et devra être réécrit, ainsi que tous les autres tests qui instancient directement une <code>Person</code>.</p>

<h2>Méthode 1 : Utilisation d'une méthode de création</h2>

<p>La première solution serait d'utiliser une méthode de création partagée par tous les tests de la classe :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = newPerson(17);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

private Person newPerson(int age) {
  Person person = new Person();
  person.setAge(17);
  return person;
}
</code></pre>

<p>Ici, si l'API de <code>Person</code> change, seule la méthode est affectée. Tous les tests passeront sans difficulté une fois cette méthode modifiée.</p>

<p>Maintenant, la politique d'autorisation évolue pour refuser les mineurs, mais également les garçons (même majeurs). Le test devient alors :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = newPerson(17, Gender.FEMALE);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

@Test
public void should_deny_access_when_male_and_overaged() {
  Person maleAdult = newPerson(18, Gender.MALE);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(maleAdult);

  assertThat(authorization, is(Authorization.DENY));
}

private Person newPerson(int age, Gender gender) {
  Person person = new Person();
  person.setAge(age);
  person.setGender(gender);
  return person;
}
</code></pre>

<p>On remarque que le premier test a été modifié, bien que le sexe de la personne ne soit pas pertinent dans ce cas. Le code du premier test est donc moins expressif sur la règle métier testée. Si on augmente le nombre de paramètres dans la méthode <code>newPerson</code> l'expressivité et la robustesse des tests décroit de plus en plus. De plus, la méthode <code>newPerson</code> n'est pas directement réutilisable dans les autres classes de test.</p>

<h2>Méthode 2 : Utilisation d'un builder</h2>

<p>Cette méthode consiste à utiliser un <code>Builder</code> pour permettre de construire une instance de <code>Person</code> personnalisable à la demande.</p>

<p>Il suffit de créer une classe <code>PersonBuilder</code> :</p>

<pre><code class="java">
public class PersonBuilder {

  private int age;
  private Gender gender = Gender.FEMALE;

  public static PersonBuilder aPerson() {
    return new PersonBuilder();
  }

  public PersonBuilder withAge(int age) {
    this.age = age;
    return this;
  }

  public PersonBuilder withGender(Gender gender) {
    this.gender = gender;
    return this;
  }

  public Person build() {
    Person person = new Person();
    person.setAge(age);
    person.setGender(gender);
    return person;
  }
}
</code></pre>

<p>Les tests deviennent alors :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = aPerson().withAge(17).build();
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

@Test
public void should_deny_access_when_male_and_overaged() {
  Person maleAdult = aPerson().withAge(18).withGender(Gender.MALE).build();
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(maleAdult);

  assertThat(authorization, is(Authorization.DENY));
}
</code></pre>

<p>Désormais, les tests sont bien plus clairs sur leur intention car seuls les attributs nécessaires sont spécifiés. Les autres peuvent être <code>null</code> ou avoir des valeurs par défaut (ici, le sexe est féminin par défaut par exemple). De plus, la logique d'instanciation d'une <code>Person</code> est située à un seul endroit dans les tests et seul le builder serait affecté si l'API venait à changer.</p>

<h2>Conclusion</h2>

<p>Les méthodes décrites dans cet article permettent de découpler les tests des logiques d'instanciation des objets nécessaires. Elles sont particulièrement utiles lors de l'utilisation d'API tierces qui ne sont pas toujours très stables ni très bien conçues. Grâce à elles, les tests sont plus expressifs, plus robustes et plus concis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand ne pas mocker]]></title>
    <link href="https://rnowif.github.io/blog/2016/04/14/quand-ne-pas-mocker/"/>
    <updated>2016-04-14T06:55:56+12:00</updated>
    <id>https://rnowif.github.io/blog/2016/04/14/quand-ne-pas-mocker</id>
    <content type="html"><![CDATA[<p>En tant que <em>Test Driven Developer</em> et plutôt adepte de l'école de TDD de Londres, j'ai tendance à utiliser un nombre assez important de <em>mocks</em> quand je teste mon code. Cependant, il y a des cas où je trouve plus utile de ne <strong>pas</strong> en utiliser.</p>

<p>L'objectif de cet article est de décrire ces cas ainsi que la façon de tester le code sans utiliser de <em>mocks</em>.</p>

<!-- more -->


<h2>Bases de données</h2>

<p>Quand je traite directement avec une base de données, la seule chose qui m'importe est si le code interagit correctement avec elle ou non. A part quelques cas particuliers d'optimisation ou de protection contre les injections SQL, la requête elle-même n'a que très peu d'importance.<br/>
Je préfère donc utiliser une vraie base de données et faire des assertions directement dessus plutôt que de vérifier la requête générée.</p>

<p>De plus, il est plus simple de monter une base de données embarquée que de capturer la requête. En effet, il serait nécessaire de connaître l'implémentation utilisée pour accéder à la base de données et ceci est un signe que nos tests sont trop couplés à notre implémentation. Ils tomberaient donc en échec si l'on venait à en changer (passage de requêtes JDBC à un ORM, ou l'inverse par exemple).</p>

<p>L'exemple suivant utilise les classes <code>EmbeddedDatabaseBuilder</code> et <code>JdbcTemplate</code> de Spring pour créer et accéder à une base de données embarquée.</p>

<pre><code class="java">public class UserRepositoryTest {

    @Test
    public void should_save_user_to_database() {
        DataSource ds = dataSource();
        JdbcUserRepository userRepository = new JdbcUserRepository(ds);

        userRepository.save(new User("John", "Doe"));

        assertThat(count(ds, "John", "Doe")).isEqualTo(1);
    }

    private int count(DataSource ds, String firstName, String lastName) {
        return new JdbcTemplate(ds).queryForObject(
                "select count(*) from user where first_name = ? and last_name = ?",
                Integer.class,
                firstName, lastName
        );
    }

    private DataSource dataSource() {
        return new EmbeddedDatabaseBuilder()
                .setType(EmbeddedDatabaseType.HSQL)
                .addScript("db/sql/create-db.sql")
                .build();
    }
}
</code></pre>

<p>Ce test ne tombera jamais en échec tant que le <em>comportement</em> de la classe ne change pas, même si son implémentation change totalement.</p>

<h2>Réseau</h2>

<p>Le code qui communique à travers le réseau peut être difficile à tester en isolation. Selon moi, ceci n'est surtout pas forcément utile. En effet, le but principal est de vérifier le bon transfert d'informations à travers le réseau, quelle que soit la librairie utilisée pour effectuer ce transfert.</p>

<p>Dans ce genre de cas, je prends souvent le parti de créer un faux serveur qui sera lancé durant mes tests afin de communiquer avec le code à tester.</p>

<p>L'exemple suivant décrit le test d'un client TCP qui va communiquer avec un serveur qui se contente de renvoyer ce qu'on lui envoie. Le faux serveur est représenté par la classe <code>FakeEchoServer</code> :</p>

<pre><code class="java">public class FakeEchoServer {
    private final int port;
    private volatile boolean running;

    public FakeEchoServer(int port) {
        this.port = port;
    }

    public void run() throws IOException {
        ServerSocket serverSocket = new ServerSocket(port);
        running = true;

        new Thread(() -&gt; {
            while (running) {
                try {
                    Socket socket = serverSocket.accept();
                    try (DataInputStream reader = getReader(socket); DataOutputStream writer = getWriter(socket)) {
                        writer.writeUTF(reader.readUTF());
                        writer.flush();
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }).start();
    }

    private DataOutputStream getWriter(Socket socket) throws IOException {
        return new DataOutputStream(socket.getOutputStream());
    }

    private DataInputStream getReader(Socket socket) throws IOException {
        return new DataInputStream(socket.getInputStream());
    }

    public void stop() {
        running = false;
    }
}
</code></pre>

<p>Le test, quant à lui, va instancier ce faux serveur et appeler la méthode à tester du client.</p>

<pre><code class="java">public class EchoClientTest {

    private static final int PORT = 9999;

    @Test
    public void should_send_message_and_get_response() throws IOException {
        FakeEchoServer server = new FakeEchoServer(PORT);
        server.run();

        String echoResult = new EchoClient("localhost", PORT).sendAndReceive("Hello");
        assertThat(echoResult).isEqualTo("Hello");

        server.stop();
    }
}
</code></pre>

<p>Le faux serveur devra évoluer au fur et à mesure que le <em>comportement</em> du client changera mais ne sera pas modifié par un changement de librairie ou de façon d'utiliser le réseau.</p>

<h2>Système de fichiers</h2>

<p>Lorsque l'on doit interagir avec un système de fichiers, on le fait souvent via des appels statiques à des classes comme <code>FileUtils</code> de <code>commons-io</code> ou <code>Files</code> du JDK ou bien des appels à <code>new File()</code>. Quoi qu'il en soit, il est difficile de <em>mocker</em> ce genre d'appels pour faire des assertions pertinentes.</p>

<p>Une solution pourrait être de ne pas <em>mocker</em> du tout et de récupérer le fichier manipulé directement depuis le système de fichiers mais il faudrait alors penser à bien nettoyer le disque avant chaque test et faire aussi attention aux droits dans le dossier à utiliser.</p>

<p>Fort heureusement, JUnit propose une <code>Rule</code> dédiée à ce genre de cas. Il s'agit de <code>TemporaryFolder</code> qui va créer un dossier temporaire dans lequel il sera possible de travailler. A la fin du test, ce dossier sera supprimé.</p>

<p>Le test d'une classe manipulant des fichiers se présente alors sous la forme suivante :</p>

<pre><code class="java">public class FileStoreTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();

    @Test
    public void should_store_file_in_the_user_folder() throws IOException, URISyntaxException {

        File rootFolder = temporaryFolder.newFolder();
        byte[] content = Files.readAllBytes(Paths.get(ClassLoader.getSystemResource("files/avatar.png").toURI()));

        new FileStore(rootFolder).store(new UserFile("avatar.png", content, "john"));

        File expectedFile = new File(rootFolder, "john/files/avatar.png");
        assertThat(expectedFile).exists().hasBinaryContent(content);
    }
}
</code></pre>

<p>Cette technique a pour inconvénient de supprimer le dossier temporaire après chaque test. Ainsi, si le test est en échec il ne sera pas forcément aisé de comprendre pourquoi car le dossier aura disparu. Si ce besoin se fait sentir, il peut être plus pertinent de créer un dossier temporaire à la main dans une méthode de setup (annotée <code>@Before</code>) au lieu d'utiliser la <code>@Rule</code>.</p>

<h2>Mail</h2>

<p>De nombreuses applications envoient des mails. Les stratégies généralement utilisées pour les tester se divisent en deux catégories :</p>

<ul>
<li><em>Mocker</em> la classe responsable de l'envoi des mails.</li>
<li>Utiliser une adresse mail &ldquo;poubelle&rdquo; qui va recevoir tous les mails et les vérifier manuellement.</li>
</ul>


<p>Aucune de ces deux méthodes n'est optimale car dans le premier cas, on ne sait pas ce qui est réellement envoyé par mail et cela rend le test très couplé à l'implémentation et dans le deuxième cas, le test n'est que très difficilement automatisable.</p>

<p>La solution optimale serait de pouvoir instancier un vrai serveur SMTP et de pouvoir récupérer les mails qu'il a reçu. C'est ce que propose la librairie <a href="https://github.com/voodoodyne/subethasmtp">SubEtha SMTP</a>.</p>

<p>Le test d'une classe permettant d'envoyer des mails va donc ressembler à ceci (on utilise également la classe <code>JavaMailSender</code> de Spring pour envoyer les mails) :</p>

<pre><code class="java">public class MailSenderTest {

    private static final int SMTP_PORT = 5555;

    @Test
    public void should_send_mail_to_customer_address() throws MessagingException, IOException {
        Wiser wiser = new Wiser(SMTP_PORT);
        wiser.start();

        new MailSender(getJavaMailSender(), "contact@acme.org").send(
                new CustomerMail("john@acme.org", "Hey you!", "How are you?")
        );

        List&lt;WiserMessage&gt; messages = wiser.getMessages();
        assertThat(messages).hasSize(1);

        MimeMessage mimeMessage = messages.get(0).getMimeMessage();
        assertThat(mimeMessage.getSubject()).isEqualTo("Hey you!");
        assertThat(mimeMessage.getFrom()[0].toString()).isEqualTo("contact@acme.org");
        assertThat(mimeMessage.getRecipients(Message.RecipientType.TO)[0].toString()).isEqualTo("john@acme.org");
        assertThat(mimeMessage.getContent().toString()).isEqualTo("How are you?\r\n");

        wiser.stop();
    }

    private JavaMailSender getJavaMailSender() {
        JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();
        javaMailSender.setHost("localhost");
        javaMailSender.setPort(SMTP_PORT);
        javaMailSender.setProtocol("smtp");
        return javaMailSender;
    }
}
</code></pre>

<h2>Conclusion</h2>

<p>Cette liste n'est bien sûr pas exhaustive est peut être complétée à l'infini.
Cependant, une tendance émerge. En effet, on se rend compte que les zones où le <em>mock</em> peut être compliqué, voire contre productif, se situent au niveau des interfaces avec le monde extérieur. Il n'est pas toujours important de tester la manière dont le code va communiquer avec l'extérieur, ni même le format exact des données envoyées.
La plupart du temps, il est seulement important de savoir si le système avec lequel le code interagit a correctement compris le message ou non. Dans les autres cas (vérification de protocole, optimisations de requêtes, etc.), il est plus pertinent d'utiliser des <em>mocks</em> pour analyser le contenu exact de ce qui est envoyé.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactorer, c'est comme dormir]]></title>
    <link href="https://rnowif.github.io/blog/2016/02/01/refactorer-c-est-comme-dormir/"/>
    <updated>2016-02-01T07:16:09+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/02/01/refactorer-c-est-comme-dormir</id>
    <content type="html"><![CDATA[<p>Robert est un développeur. On a demandé à Robert d'ajouter une nouvelle fonctionnalité à l'application. Robert aimerait bien en profiter pour refactorer un peu le code car il ne respecte pas les bonnes pratiques qu'il a pu voir lors du dernier meetup Software Craftsmanship. On dit alors à Robert qu'il ne peut pas refactorer car, en ce moment, il n'y a pas le temps pour ça et qu'il doit produire. Robert se dit qu'il n'y a de toutes façons jamais le temps&hellip;</p>

<p>Cette histoire vous semble familière ? En effet, le refactoring est souvent perçu comme n'apportant aucune valeur. D'autres choses dans la vie peuvent sembler n'apporter aucune valeur. Il y en a notamment une qui prend près du tiers de la vie d'une personne pendant laquelle cette personne ne fait littéralement rien : <em>dormir</em> !</p>

<!-- more -->


<p>Le nombre de choses que l'on pourrait faire si l'on ne dormait pas ! Cependant, au bout de quelques jours, voire quelques heures, des événements désagréables finiraient par survenir. Sans sommeil, la moindre des tâches peut devenir très longue à effectuer et des erreurs étranges peuvent arriver (comme verser du jus d'orange dans son bol de céréales). Après un certain temps, le sommeil prend le dessus de manière incontrôlée, ce qui peut conduire à des accidents (à cause d'une somnolence au volant par exemple).</p>

<p>De manière similaire, repousser le refactoring nuit au projet. Les développements peuvent prendre beaucoup plus de temps que nécessaire et des bugs peuvent survenir sur des fonctionnalités très éloignées de celles qui sont modifiées. De plus, il arrive un moment où le refactoring s'impose : le code ne peut plus être modifié sans risquer d'importantes régressions. Ceci peut se produire à un moment critique du projet et donc le mettre en péril. A ce moment là, la sentence tant redoutée peut tomber : « il faut tout réécrire ».</p>

<p>De manière globale, refactorer régulièrement est nécessaire à la bonne santé du projet, tout comme dormir chaque nuit l'est pour la notre. Dans la suite de cet article, nous allons définir ce que signifie refactorer dans ce contexte, quand est-il bon de le faire, comment bien le préparer et que faire si le temps manque.</p>

<h2>Que signifie refactorer ?</h2>

<p>Selon Michael Feathers, le refactoring est l'acte d'améliorer le <em>design</em> du code sans changer son comportement.</p>

<p>Il ne s'agit pas forcément de changer toute une hiérarchie de classes ou de mettre en place un <em>design pattern</em> très complexe mais cela peut être aussi simple que de renommer une variable, une méthode, une classe, d'extraire une méthode privée dans une classe externe, de regrouper les attributs d'une méthode dans un objet, etc.</p>

<p>De plus, nous considérons aussi qu'ajouter des tests à du code existant est du refactoring. En effet, un code testable est un premier pas vers un meilleur <em>design</em>.</p>

<h2>Quand faut-il refactorer ?</h2>

<p>L'idée n'est pas d'essayer de corriger l'intégralité du système à chaque fois. Ceci serait contre productif et impossible à mettre en place. De plus, il serait très difficilement justifiable de provoquer des régressions dans une partie du code très éloignée de celle qui est censée être modifiée.</p>

<p>Le refactoring est très efficace lorsqu'il est ciblé sur le code qui est concerné par le développement d'une fonctionnalité. De plus, il nous semble préférable de refactorer avant d'ajouter du nouveau code afin de démarrer sur des bases saines.</p>

<h2>Comment le préparer ?</h2>

<p>La première chose à faire avant de refactorer est de s'assurer qu'il y a des tests en place. Ces tests permettent de vérifier que le refactoring ne génère pas de régression. Si ces tests ne sont pas déjà en place, il faut les ajouter avant de commencer.</p>

<p>Il peut arriver qu'il soit impossible de tester une portion de code. Dans ce cas, il faut effectuer le refactoring minimum nécessaire à la mise en place des tests.</p>

<h2>Que faire si le temps manque ?</h2>

<p>Si, comme Robert, le temps vous manque, il faut faire preuve de pragmatisme. Il peut être intéressant d'effectuer de petits refactoing à chaque développement. Cela permet d'améliorer le <em>design</em> sans consommer trop de temps et de préparer le terrain pour de plus gros refactoring.</p>

<h2>Conclusion</h2>

<p>Le refactoring est essentiel dans un projet et doit être effectué régulièrement. Il permet d'assurer que les nouvelles fonctionnalités pourront être développées dans un temps raisonnable et de limiter les régressions en améliorant le <em>design</em>. Par ailleurs, il permet aussi aux développeurs de (re)prendre du plaisir à faire évoluer le produit.</p>

<p>Nous aimerions conclure avec la règle du boy scout qui indique que l'on doit toujours laisser le code dans un meilleur état que lorsqu'on l'a trouvé. L'application de cette règle conduit à l'amélioration de la qualité globale du code et à l'inversion de la dette technique.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Nadia Humbert-Labeaumaz (<a href="https://www.twitter.com/nphumbert">@nphumbert</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tell don't ask]]></title>
    <link href="https://rnowif.github.io/blog/2015/07/29/tell-dont-ask/"/>
    <updated>2015-07-29T07:57:56+12:00</updated>
    <id>https://rnowif.github.io/blog/2015/07/29/tell-dont-ask</id>
    <content type="html"><![CDATA[<p>Quand j'étais à l'école et que j'apprenais la programmation orientée objet (POO), on nous disait que les classes permettaient d'encapsuler des comportements et de cacher leur implémentation au reste du monde. Ainsi, le code qui appelle une méthode attend d'elle qu'elle se comporte comme elle a été spécifiée, quelle que soit son implémentation.</p>

<!-- more -->


<p>Prenons l'exemple d'un panier, dont le coût total doit être calculé selon certaines règles (somme de tous les articles, ajout éventuel de taxes, charges, etc.). En POO, on pourrait s'attendre à ce que la classe <code>Basket</code> ait une méthode <code>calculateTotalCost</code> qui va calculer ce coût. Après tout, le code appelant ne veut pas savoir comment calculer un coût, il veut juste le récupérer.</p>

<p>Pourtant, lors de mes premiers mois dans le monde du travail, je suis tombé sur ce genre ce code, au détour d'une méthode de la <em>couche service</em> (je vous fais grâce de la classe <code>Basket</code>)</p>

<pre><code class="java">public int calculateTotalCost(Basket basket) {

   int totalCost = 0;

   for (Article article : basket.getArticles()) {
      totalCost += article.getUnitPrice() * article.getQuantity();
   }

   totalCost = totalCost + TAX_RATE * totalCost;

   basket.setTotalCost(totalCost);

   return totalCost;
}
</code></pre>

<p>Pourquoi en est-on arrivé là ?</p>

<ul>
<li>A cause de Java qui encourage les <em>getters</em> et <em>setters</em> sur les beans ?</li>
<li>A cause des librairies comme <a href="https://projectlombok.org/">lombok</a>, qui automatisent la création de ces accesseurs ?</li>
<li>A cause de l'architecture en couches qui a été usée et abusée ?</li>
<li>A cause de l'héritage des langages procéduraux comme le C, et la fainéantise des développeurs pour changer de paradigme ?</li>
<li>Ou peut-être n'y a-t-il pas de problème et qu'il s'agit d'une bonne manière de coder ?</li>
</ul>


<p>Selon moi, il ne s'agit pas d'une manière correcte de coder ce genre de fonctionnalités et c'est pourquoi j'ai décidé d'écrire cet article.</p>

<h2>Le principe <em>Tell don&rsquo;t ask</em></h2>

<p>Ce principe stipule qu'au lieu de demander (<em>ask</em>) à un objet des informations pour les exploiter, il vaut mieux dire (<em>tell</em>) à cet objet ce que l'on veut faire et il s'en chargera lui même.</p>

<p>Selon ce principe, la classe <code>Basket</code> utilisée ci-dessus devient
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Basket</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Article</span><span class="o">&gt;</span> <span class="n">articles</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculateTotalCost</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kt">int</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Article</span> <span class="n">article</span> <span class="o">:</span> <span class="n">articles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">totalCost</span> <span class="o">+=</span> <span class="n">article</span><span class="o">.</span><span class="na">priceWithoutTaxes</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">totalCost</span> <span class="o">+</span> <span class="n">TAX_RATE</span> <span class="o">*</span> <span class="n">totalCost</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>et le service devient</p>

<pre><code class="java">public int calculateTotalCost(Basket basket) {
   return basket.calculateTotalCost();
}
</code></pre>

<p>Plusieurs remarques peuvent être faites à la lecture de ce nouveau code :</p>

<ul>
<li>Il n'y a plus d'accesseurs dans la classe <code>Basket</code>. Ses champs sont encapsulés et non exposés aux quatres vents : l'objet redevient responsable de son état.</li>
<li>Le comportement est rapproché des données qu'il va utiliser. Ainsi, il est bien plus simple de comprendre le code (et donc de le maintenir) car les données traitées sont proches de leur traitement et elle ne sont plus utilisées ailleurs.</li>
<li>La <a href="https://fr.wikipedia.org/wiki/Loi_de_D%C3%A9m%C3%A9ter">Loi de Demeter</a> est respectée. Ainsi, un changement dans une méthode de calcul de prix n'affectera personne d'autre que la classe dont le prix doit être calculé.</li>
<li>La question quant à l'utilité du service est bel et bien posée. Il ne s'agit plus que d'un passe-plat totalement inutile à part à pourrir la base de code.</li>
</ul>


<h2>De l'utilité des services et des couches</h2>

<p>En suivant ce genre de principes, il devient évident que le <em>service</em>, ce fameux <a href="https://fr.wikipedia.org/wiki/God_object">God Object</a> qui faisait la pluie et le beau temps dans le code, est réduit à peau de chagrin. Il est même possible de s'en passer très souvent.</p>

<p>Cependant, il reste indispensable dans le cas où les objets doivent collaborer entre eux. Globalement, si je devais indiquer la <em>règle</em> que j'essaie de suivre au quotidien, je dirais ceci :</p>

<ul>
<li>Si l'objet dispose de toutes les informations pour effectuer un traitement, il doit le faire.</li>
<li>Si le traitement porte sur plusieurs objets différents, une classe externe (typiquement un service) peut s'en occuper.</li>
</ul>


<h2>Restons pragmatiques</h2>

<p>Comme toujours, les principes se confrontent à la réalité et ils ne gagnent pas toujours. Il faut parfois savoir faire des petites entorses à la règle et ne pas être dogmatique sur ce genre de sujets. Qui sait, les bonnes pratiques d'aujourd'hui seront peut-être les anti-patterns de demain.</p>

<p>Cependant, après quelques temps de pratique, je pense qu'il est possible d'appliquer le principe de <em>Tell Don&rsquo;t Ask</em> au quotidien. Il est même possible de commencer dès aujourd'hui et sans devoir refactoriser l'intégralité du code source existant.</p>

<p>Pensez à ça lors de vos prochains développement et n'hésitez pas à en parler sur <a href="https://twitter.com/RnowIf">Twitter (@RnowIf)</a>, dans un commentaire sur cette page ou bien lors d'un <a href="http://www.meetup.com/fr/Software-Craftsmanship-Lyon/">Meetup Craftsman</a> à Lyon ou ailleurs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eviter les classes utilitaires et les appels statiques]]></title>
    <link href="https://rnowif.github.io/blog/2015/03/31/eviter-les-classes-utilitaires-et-les-appels-statiques/"/>
    <updated>2015-03-31T09:14:16+13:00</updated>
    <id>https://rnowif.github.io/blog/2015/03/31/eviter-les-classes-utilitaires-et-les-appels-statiques</id>
    <content type="html"><![CDATA[<p>De manière générale, les appels statiques sont des mauvaises pratiques car ils induisent notamment un fort couplage entre les classes et rendent les méthodes appelantes difficiles à tester. Cependant, il existe un cas d'utilisation qui utilise abondamment des appels statiques : il s'agit des classes utilitaires.</p>

<p>Cet article a pour objectif de voir comment et quand se passer des appels statiques aux classes utilitaires.</p>

<!-- more -->


<h2>De l'utilisation des classes utilitaires</h2>

<p>Les classes utilitaires sont utilisées absolument partout dans les programmes Java. Que ce soit les classes du JDK telles que <code>Math</code> ou <code>Arrays</code> ou bien celles de librairies externes comme <code>CollectionUtils</code> ou <code>FileUtils</code>, vous en avez forcément déjà utilisé.
Comme leur nom l'indique, ces classes sont très utiles pour effectuer des opérations courantes et sans état.</p>

<h2>Cas d'utilisation</h2>

<p>Pour illustrer mes propos, je vais prendre un cas d'utilisation assez classique : calculer le hash d'un mot de passe avant insertion en base de données. Ce cas d'utilisation semble être éligible à l'utilisation d'une classe utilitaire.</p>

<h3>Utilisation d'une méthode statique</h3>

<h4>Implémentation</h4>

<p>En suivant la logique des classes utilitaires, voici une implémentation possible de ce comportement.</p>

<p>Nous allons créer une classe utilitaire nommée <code>SecurityUtils</code> qui dispose d'une méthode statique <code>sha256</code> qui hash un texte en clair.</p>

<pre><code class="java">public class SecurityUtils {

   public static String sha256(String plainText) {
     try {

        MessageDigest md;
        md = MessageDigest.getInstance("SHA-256");
        md.update(plainText.getBytes("iso-8859-1"), 0, plainText.length());
        byte[] shaHash = md.digest();
        return toHexadecimal(shaHash); 

     } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
        logger.error(e);
     } 
   }

}
</code></pre>

<p>Ensuite, la classe du service qui va appeler cette méthode</p>

<pre><code class="java">public class UserService {

   public User save(User user, String plainPassword) {

      user.setPassword(SecurityUtils.sha256(plainPassword));        
      repository.save(user);

      return user;
   }

}
</code></pre>

<p>Ce code semble correct et est très courant dans les programmes Java. Cependant, il me pose un problème conséquent. En effet, comment tester la méthode <code>save</code> de manière unitaire ?</p>

<h4>Tests</h4>

<p>Tester unitairement une méthode qui effectue des appels statiques est compliqué. Un test unitaire compliqué est souvent un symptôme d'un code trop couplé et mal conçu.</p>

<p>Voici une implémentation naïve du test unitaire de la méthode <code>save</code>.</p>

<pre><code class="java">public class UserServiceTest {

   @Test
   public void should_hash_password_when_save() {

      User user = new UserService().save(new User(), "pass_word");

      assertThat(user.getPassword).isEqualTo(SecurityUtils.sha256("pass_word"));
   }
}
</code></pre>

<p>Ce test a le mérite de ne pas dépendre de l'implémentation de <code>sha256</code>. Cependant, si celle-ci lance une exception, ou bien retourne toujours une chaine vide par exemple, le test peut générer des faux négatifs ou des faux positifs sans que l'on sache si cela provient du service ou de la classe utilitaire.</p>

<p>Il est bien évidemment possible de mocker des méthodes statiques avec des librairies comme <a href="https://code.google.com/p/powermock/">PowerMock</a> mais je préfère éviter d'utiliser ce genre de raccourci. C'est pourquoi je préfère me passer de méthodes statiques et utiliser des méthodes d'instances à la place.</p>

<h3>Utilisation d'une méthode d'instance</h3>

<h4>Implémentation</h4>

<p>Pour le même cas d'utilisation, voici l'implémentation que j'utiliserais.</p>

<p>Tout d'abord, je définis une interface qui sera le contrat de ma classe utilitaire.</p>

<pre><code class="java">public interface SecurityProvider {

   public String sha256(String plainText);

}
</code></pre>

<p>Ensuite, il faut implémenter cette interface.</p>

<pre><code class="java">public class SecurityProviderImpl implements SecurityProvider {

   public String sha256(String plainText) {
     try {

        MessageDigest md;
        md = MessageDigest.getInstance("SHA-256");
        md.update(plainText.getBytes("iso-8859-1"), 0, plainText.length());
        byte[] shaHash = md.digest();
        return toHexadecimal(shaHash); 

     } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
        logger.error(e);
     } 
   }

}
</code></pre>

<p>Finalement, pour utiliser cette classe, il faut l'injecter dans le service. L'injection peut se faire à la main, via Spring ou JEE mais cela pourrait être l'objet d'un autre article donc je ne rentrerai pas dans les détails.</p>

<pre><code class="java">public class UserService {

   private final SecurityProvider securityProvider;

   public UserService(SecurityProvider securityProvider) {
      this.securityProvider = securityProvider;
   }

   public User save(User user, String plainPassword) {

      user.setPassword(securityProvider.sha256(plainPassword));        
      repository.save(user);

      return user;
   }

}
</code></pre>

<h4>Tests</h4>

<p>Cette implémentation est beaucoup plus simple à tester unitairement. En effet, il suffit de mocker l'interface pour vérifier le bon comportement du service. Ce mock peut être fait manuellement ou à l'aide d'un framework comme <a href="http://mockito.org/">Mockito</a>.</p>

<pre><code class="java">public class UserServiceTest {

   @Test
   public void should_hash_password_when_save() {

      SecurityProvider securityProvider = new SecurityProvider() {

         @Override
         public String sha256(String plainText) {
            return "Hashed :" + plainText;
         }

      }

      User user = new UserService(securityProvider).save(new User(), "pass_word");

      assertThat(user.getPassword).isEqualTo("Hashed :pass_word");
   }
}
</code></pre>

<p>Ce test est à 100% découplé de l'implémentation réelle de la méthode <code>sha256</code> et permet de tester de manière réellement unitaire la méthode <code>save</code> du service.</p>

<h2>Bonnes pratiques et pragmatisme</h2>

<p>L'utilisation des classes utilitaires et des méthodes statiques est globalement à proscrire car cela rend le code fortement couplé et difficile à tester. Cependant, un développeur se doit d'être pragmatique.
En effet, créer une interface, une implémentation et une injection pour chaque appel à une méthode utilitaire peut sembler un peu trop long et verbeux.</p>

<p>Je pense qu'il s'agit de trouver le bon compromis entre une utilisation sage des méthodes statiques et les bonnes pratiques de programmation. Par exemple, il n'est pas utile de mettre en place ce pattern pour des calculs simples comme une valeur absolue, un test sur la présence ou non d'élément dans une liste ou le calcul d'un minimum entre deux nombres. Par contre, quand il s'agit de traitements plus lourds comme des calculs complexes ou la manipulation d'un fichier, ce travail supplémentaire peut porter ses fruits et doit être mis en place.</p>
]]></content>
  </entry>
  
</feed>
