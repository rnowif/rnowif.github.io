<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-11-03T08:44:00+13:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Enums]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-enums/"/>
    <updated>2018-10-21T06:54:27+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-enums</id>
    <content type="html"><![CDATA[<p>Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences.</p>

<!-- more -->


<p>In Java, enums are very much like regular classes: they can implement interfaces and have methods. However, they cannot inherit other classes or be explicitly instantiated. They can be viewed as <code>final</code> classes (or <code>sealed</code> classes in C#) that already inherit the virtual &ldquo;enum&rdquo; class, have only private constructor(s) and a set of pre-defined instances (the values of the enum).</p>

<p>For instance, let&rsquo;s take the example of the HTTP status codes. In Java, it is possible to write this code:</p>

<pre><code class="java">enum HttpStatus implements Comparable&lt;HttpStatus&gt; {
    OK(200), SERVER_ERROR(500), NOT_FOUND(404);

    private final int code;

    HttpStatus(int code) {
        this.code = code;
    }

    // This is a regular instance method
    int code() {
        return code;
    }

    // This is the implementation of the Comparable interface
    @Override
    int compareTo(HttpStatus o) {
        // Http statuses will be sorted by status code
        return Integer.compare(code, o.code);
    }
}
</code></pre>

<pre><code class="java">HttpStatus status = HttpStatus.OK;

// The 'code' method can be invoked like any other method
int code = status.code();
</code></pre>

<p>In C#, enums are just integers in disguise. The previous snippet can be simulated in C# only because the <code>code</code> attribute happens to be an <code>int</code>. Otherwise, it would be very complex to have the same behaviour:</p>

<pre><code class="csharp">enum HttpStatus {
    // int value of the enum can be forced to a specific value
    OK = 200,
    NOT_FOUND = 404,
    SERVER_ERROR = 500
}
</code></pre>

<pre><code class="csharp">HttpStatus status = HttpStatus.OK;

// The enum can be casted to an int to get its value
int code = (int) status;
</code></pre>

<p>To sum up, Java enums are much more powerful than their C# counterparts. I often use these features when I write Java code and I think I would miss them if I had to write C# code on a daily basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Lambdas]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-lambdas/"/>
    <updated>2018-10-21T00:37:12+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-lambdas</id>
    <content type="html"><![CDATA[<p>A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be viewed as the implementation of an interface with only one method (called a <em>functional interface</em>) whereas a C# lambda can be assigned to a <code>delegate</code>, which is a concept that does not exist in Java. This article aims to explain how lambdas work in Java and C# and highlight their differences and similarities.</p>

<!-- more -->


<h2>Java Functional Interfaces</h2>

<p>In Java, a lambda can simply be viewed as an anonymous function that implements an interface with only one method. This kind of interface is called a <em>functional interface</em> and can be annotated with the <code>@FunctionalInterface</code> annotation that tells the compiler to enforce the only-one-method rule:</p>

<pre><code class="java">@FunctionalInterface
interface Printer {
    void print(String message);
}
</code></pre>

<pre><code class="java">// The function interface is implemented with a lambda
Printer standardPrinter = message -&gt; System.out.println(message);

// The print method of standardPrinter can be invoked
standardPrinter.print("Hello World!");
</code></pre>

<p>From the previous snippet, you should note that the way the interface is implemented makes absolutely no difference. It can be a lambda, a concrete or even an anonymous class. In any ways, you can simply invoke the <code>print</code> method of the interface.</p>

<p>There are some pre-defined <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">generic functional interfaces</a> in the JDK that can be used directly off the shelf. The main ones are described below:</p>

<table>
<thead>
<tr>
<th> Name </th>
<th> Method </th>
<th> Role </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html"><code>Function&lt;T,R&gt;</code></a> </td>
<td> <code>R apply(T t)</code> </td>
<td> Takes an argument of a given type T and returns an object of type R </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html"><code>Consumer&lt;T&gt;</code></a> </td>
<td> <code>void accept(T)</code> </td>
<td> Takes an argument of a given type T and does something useful (typically with side effects) </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><code>Predicate&lt;T&gt;</code></a> </td>
<td> <code>boolean test(T)</code> </td>
<td> Takes an argument of a given type T and returns a boolean (similar to <code>Function&lt;T, Boolean&gt;</code>) </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html"><code>Supplier&lt;T&gt;</code></a> </td>
<td> <code>T get()</code> </td>
<td> Returns an object of type T </td>
</tr>
</tbody>
</table>


<h2>C# Delegates</h2>

<p>In C#, a lambda can be assigned to a delegate which is a type that encapsulates a method:</p>

<pre><code class="csharp">delegate void Print(string message);
</code></pre>

<pre><code>// A lambda is assigned to the delegate
Print print = message =&gt; System.Console.WriteLine(message);

// print can be directly invoked as a method
print("Hello World!");
</code></pre>

<p>Like in Java, some delegates are already defined in the .NET framework, the main ones are described below:</p>

<table>
<thead>
<tr>
<th> Method </th>
<th> Role </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.func-2"><code>TResult Func&lt;in T,out TResult&gt;(T arg)</code></a> </td>
<td> Takes an argument of a given type T and returns an object of type TResult </td>
</tr>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.action-1"><code>void Action&lt;in T&gt;(T obj)</code></a> </td>
<td> Takes an argument of a given type T and does something useful (typically with side effects) </td>
</tr>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1"><code>bool Predicate&lt;in T&gt;(T obj)</code></a> </td>
<td> Takes an argument of a given type T and returns a boolean (similar to <code>Func&lt;T, bool&gt;</code>) </td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>From a Java perspective, using lambdas in APIs (like Linq for instance) is pretty straightforward. However, when digging a little bit deeper, there are some subtle differences to understand. I find the Java approach simpler as it does not introduce another concept but the C# approach is cleaner because the delegate can be invoked directly like a method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Generics]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics/"/>
    <updated>2018-10-20T05:57:36+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics</id>
    <content type="html"><![CDATA[<p>In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is <em>very</em> different. This blog post aims to explain the differences and the similarities between the two.<br/>
TL;DR Java generics is a lie, C# generics is not.</p>

<!-- more -->


<h2>Java Generics is a Lie</h2>

<p>Generics have been introduced in Java 5. Before that, you had to manipulate <code>Objects</code> and cast them to the desired type:</p>

<pre><code class="java">List apples = new ArrayList();
apples.add(new Apple());
// This is really a list of objects, so the cast is required
Apple firstApple = (Apple) apples.get(0);
</code></pre>

<p>In the previous snippet, you should note that there is absolutely nothing that prevents you from adding a <code>Banana</code> into the list and make the program crash at runtime. Also, this code is still valid in the latest version of Java (which is Java 11 as we speak). To say the least, this approach is not very safe and do not leverage the type system as much as we could expect.</p>

<p>Since Java 5, it is then possible to use the generic version of the <code>List</code> class:</p>

<pre><code class="java">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();
apples.add(new Apple());
// The cast is not required any more thanks to the generics
Apple firstApple = apples.get(0);
</code></pre>

<p>The thing is that, at runtime, the two previous snippets are strictly equivalent. Indeed, Java generics are removed during compilation and the resulting bytecode only manipulate <code>Objects</code> and casts. This is called <em>type erasure</em>. As a consequence, it is not possible, in Java, to write code like this:</p>

<pre><code class="java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (o instanceof T) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}
</code></pre>

<p>Indeed, the type of <code>T</code> is erased at runtime and the <code>instanceof</code> operation cannot be performed. That is why a class object is often passed as an argument of the method:</p>

<pre><code class="java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects, Class&lt;T&gt; clazz) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (clazz.isInstance(o)) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}
</code></pre>

<p>This method can be invoked like this:</p>

<pre><code class="java">List&lt;String&gt; stringsOnly = filterObjectsOfType(Arrays.asList("hello", 2), String.class);
// stringsOnly contains only "hello"
</code></pre>

<h2>C# Generics is a Runtime Feature</h2>

<p>C# generics, on the other hand, is a totally different beast. Indeed, the real type is kept at runtime and it is possible to use this type to write this kind of code:</p>

<pre><code class="csharp">/**
 * Filter objects of the given type
 */
public IEnumerable&lt;T&gt; FilterObjectsOfType&lt;T&gt;(IEnumerable&lt;object&gt; objects)
{
    List&lt;T&gt; filteredObjects = new List&lt;T&gt;();
    foreach (var obj in objects)
    {
        if (obj is T)
        {
            filteredObjects.Add((T) obj);    
        }
    }
    return filteredObjects;
} 
</code></pre>

<p>This method can be invoked like this:</p>

<pre><code class="csharp">IEnumerable&lt;String&gt; stringsOnly = FilterObjectsOfType&lt;String&gt;(new List&lt;object&gt;(new object[] { "hello", 2 }));
// stringsOnly contains only "hello"
</code></pre>

<h2>Conclusion</h2>

<p>In Java, generics are used to write type-safe code but this feature is limited and the code can be awkward sometimes due to the type erasure mechanism. In C#, it is a runtime feature and its usage is much more straightforward.</p>

<p><em>PS: I realize that the code I wrote in the snippets is not really idiomatic but I wanted to have Java and C# code as similar as possible to be able to focus only on the usage of generics.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Extension Methods]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-extension-methods/"/>
    <updated>2018-10-20T01:20:24+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-extension-methods</id>
    <content type="html"><![CDATA[<p>After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like <a href="https://kotlinlang.org/docs/reference/extensions.html">Kotlin</a>) but not in Java, let the developer add methods to a class without touching its code (hence the name <em>extension</em> methods).</p>

<!-- more -->


<p>Let&rsquo;s say you want to create a method that puts the first letter of a string in upper case and returns the new string. You cannot modify (or even inherit) the <code>String</code> class in Java to add this method. Since you don&rsquo;t necessarily want to create your own custom flavour of the <code>String</code> class for your code base, you would probably create a static function that takes a <code>String</code> as an argument and return another <code>String</code>:</p>

<pre><code class="java">class StringExtensions {
    static String capitalize(String word) {
        return Character.toUpperCase(word.charAt(0)) + word.substring(1);
    }
}
</code></pre>

<p>Now, you can simply invoke this function like this:</p>

<pre><code class="java">String word = "hello";
String capitalizedWord = StringExtensions.capitalize(word);
</code></pre>

<p>Of course, creating a static method is also possible in C#. However, C# has a feature that allows to add new methods to a class without having to modify its code. This feature is called <em>extension methods</em>. In order to create an extension method, you have to create a top-level static class and implement a static method. The first argument of this method specifies the type that the method operates on and should have the <code>this</code> modifier:</p>

<pre><code class="csharp">static class StringExtensions 
{
  static string Capitalize(this String word)
  {
      // Note that this cannot access any private data in the String class. 
      return char.ToUpper(word[0]) + word.Substring(1);
  }
}
</code></pre>

<p>In order to use it, the namespace that contains the class must be specified with a <code>using</code> directive. Afterwards, the method can be invoked as if it was an instance method of the type:</p>

<pre><code class="csharp">string word = "hello";
string capitalizedWord = word.Capitalize();
</code></pre>

<p>Extension methods are very powerful. Beside the fact that the code looks &ldquo;cleaner&rdquo;, it is also possible to seamlessly plug new behaviours in existing types by simply importing a namespace. The extension code can be in separate specific modules that can be imported only when needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is a Volatile Variable in Java?]]></title>
    <link href="https://rnowif.github.io/blog/2018/09/21/what-is-a-volatile-variable-in-java/"/>
    <updated>2018-09-21T22:13:33+12:00</updated>
    <id>https://rnowif.github.io/blog/2018/09/21/what-is-a-volatile-variable-in-java</id>
    <content type="html"><![CDATA[<p>The <code>volatile</code> keyword is one of the less known and less understood keyword of the Java language. The goal of this article is to explain what it is and when to use it.</p>

<!-- more -->


<h2>Memory Architecture</h2>

<p>In order to understand the value of <code>volatile</code>, one must first understand the memory architecture of a computer:</p>

<p><img src="/images/memory_architecture.png"></p>

<p>Each CPU contains its own registers, which are basically in-CPU memory. Accessing these registers and performing operations on variables here is very fast.
Each CPU also has cache memory layers. It can access this cache memory fast, but not as fast as the registers.
Finally, there is the main memory (also called RAM). All CPUs can access this memory. The main memory is much bigger than the cache memories of the CPU.</p>

<p>Typically, when a CPU needs to read something from the memory, it will read it into its CPU cache memory and perform operations on it. It can even read it into its registers. When the CPU needs to write it back to the memory, it will flush its registers to the cache memory and eventually this cache memory will be flushed back to the main memory.</p>

<p>In general, the flush is performed when the CPU needs to make room for other information. Thus, it seems clear that one cannot make any assumption about <em>when</em> this flush will occur.</p>

<h2>Visibility of Shared Variables</h2>

<p>If a computer has 2 CPUs or more, it will be able to run several threads at the same time. It means that, if each thread want to access the same variable, each CPU will have a &ldquo;copy&rdquo; of this variable into its cache memory and this could lead to a major synchronization issue.</p>

<p>Take this code for instance:</p>

<pre><code class="java">public class MyServer implements Runnable {
    private boolean running = true;

    @Override
    public void run() {
        while (running) {
            // Do some very interesting stuff...
        }
    }

    public void stop() {
        running = false;
    }
}
</code></pre>

<p>It is very likely that the <code>stop</code> method will be called from a different thread than the one executing the <code>run</code> method. If these threads are executed on 2 different CPUs, the <code>run</code> method will not stop until the CPU has flushed its cache memory to the main memory. And we saw that there is no way to predict when this will happen.</p>

<p>In Java, the <code>volatile</code> keyword explicitely ask for a variable to be directly wrote to the main memory, and thus becoming instantely available for all CPUs.</p>

<p>The code then become:</p>

<pre><code class="java">public class MyServer implements Runnable {
    private volatile boolean running = true;

    @Override
    public void run() {
        while (running) {
            // Do some very interesting stuff...
        }
    }

    public void stop() {
        running = false;
    }
}
</code></pre>

<p>Note that a volatile variable can be a primitive or an object and can be <code>null</code>.</p>

<h2>When to Use <code>volatile</code></h2>

<p> A volatile variable is guaranteed to have its last version always available from every CPUs. It is typically used for flags that are modified by a thread and read by another one (like the <code>running</code> boolean in the previous snippet). Globally, you may use a <code>volatile</code> variable if the variable may be accessed by several threads and you don&rsquo;t need to perform a sequence of operations in an atomic manner (you should not increment a <code>volatile</code> variable for instance). If you need to do so, you should consider using a synchronization mechanism.</p>

<h2>Conclusion</h2>

<p>The <code>volatile</code> keyword is seldomly used, maybe because messing with threads is frowned upon in a JEE (or Spring) application, but it can be very useful to know it and understand its usage. Indeed, it could make your code safer and prevent you from writing algorithms that rely on locks and synchronization where it&rsquo;s not really needed.</p>
]]></content>
  </entry>
  
</feed>
