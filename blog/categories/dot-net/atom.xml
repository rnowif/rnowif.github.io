<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/dot-net/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-10-22T23:26:28+13:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.Net Clean Architecture]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/22/asp-dot-net-clean-architecture/"/>
    <updated>2018-10-22T10:04:23+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/22/asp-dot-net-clean-architecture</id>
    <content type="html"><![CDATA[<p>When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation of the Uncle Bob&rsquo;s <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> on an ASP.Net project. The source code of this project can be found on my <a href="https://github.com/rnowif/Expenses">GitHub</a>.</p>

<!-- more -->


<p>The main idea of the clean architecture is to reduce the coupling between the core business code and the external world (Web, Database, Frameworks). In order to do that, the project can be divided in 3 main modules, that will be described below: <code>Domain</code>, <code>Web</code> and <code>Data</code>.</p>

<h2>Domain</h2>

<p>This module contains all the core business code. It does not depend on anything else than the .NET SDK and contains sub-modules.</p>

<h3><code>Entities</code></h3>

<p>They are the building blocks of the domain and encapsulate the business concepts. Entities are not coupled with any ORM framework. Indeed the domain model can be quite different from the database model!</p>

<h3><code>Use Cases</code></h3>

<p>Following the Uncle Bob&rsquo;s definition, they contains application specific business rules and orchestrate the flow of data to and from the entities and implement higher level business rules.</p>

<p>It is important to understand that the domain model should not leak outside of this module. In order to do that, use cases should not take entities are arguments for their methods, but a list of raw arguments. For instance, the use case that submit a new expense looks like the following:</p>

<pre><code class="csharp">public interface ISubmitExpense
{
    void Execute(Guid userId, string description, long priceWithoutTax, long priceIncludingTax);
}
</code></pre>

<p>It is responsible to build an <code>Expense</code> object and apply the relevant business logic.</p>

<h3><code>Repositories</code></h3>

<p>In the domain module, repositories are only interfaces that are used by the use cases to access data without any knowledge of the concrete implementations: data can be retrieved from databases, files or external Web APIs, it should not affect the core business logic at all. To reinforce this, repositories take entities as arguments and return entities as well. It is the responsibility of the concrete implementation to handle conversion if needed.</p>

<h2>Data</h2>

<p>The data module contains the database and ORM configuration and the repositories implementations. Typically, we find the EntityFramework configuration in this module as well as the annotated classes that will be mapped with database entries. Repositories implementation are responsible for converting &ldquo;database objects&rdquo; in domain objects:</p>

<pre><code class="csharp">public void Create(Expense expense)
{
  // Convert the domain object "Expense" into a database object "DbExpense"
  _dbContext.Expenses.Add(DbExpense.FromExpense(expense));
  _dbContext.SaveChanges();
}
</code></pre>

<p>This prevents the ORM framework to leak into the domain.</p>

<h2>Web</h2>

<p>The web module contains all the controllers. It is responsible for handling HTTP requests, converting JSON or XML payloads to objects and invoking use cases:</p>

<pre><code class="csharp">[HttpPost]
public void SubmitExpense([FromBody] SubmitExpenseCommand expense)
{
  // The controller just invoke the use case with data extracted from the body of the HTTP request
  _submitExpense.Execute(expense.UserId, expense.Description, expense.PriceWithoutTax, expense.PriceIncludingTax);
}
</code></pre>

<p>It should not contain any business logic whatsoever. As a consequence, controllers are very lightweight and easy to test.</p>

<h2>Dependency injection</h2>

<p>In order to achieve low coupling between the modules, interfaces are injected into the constructor of the different classes:</p>

<pre><code class="csharp">public class SubmitExpense : ISubmitExpense
{

    private readonly IExpenseRepository _repository;

    public SubmitExpense(IExpenseRepository repository)
    {
      _repository = repository;
    }
}
</code></pre>

<p>The plumbing is handled by the <code>Startup.cs</code> class where all the implementations of the interfaces are declared:</p>

<pre><code class="csharp">public void ConfigureServices(IServiceCollection services)
{
  // ...

  // Register "SubmitExpense" as the implementation of "ISubmitExpense"
  services.AddTransient&lt;ISubmitExpense, SubmitExpense&gt;();
  services.AddTransient&lt;IExpenseRepository, ExpenseRepository&gt;();
}
</code></pre>

<h2>Conclusion</h2>

<p>In this architecture, the emphasis is put on the domain. Every other modules should adapt to it but it does not depend on anything. This results in lightweight classes that are very easy to understand and test in isolation.<br/>
Moreover, the low coupling makes it very easy to change the infrastructure. Indeed, the domain module would not change a bit if we decided to have a CLI instead of a Web App or if the data should be retrieved from an external Web API instead of a PostgreSQL database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Generics]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics/"/>
    <updated>2018-10-20T05:57:36+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics</id>
    <content type="html"><![CDATA[<p>In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is <em>very</em> different. This blog post aims to explain the differences and the similarities between the two.<br/>
TL;DR Java generics is a lie, C# generics is not.</p>

<!-- more -->


<h2>Java Generics is a Lie</h2>

<p>Generics have been introduced in Java 5. Before that, you had to manipulate <code>Objects</code> and cast them to the desired type:</p>

<pre><code class="java">List apples = new ArrayList();
apples.add(new Apple());
// This is really a list of objects, so the cast is required
Apple firstApple = (Apple) apples.get(0);
</code></pre>

<p>In the previous snippet, you should note that there is absolutely nothing that prevents you from adding a <code>Banana</code> into the list and make the program crash at runtime. Also, this code is still valid in the latest version of Java (which is Java 11 as we speak). To say the least, this approach is not very safe and do not leverage the type system as much as we could expect.</p>

<p>Since Java 5, it is then possible to use the generic version of the <code>List</code> class:</p>

<pre><code class="java">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();
apples.add(new Apple());
// The cast is not required any more thanks to the generics
Apple firstApple = apples.get(0);
</code></pre>

<p>The thing is that, at runtime, the two previous snippets are strictly equivalent. Indeed, Java generics are removed during compilation and the resulting bytecode only manipulate <code>Objects</code> and casts. This is called <em>type erasure</em>. As a consequence, it is not possible, in Java, to write code like this:</p>

<pre><code class="java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (o instanceof T) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}
</code></pre>

<p>Indeed, the type of <code>T</code> is erased at runtime and the <code>instanceof</code> operation cannot be performed. That is why a class object is often passed as an argument of the method:</p>

<pre><code class="java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects, Class&lt;T&gt; clazz) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (clazz.isInstance(o)) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}
</code></pre>

<p>This method can be invoked like this:</p>

<pre><code class="java">List&lt;String&gt; stringsOnly = filterObjectsOfType(Arrays.asList("hello", 2), String.class);
// stringsOnly contains only "hello"
</code></pre>

<h2>C# Generics is a Runtime Feature</h2>

<p>C# generics, on the other hand, is a totally different beast. Indeed, the real type is kept at runtime and it is possible to use this type to write this kind of code:</p>

<pre><code class="csharp">/**
 * Filter objects of the given type
 */
public IEnumerable&lt;T&gt; FilterObjectsOfType&lt;T&gt;(IEnumerable&lt;object&gt; objects)
{
    List&lt;T&gt; filteredObjects = new List&lt;T&gt;();
    foreach (var obj in objects)
    {
        if (obj is T)
        {
            filteredObjects.Add((T) obj);    
        }
    }
    return filteredObjects;
} 
</code></pre>

<p>This method can be invoked like this:</p>

<pre><code class="csharp">IEnumerable&lt;String&gt; stringsOnly = FilterObjectsOfType&lt;String&gt;(new List&lt;object&gt;(new object[] { "hello", 2 }));
// stringsOnly contains only "hello"
</code></pre>

<h2>Conclusion</h2>

<p>In Java, generics are used to write type-safe code but this feature is limited and the code can be awkward sometimes due to the type erasure mechanism. In C#, it is a runtime feature and its usage is much more straightforward.</p>

<p><em>PS: I realize that the code I wrote in the snippets is not really idiomatic but I wanted to have Java and C# code as similar as possible to be able to focus only on the usage of generics.</em></p>
]]></content>
  </entry>
  
</feed>
