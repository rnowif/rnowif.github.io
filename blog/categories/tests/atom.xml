<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tests | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/tests/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-11-03T08:44:00+13:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Java Spring Boot Microservices]]></title>
    <link href="https://rnowif.github.io/blog/2017/09/18/testing-java-spring-cloud-microservices/"/>
    <updated>2017-09-18T02:09:24+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/09/18/testing-java-spring-cloud-microservices</id>
    <content type="html"><![CDATA[<p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. It is crucial to understand the role of each type of tests in order to leverage their potential.</p>

<p>The goal of this article is to describe a strategy to use them in order to test Java Spring Boot microservices. For every type of tests, we will try to explain its role, its scope as well as tooling we like to use.</p>

<!-- more -->


<h2>Anatomy of a Microservice</h2>

<p>First of all, we will setup a common vocabulary to make this article as clear as possible. A standard microservice is composed of:</p>

<ul>
<li><strong>Resources</strong>: HTTP controllers or AMQP listeners that will serve as the entry point of the microservice.</li>
<li><strong>Services / domain</strong>: Classes that will contain the business logic.</li>
<li><strong>Repositories</strong>: Classes that will expose an API to access a storage (like a database for instance).</li>
<li><strong>Clients</strong>: HTTP clients or AMQP producers that will communicate with external resources.</li>
<li><strong>Gateways</strong>: Classes that will serve as interfaces between domain services and clients by handling HTTP or AMQP related tasks and providing a clean API to the domain.</li>
</ul>


<h2>Types of Tests</h2>

<h3>Unit Tests</h3>

<p>Unit tests allow to test a unit (generally a method) in isolation. They are very cost-effective: easy to setup and very fast. Thus, they can give a very fast feedback about the state of the application to quickly spot bugs or regressions. It is then advised to test every edge cases and relevant combinations with unit tests.
As a bonus, they can validate a design: if the code is really difficult to test, the design is probably bad.</p>

<p>In a microservice, like in any other codebase, it is crucial to unit test domain / service classes and every other classes that contain logic.</p>

<p>The tooling we prefer to write unit tests is <a href="http://junit.org/junit5/">Junit</a> (to run the tests), <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> (to write assertions) and <a href="http://site.mockito.org/">Mockito</a> (to mock external dependencies).</p>

<h3>Integration Tests</h3>

<p>Integration tests are used to test the correct integration of the different bricks of the application. They are sometimes hard to setup and have to be carefully chosen. The idea is not to test all possible interactions but to choose relevant ones. The feedback of these tests is less fast than with unit tests because they are slower to execute. It is important to note that writing too many integration tests for the same interaction can be counter-productive. Indeed, the build time will be increased without any added value.</p>

<p>In a microservice, integration tests can be written for:</p>

<ul>
<li>Repositories when the query is more complex than just a <code>findById</code>.</li>
<li>Services in case of doubt on the interaction between the service and the respository (JPA or transaction issues for instance).</li>
<li>HTTP clients.</li>
<li>Gateways.</li>
</ul>


<p>Spring Boot provides a very good tooling to write integration tests. A typical integration test with Spring Boot looks like this:</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class UserGatewayIntTest {

    @Autowired
    private UserGateway userGateway;

    // ...
}
</code></pre>

<p>The test must use the <code>SpringRunner</code> and be annotated with <code>@SpringBootTest</code>. It is then possible to inject a bean using <code>@Autowired</code> and to mock one using <code>@MockBean</code>.
In an integration test, the database should be embedded (H2 database is a good candidate) in order for the tests to be executable anywhere. For the same reason, external HTTP resources can be mocked using <a href="http://wiremock.org/">WireMock</a> and SMTP server with <a href="https://github.com/voodoodyne/subethasmtp">SubEthatSMTP</a>.</p>

<p>In order to be able to mock external microservices, the port must be fixed. In production, microservices will register themselves to a registry and an URL will be dynamically assigned to them. If <a href="https://github.com/Netflix/ribbon">Ribbon</a> is used with Spring Cloud, it is possible to fix the URL in tests, by adding a property to the test <code>application.yml</code> (here, the external microservice name is <code>user</code>):</p>

<pre><code class="yml">user:
  ribbon:
    listOfServers: localhost:9999
</code></pre>

<h3>Component Tests</h3>

<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>In the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to setup because the already existing external API of the microservice can often be used directly without the need to setup additional things (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>Component tests should be concise and easy to understand (see <a href="https://blog.crafties.fr/2017/09/16/how-to-write-robust-component-tests/">How to Write Robust Component Tests</a>). The goal is to test the behaviour of the microservice by writing a nominal case and very few edge cases. We noticed that writing the specification before implementing the feature can lead to very simple component tests. Moreover, it is a good practice to write the component tests in collaboration with the different stakeholders in order to cover the feature in a very efficient way.</p>

<p>In component tests, an embedded database can also be used. Moreover, it is possible to mock HTTP and AMQP clients: this is not the place to test the integration with external resources (see <a href="https://blog.crafties.fr/2017/07/23/setup-a-circuit-breaker-with-hystrix/">Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</a>).</p>

<p>An example of tools we can use to write component tests is <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> (to write the specifications) with <a href="https://cucumber.io/">Cucumber</a> (to run the tests).</p>

<p>In order to perform requests on the HTTP API of the microservice and make assertions on the response, <a href="https://blog.crafties.fr/2015/10/31/testing-spring-mvc-controllers/">MockMvc</a> can be used.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ResultActions</span> <span class="n">actions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I get \&quot;([^\&quot;]*)\&quot; on the application$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetOnTheApplication</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">uri</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^I get a Response with the status code (\\d+)$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetAResponseWithTheStatusCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">statusCode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="n">statusCode</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In order to inject AMQP messages, the channel used by Spring Cloud Stream can also be injected directly into the test.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// AMQP listener code</span>
</span><span class='line'><span class="nd">@EnableBinding</span><span class="o">(</span><span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStream</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@StreamListener</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleRevision</span><span class="o">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">MyMessageDTO</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// handle message</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Process</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Input</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span> <span class="n">SubscribableChannel</span> <span class="nf">process</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Cucumber step definition</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span> <span class="n">myChannel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I publish an event with the following data:$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iPublishAnEventWithTheFollowingData</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">myChannel</span><span class="o">.</span><span class="na">process</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="n">GenericMessage</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">payload</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, it may be important to fix the time to make tests more robust (see <a href="https://blog.crafties.fr/2017/07/20/controlling-time-in-java/">Controlling the Time in Java</a>)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span> <span class="nd">@MockBean</span> <span class="kd">private</span> <span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^The time is \&quot;([^\&quot;]*)\&quot;$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theTimeIs</span><span class="o">(</span><span class="n">String</span> <span class="n">datetime</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ZonedDateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">datetime</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">date</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Contract Tests</h3>

<p>The goal of contract tests is to automatically verify that the provider of a service and its consumers speak the same language. These tests do not aim to verify the behaviour of the components but simply their contracts. They are particularly useful for microservices since almost all their value lies in their interactions. It is crucial to guarantee that no provider breaks the contract used by its consumers.</p>

<p>The general idea is that consumers write tests that define the initial state of the provider, the request sent by the consumer and the expected response. The provider must provide a server in the required state. The contract will automatically be verified against this server. This implies the following:</p>

<ul>
<li>on the consumer side: contract tests are written using the HTTP client. Given a provider state, assertions are made on the HTTP response.</li>
<li>on the provider side: only the HTTP resource should be instanciated. All its dependencies should be mocked in order to provide the required state.</li>
</ul>


<p>It is important to note that contract tests should stick to the real needs of the consumer. If a field is not used by a consumer, it should not be tested in the contract test. Then, the provider is free to update or delete every field that is not used by any consumer and we are sure that if tests fail, it is for a good reason.</p>

<p>The tool we like to use to write and execute contract tests is <a href="https://docs.pact.io/">Pact</a>. It is a very mature product that has plugins for a lot of languages (JVM, Ruby, .NET, Javascript, Go, Python, etc.). Moreover, it is well integrated with Spring MVC thanks to the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-spring">DiUS pact-jvm-provider-spring plugin</a>.
During the execution of the consumer tests, contracts (called pacts) are generated in JSON format. They can be shared with the provider using a service called the <a href="https://github.com/pact-foundation/pact_broker">Pact Broker</a>.</p>

<p>This is an example of a consumer test written with the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-consumer-junit">DiUS pact-jvm-consumer-junit plugin</a>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_booking_request_and_get_rejection_response</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">AddressException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RequestResponsePact</span> <span class="n">pact</span> <span class="o">=</span> <span class="n">ConsumerPactBuilder</span>
</span><span class='line'>        <span class="o">.</span><span class="na">consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">hasPactWith</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">given</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">uponReceiving</span><span class="o">(</span><span class="s">&quot;a request to book a room&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;/api/book&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;hotelId\&quot;: 1234, &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;from\&quot;: \&quot;2017-09-01\&quot;, &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;to\&quot;: \&quot;2017-09-16\&quot;&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&quot;}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willRespondWith</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{ \&quot;errors\&quot; : [ \&quot;There is no room available for this booking request.\&quot; ] }&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toPact</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">PactVerificationResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">runConsumerTest</span><span class="o">(</span><span class="n">pact</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="n">mockServer</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BookingResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">bookingClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">aBookingRequest</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getErrors</span><span class="o">()).</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;There is no room available for this booking request.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">PactVerificationResult</span><span class="o">.</span><span class="na">Ok</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>On the server side:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RestPactRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Provider</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">booking</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="nd">@Consumer</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">front</span><span class="o">-</span><span class="n">office</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="nd">@PactBroker</span><span class="o">(</span>
</span><span class='line'>        <span class="n">host</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_HOST</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">port</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PORT</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">protocol</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PROTOCOL</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
</span><span class='line'>        <span class="n">authentication</span> <span class="o">=</span> <span class="nd">@PactBrokerAuth</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_USER</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PASSWORD</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookingContractTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">BookingService</span> <span class="n">bookingService</span><span class="o">;</span>
</span><span class='line'><span class="nd">@InjectMocks</span> <span class="kd">private</span> <span class="n">BookingResource</span> <span class="n">bookingResource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@TestTarget</span> <span class="kd">public</span> <span class="kd">final</span> <span class="n">MockMvcTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MockMvcTarget</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MessagingException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">target</span><span class="o">.</span><span class="na">setControllers</span><span class="o">(</span><span class="n">bookingResource</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@State</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_no_vacancy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">bookingService</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="n">eq</span><span class="o">(</span><span class="mi">1234L</span><span class="o">),</span> <span class="n">any</span><span class="o">(),</span> <span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">BookingResult</span><span class="o">.</span><span class="na">NO_VACANCY</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>End to End Tests</h3>

<p>End to end tests need the whole platform to be up and running to run entire business use cases across multiple microservices. They are very expensive and slow to run. These tests can be performed manually on a dedicated platform but have to be chosen with great care to maximize their benefits.</p>

<h2>To Sum up</h2>

<p><img class="center" src="/images/microservices_testing_strategy.png"></p>

<h2>Conclusion</h2>

<p>Automatic tests are very important in the software development industry. A good testing strategy can help to write more relevant, robust and maintainable tests. This article describes an example of strategy to test Java Spring Boot microservices.</p>

<hr />

<p><em>This article has been written in collaboration with Nadia Humbert-Labeaumaz (<a href="https://www.twitter.com/nphumbert">@nphumbert</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling the Time in Java]]></title>
    <link href="https://rnowif.github.io/blog/2017/07/21/controlling-time-in-java/"/>
    <updated>2017-07-21T01:06:15+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/07/21/controlling-time-in-java</id>
    <content type="html"><![CDATA[<p>Time is a tricky thing, it&rsquo;s always changing. Having such moving parts into the codebase can be very annoying when testing, for instance. In this article, we will see how to control the time in Java.</p>

<!-- more -->


<p>Let&rsquo;s take a simple example of a pizza delivery service. Its policy is that pizzas should be delivered in 10 minutes. When the customer ask for a delivery, the delivery time is automatically calculated by the system based on this policy.</p>

<pre><code class="java">public class DeliveryPolicy {
  public Delivery createDelivery(Pizza pizza) {
    LocalDateTime deliveryTime = LocalDateTime.now().plus(10, ChronoUnit.MINUTES);

    return new Delivery(pizza, deliveryTime);
  }
}
</code></pre>

<h2>How Do we Test it?</h2>

<p>Since the time always changes we cannot test this method very precisely without changing its code. We could test that the delivery time is <em>approximatively</em> 10 minutes in the future but like all fuzzy tests, it could fail from time to time depending on the context on which it is executed.</p>

<h2>Make Dependency Visible</h2>

<p>The reason why this code is so difficult to test is that it has a hidden dependency: the clock. Since Java 8, all <code>now</code> methods of the Date API take a clock as an argument. We can then make this dependency visible.</p>

<pre><code class="java">public class DeliveryPolicy {

  private final Clock clock;

  public DeliveryPolicy() {
    this.clock = Clock.systemDefaultZone();
  }

  public Delivery createDelivery(Pizza pizza) {
    LocalDateTime deliveryTime = LocalDateTime.now(clock).plus(10, ChronoUnit.MINUTES);

    return new Delivery(pizza, deliveryTime);
  }
}
</code></pre>

<h2>Dependency Injection to the Rescue</h2>

<p>Now that the dependency is out there, we can inject it in the constructor, like any other dependency, and testing this method becomes trivial.</p>

<pre><code class="java">public class DeliveryPolicy {

  private final Clock clock;

  public DeliveryPolicy(ClockProvider clockProvider) {
    this.clock = clockProvider.get();
  }

  public Delivery createDelivery(Pizza pizza) {
    LocalDateTime deliveryTime = LocalDateTime.now(clock).plus(10, ChronoUnit.MINUTES);

    return new Delivery(pizza, deliveryTime);
  }
}
</code></pre>

<pre><code class="java">public class DeliveryPolicyTest {

  @Test
  public void should_schedule_delivery_ten_minutes_later() {
    ZonedDateTime now = ZonedDateTime.of(LocalDateTime.of(2017, 7, 18, 0, 0, 0), ZoneId.of("+01"));
    DeliveryPolicy policy = new DeliveryPolicy(() -&gt; Clock.fixed(now.toInstant(), now.getZone()));

    Delivery delivery = policy.createDelivery(new Pizza());

    LocalDateTime tenMinutesLater = LocalDateTime.of(2017, 7, 18, 0, 10, 0);
    assertThat(delivery.getDeliveryTime()).isEqualTo(tenMinutesLater);
  }
}
</code></pre>

<h2>Usage with Spring Framework and Spring Boot</h2>

<p>If you use Spring Framework in your application, you can create a <code>ClockProvider</code> bean that will give the default Clock. Moreover, if you use Spring Boot, it allows you to mock this bean very easily in integration tests with the <code>@MockBean</code> annotation.</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class DeliveryPolicyIT {

  @MockBean
  private ClockProvider clockProvider;

  @Autowired
  private DeliveryPolicy policy;

  @Test
  public void should_schedule_delivery_ten_minutes_later() {
    ZonedDateTime now = ZonedDateTime.of(LocalDateTime.of(2017, 7, 18, 0, 0, 0), ZoneId.of("+01"));
    Mockito.when(clockProvider.get()).thenReturn(Clock.fixed(now.toInstant(), now.getZone()));

    Delivery delivery = policy.createDelivery(new Pizza());

    LocalDateTime tenMinutesLater = LocalDateTime.of(2017, 7, 18, 0, 10, 0);
    assertThat(delivery.getDeliveryTime()).isEqualTo(tenMinutesLater);
  }
}
</code></pre>

<pre><code class="java">@Configuration
public class ClockConfig {

  @Bean
  public ClockProvider clockProvider() {
    return () -&gt; Clock.systemDefaultZone();
  }
}
</code></pre>

<h2>Conclusion</h2>

<p>I used to think that the time, like random, was a very difficult thing to test. With the Java 8 Date API, it becomes trivial. You just have to acknowledge the dependency you have on the clock and treat it like any other dependency. Now, I almost never use a method of the Date API without passing a clock as a parameter. This allows me to control the time throughout the application very easily (in unit, integration or functional tests).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests plus robustes au changement]]></title>
    <link href="https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement/"/>
    <updated>2016-11-03T05:31:42+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement</id>
    <content type="html"><![CDATA[<p>Un des principaux freins à l'écriture de tests est quand ceux-ci doivent être mis à jour à chaque fois qu'une classe ou qu'une méthode est modifiée. Parfois, les tests à mettre à jour n'ont rien à voir avec la classe ou la méthode modifiée, mais comme ils s'en servent, ils s'en retrouvent affectés eux aussi. Ce problème survient quand le test est trop couplé à l'implémentation.
Dans cet article, nous allons voir comment découpler les tests des classes qu'ils utilisent et ainsi les rendre plus robustes.</p>

<!-- more -->


<h2>Méthode 0 : La méthode naïve</h2>

<p>Soit une classe qui doit tester si une personne a accès à une ressource ou non. L'API de la classe <code>Person</code> est maintenue par une autre équipe et est donc hors de contrôle.
La façon la plus naïve d'écrire le test pourrait être la suivante :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = new Person();
  kid.setAge(17);

  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}
</code></pre>

<p>Si l'API de la classe <code>Person</code> évolue et prend l'âge directement en paramètre du constructeur, ce test ne compilera plus et devra être réécrit, ainsi que tous les autres tests qui instancient directement une <code>Person</code>.</p>

<h2>Méthode 1 : Utilisation d'une méthode de création</h2>

<p>La première solution serait d'utiliser une méthode de création partagée par tous les tests de la classe :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = newPerson(17);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

private Person newPerson(int age) {
  Person person = new Person();
  person.setAge(17);
  return person;
}
</code></pre>

<p>Ici, si l'API de <code>Person</code> change, seule la méthode est affectée. Tous les tests passeront sans difficulté une fois cette méthode modifiée.</p>

<p>Maintenant, la politique d'autorisation évolue pour refuser les mineurs, mais également les garçons (même majeurs). Le test devient alors :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = newPerson(17, Gender.FEMALE);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

@Test
public void should_deny_access_when_male_and_overaged() {
  Person maleAdult = newPerson(18, Gender.MALE);
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(maleAdult);

  assertThat(authorization, is(Authorization.DENY));
}

private Person newPerson(int age, Gender gender) {
  Person person = new Person();
  person.setAge(age);
  person.setGender(gender);
  return person;
}
</code></pre>

<p>On remarque que le premier test a été modifié, bien que le sexe de la personne ne soit pas pertinent dans ce cas. Le code du premier test est donc moins expressif sur la règle métier testée. Si on augmente le nombre de paramètres dans la méthode <code>newPerson</code> l'expressivité et la robustesse des tests décroit de plus en plus. De plus, la méthode <code>newPerson</code> n'est pas directement réutilisable dans les autres classes de test.</p>

<h2>Méthode 2 : Utilisation d'un builder</h2>

<p>Cette méthode consiste à utiliser un <code>Builder</code> pour permettre de construire une instance de <code>Person</code> personnalisable à la demande.</p>

<p>Il suffit de créer une classe <code>PersonBuilder</code> :</p>

<pre><code class="java">
public class PersonBuilder {

  private int age;
  private Gender gender = Gender.FEMALE;

  public static PersonBuilder aPerson() {
    return new PersonBuilder();
  }

  public PersonBuilder withAge(int age) {
    this.age = age;
    return this;
  }

  public PersonBuilder withGender(Gender gender) {
    this.gender = gender;
    return this;
  }

  public Person build() {
    Person person = new Person();
    person.setAge(age);
    person.setGender(gender);
    return person;
  }
}
</code></pre>

<p>Les tests deviennent alors :</p>

<pre><code class="java">@Test
public void should_deny_access_when_underaged() {
  Person kid = aPerson().withAge(17).build();
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(kid);

  assertThat(authorization, is(Authorization.DENY));
}

@Test
public void should_deny_access_when_male_and_overaged() {
  Person maleAdult = aPerson().withAge(18).withGender(Gender.MALE).build();
  AuthorizationPolicy policy = new AuthorizationPolicy();

  Authorization authorization = policy.authorize(maleAdult);

  assertThat(authorization, is(Authorization.DENY));
}
</code></pre>

<p>Désormais, les tests sont bien plus clairs sur leur intention car seuls les attributs nécessaires sont spécifiés. Les autres peuvent être <code>null</code> ou avoir des valeurs par défaut (ici, le sexe est féminin par défaut par exemple). De plus, la logique d'instanciation d'une <code>Person</code> est située à un seul endroit dans les tests et seul le builder serait affecté si l'API venait à changer.</p>

<h2>Conclusion</h2>

<p>Les méthodes décrites dans cet article permettent de découpler les tests des logiques d'instanciation des objets nécessaires. Elles sont particulièrement utiles lors de l'utilisation d'API tierces qui ne sont pas toujours très stables ni très bien conçues. Grâce à elles, les tests sont plus expressifs, plus robustes et plus concis.</p>
]]></content>
  </entry>
  
</feed>
