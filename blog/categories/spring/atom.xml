<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2016-11-18T17:07:19+01:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[renaud.humbert-labeaumaz@zenika.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quoi De Neuf Dans Spring 5]]></title>
    <link href="https://rnowif.github.io/blog/2016/07/30/quoi-de-neuf-dans-spring-5/"/>
    <updated>2016-07-30T14:05:38+02:00</updated>
    <id>https://rnowif.github.io/blog/2016/07/30/quoi-de-neuf-dans-spring-5</id>
    <content type="html"><![CDATA[<p>Juergen Hoeller a annoncé hier <a href="https://spring.io/blog/2016/07/28/spring-framework-5-0-m1-released">la sortie de Spring 5.0 M1</a>. Cette nouvelle version majeure de Spring arrive avec son lot de nouveautés.
L'objectif de cet article est de découvrir ces nouveautés et ce qu'elles peuvent apporter aux développeurs Spring. Les nouveautés décrites dans cet article sont déjà disponibles dans la version 5.0.M1.</p>

<!-- more -->


<h2>Modification des prérequis</h2>

<p>Spring 5 étant une version majeure, l'équipe s'est permise de modifier les pré-requis et d'abandonner le support pour des librairies obsolètes. A noter que la version 4.3 est supportée jusqu'en 2020 environ pour ceux qui ne pourraient pas mettre à jour leur application.</p>

<h3>Java 8 et Java 9</h3>

<p>Le changement principal au niveau des prérequis est la réécriture partielle de Spring en Java 8. De fait, il n'est pas possible d'utiliser Spring 5 avec une version antérieure de Java. Ce changement a ravi les développeurs Spring, comme on peut s'en douter (Spring 4.3 était en effet développé pour être compatible avec Java 6 !).</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Current status: working in the <a href="https://twitter.com/springframework">@springframework</a> codebase with Java8 - I so much feel like a kid in a candy store right now!</p>&mdash; Stéphane Nicoll (@snicoll) <a href="https://twitter.com/snicoll/status/750332049492500480">July 5, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Le passage à Java 8 a permis d'ajouter des méthodes par défaut à certaines interfaces centrales de Spring. Par exemple, l'interface <code>BeanPostProcessor</code>, qui permet de pouvoir modifier un bean après son instanciation, voit ses deux méthodes retourner le bean initial par défaut. Il est ainsi possible d'implémenter seulement <code>postProcessBeforeInitialization</code>, qui modifie le bean avant l'appel de la méthode <code>@PostConstruct</code>, ou bien seulement <code>postProcessAfterInitialization</code>, qui modifie le bean après l’appel de la méthode <code>@PostConstruct</code>.</p>

<pre><code class="java">public interface BeanPostProcessor {
  default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
    return bean;
  }
  default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
    return bean;
  }
}
</code></pre>

<p>De plus, Java 8 a aussi introduit les lambdas, qui sont désormais utilisées dans les API Spring, comme par exemple le message d'erreur des méthodes de la classe <code>org.springframework.util.Assert</code> qui peut être évalué de manière <em>lazy</em> grâce à un <code>Supplier</code>.</p>

<pre><code class="java">Assert.isTrue(contextPath.startsWith("/"), () -&gt; "contextPath '" + contextPath + "' must start with '/'.");
</code></pre>

<p>Pour le moment, Java 8 est utilisé avec parcimonie mais nul doute que son usage va se généraliser dans les mois à venir pour améliorer l'expérience développeur des utilisateurs de Spring.</p>

<h4>Java 7</h4>

<p>Comme dit ci-dessus, Spring était compatible avec Java 6 jusqu'à la version 4, le passage à Java 8 a donc également permis de mettre à jour la base de code pour utiliser les fonctionnalités Java 7 (qui sont principalement des sucres syntaxiques) comme par exemple l'opérateur diamant, le <em>multicatch</em>, le <em>try-with-resources</em> ou l'utilisation de <code>StandardCharsets</code> au lieu de <code>String</code> pour définir les encodages.</p>

<h4>Java 9</h4>

<p>Finalement, Spring 5 continue de suivre les avancées de Java 9 pour rester le plus à jour possible dans son support. Par exemple, en Java 9, la méthode <code>Class.newInstance()</code> est dépréciée au profit de <code>Constructor.newInstance()</code> qui retourne une exception <code>InvocationTargetException</code> au lieu de propager l'exception utilisateur. Les classes Spring qui doivent instancier des beans arbitraires devront donc utiliser la nouvelle façon de faire.</p>

<h3>JPA 2.1 et Hibernate 5</h3>

<p>JPA 2.1 a presque 4 ans. Spring 5 essaie d'éviter les compromis avec la compatibilité et a donc établi JPA 2.1 comme prérequis. De fait, Hibernate 5 est obligatoire.</p>

<h3>Abandon du support</h3>

<p>Dans la même logique d'alléger le support pour des librairies obsolètes ou pas à jour, Spring 5 abandonne le support pour de nombreuses librairies dont PortletMVC, JDO, Guava caching, JasperReports, OpenJPA, Tiles 2, XMLBeans, Velocity.</p>

<h2>Programmation réactive</h2>

<p>La programmation réactive a le vent en poupe en ce moment et Spring 5 n'échappe pas à la règle. Le projet Spring Reactive a été mergé dans Spring Framework et permet désormais d'utiliser ses capacités dans Spring. De fait, Spring 5 permet désormais de sérialiser et désérialiser en XML (JAXB) et en Json (Jackson) de manière réactive et fournit un framework web et un <code>WebClient</code> réactifs.</p>

<p>Le framework Spring Web Reactive et le bien connu Spring Web MVC ne partagent pas de code car le paradigme de programmation est fondamentalement différent. Cependant, l'API est très proche, pour une plus grande cohérence et une prise en main plus rapide pour les utilisateurs de ce framework.</p>

<p>Voici par exemple à quoi ressemble un controller qui stream des données depuis un serveur de manière non bloquante et réactive.</p>

<pre><code class="java">@GetMapping("/accounts/{id}/alerts")
public Flux&lt;Alert&gt; getAccountAlerts(@PathVariable Long id) {

  return this.repository.getAccount(id)
      .flatMap(account -&gt;
          this.webClient
              .perform(get("/alerts/{key}", account.getKey()))
              .extract(bodyStream(Alert.class)));
}
</code></pre>

<p>Pour en savoir plus sur la programmation réactive avec Spring, se référer aux billets de blog <a href="https://spring.io/blog/2016/07/28/reactive-programming-with-spring-5-0-m1">Reactive Programming with Spring 5.0 M1</a> et <a href="https://spring.io/blog/2016/04/19/understanding-reactive-types">Understanding Reactive types</a>.</p>

<p>Pour information, un starter <em>Reactive Web</em> a été ajouté au <a href="http://start.spring.io">starter Spring Boot</a> en version 1.4+ de Spring Boot. Plus d'informations <a href="https://github.com/bclozel/spring-boot-web-reactive">ici</a>.</p>

<h2>Tests</h2>

<p>Finalement, Spring 5 a ajouté le support de JUnit 5, notamment grâce à l'ajout d'une <a href="http://junit.org/junit5/docs/current/user-guide/#extensions">extension</a> Spring, à utiliser avec <code>@ExtendWith(SpringExtension.class)</code> ou alors <code>@SpringJUnitConfig</code> qui combine <code>@ExtendWith(SpringExtension.class)</code> et <code>@ContextConfiguration</code>.</p>

<h2>Conclusion</h2>

<p>Spring 5 est une version majeure de Spring et l'équipe de développement en a profité pour faire un grand ménage dans les dépendances et les librairies supportées. Cette version permet de profiter pleinement des nouvelles fonctionnalités de Java sans la frustration parfois apportée par la rétro-compatibilité. De plus, la fusion de Spring Reactive dans le framework offre aux développeurs un outil extrêmement puissant pour tirer bénéfice de la programmation réactive avec Spring.</p>

<p>Pour information, la version RELEASE est prévue pour mars 2017.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiples Vues JSON Avec @JsonView]]></title>
    <link href="https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview/"/>
    <updated>2015-04-14T22:05:31+02:00</updated>
    <id>https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview</id>
    <content type="html"><![CDATA[<p>Le format <a href="http://fr.wikipedia.org/wiki/JavaScript_Object_Notation">Json</a> est de plus en plus utilisé aujourd'hui notamment dans les API de type REST qui offrent des services et retournent leurs résultats sous ce format. Afin d'éviter d'avoir à écrire la transformation en Json manuellement, il existe de nombreuses librairies permettant de faire cette transformation de manière automatique.</p>

<p>Dans cet article, nous allons voir comment utiliser la librairie <a href="http://jackson.codehaus.org/">Jackson</a> et notamment l'annotation <code>@JsonView</code> pour configurer plusieurs transformations pour un même objet. Nous allons également voir succintement comment intégrer cette annotation avec le framework <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html">Spring MVC</a>.</p>

<!-- more -->


<h2>Convertir un objet en Json avec Jackson</h2>

<p>Le code suivant permet d'utiliser Jackson pour convertir un objet Java en Json de manière automatique.</p>

<pre><code class="java">public String toJson(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper.writeValueAsString(foo);
}
</code></pre>

<h2>Introduction à @JsonView</h2>

<p>Lorsque Jackson convertit l'objet en Json, il prend en compte tous les champs de cet objet. Or, dans la vie courante, il est rarement pertinent de récupérer tous les champs dans le Json final (par exemple, le mot de passe d'un utilisateur) et il est souvent intéressant d'avoir deux sorties différentes en fonction du contexte (par exemple, un Json résumé et un détaillé avec plus de champs).</p>

<p>L'annotation <code>@JsonView</code> permet de définir des vues et associer chaque champ à une ou plusieurs vues. Ainsi, au moment de la conversion, on indique à Jackson quelle vue utiliser et seuls les champs associés à cette vue seront pris en compte.</p>

<h3>Mise en place des vues</h3>

<p>La vue Json doit être une classe, ainsi elle peut bénéficier de l'héritage. Si la vue A hérite de la vue B, tous les champs associés à la vue B seront pris en compte lorsqu'on va exporter la vue A.</p>

<p>Les vues peuvent être définies de la façon suivante.</p>

<pre><code class="java">public class JsonViews {

    public static class PublicView { };
    public static class InternalOnlyView extends PublicView { };

}
</code></pre>

<p>Il n'y a pas besoin de mettre quoi que ce soit dans les classes, une simple déclaration suffit. C'est pourquoi il est plus simple de les regrouper dans une classe. On remarque ici l'héritage qui permet d'indiquer que tout ce qui est public sera visible également dans la vue interne.</p>

<h3>Association d'une vue à un champ</h3>

<p>Pour associer une vue à un champ, il faut l'annoter avec <code>@JsonView</code> avec la vue en paramètre.</p>

<pre><code class="java">public class Foo {

    @JsonView(JsonViews.PublicView.class)
    private String name;

    @JsonView(JsonViews.InternalOnlyView.class)
    private String password;
}
</code></pre>

<p>Ensuite, pour indiquer à Jackson d'exporter seulement cette vue, il faut lui passer en paramètre au moment de la conversion.</p>

<pre><code class="java">public String toJsonPublic(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper
        .writerWithView(JsonViews.PublicView.class)
        .writeValueAsString(foo);
}
</code></pre>

<p><em>NB : Il est possible de définir plusieurs vues pour un champ en les mettant entre crochets <code>@JsonView({View1.class, View2.class})</code>. Ainsi, ce champ sera pris en compte dans chacune des vues</em></p>

<h2>Intégration avec Spring MVC</h2>

<p>Dans un controller Spring MVC, il n'est pas utile d'utiliser le code de conversion écrit précédemment. En effet, Jackson est intégré avec Spring MVC. Il suffit d'annoter la méthode du controller avec <code>@JsonView</code> pour lui indiquer la vue à utiliser.</p>

<pre><code class="java">@RestController
public class FooController {

    @JsonView(JsonViews.PublicView.class)
    @RequestMapping (value = "/public/foo", method = RequestMethod.GET)
    public Foo getFoo() {
        return new Foo("name", "password");
    }
}
</code></pre>

<p>Un appel à <code>/public/foo</code> va automatiquement retourner un objet Json qui représente la vue publique de l'objet instancié dans la méthode.</p>

<h2>Conclusion</h2>

<p><code>@JsonView</code> est un outil très simple et très puissant qui permet d'avoir plusieurs représentations du même objet sans avoir à écrire de code autre que quelques annotations. De plus, son intégration avec Spring MVC le rend très peu intrusif et ne pollue pas le code avec des opérations de conversion.</p>
]]></content>
  </entry>
  
</feed>
