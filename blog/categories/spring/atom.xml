<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spring | Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-09-19T12:35:50+02:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Java Spring Boot Microservices]]></title>
    <link href="https://rnowif.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/"/>
    <updated>2017-09-17T16:09:24+02:00</updated>
    <id>https://rnowif.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices</id>
    <content type="html"><![CDATA[<p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. It is crucial to understand the role of each type of tests in order to leverage their potential.</p>

<p>The goal of this article is to describe a strategy to use them in order to test Java Spring Boot microservices. For every type of tests, we will try to explain its role, its scope as well as tooling we like to use.</p>

<!-- more -->


<h2>Anatomy of a Microservice</h2>

<p>First of all, we will setup a common vocabulary to make this article as clear as possible. A standard microservice is composed of:</p>

<ul>
<li><strong>Resources</strong>: HTTP controllers or AMQP listeners that will serve as the entry point of the microservice.</li>
<li><strong>Services / domain</strong>: Classes that will contain the business logic.</li>
<li><strong>Repositories</strong>: Classes that will expose an API to access a storage (like a database for instance).</li>
<li><strong>Clients</strong>: HTTP clients or AMQP producers that will communicate with external resources.</li>
<li><strong>Gateways</strong>: Classes that will serve as interfaces between domain services and clients by handling HTTP or AMQP related tasks and providing a clean API to the domain.</li>
</ul>


<h2>Types of Tests</h2>

<h3>Unit Tests</h3>

<p>Unit tests allow to test a unit (generally a method) in isolation. They are very cost-effective: easy to setup and very fast. Thus, they can give a very fast feedback about the state of the application to quickly spot bugs or regressions. It is then advised to test every edge cases and relevant combinations with unit tests.
As a bonus, they can validate a design: if the code is really difficult to test, the design is probably bad.</p>

<p>In a microservice, like in any other codebase, it is crucial to unit test domain / service classes and every other classes that contain logic.</p>

<p>The tooling we prefer to write unit tests is <a href="http://junit.org/junit5/">Junit</a> (to run the tests), <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> (to write assertions) and <a href="http://site.mockito.org/">Mockito</a> (to mock external dependencies).</p>

<h3>Integration Tests</h3>

<p>Integration tests are used to test the correct integration of the different bricks of the application. They are sometimes hard to setup and have to be carefully chosen. The idea is not to test all possible interactions but to choose relevant ones. The feedback of these tests is less fast than with unit tests because they are slower to execute. It is important to note that writing too many integration tests for the same interaction can be counter-productive. Indeed, the build time will be increased without any added value.</p>

<p>In a microservice, integration tests can be written for:</p>

<ul>
<li>Repositories when the query is more complex than just a <code>findById</code>.</li>
<li>Services in case of doubt on the interaction between the service and the respository (JPA or transaction issues for instance).</li>
<li>HTTP clients.</li>
<li>Gateways.</li>
</ul>


<p>Spring Boot provides a very good tooling to write integration tests. A typical integration test with Spring Boot looks like this:</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class UserGatewayIntTest {

    @Autowired
    private UserGateway userGateway;

    // ...
}
</code></pre>

<p>The test must use the <code>SpringRunner</code> and be annotated with <code>@SpringBootTest</code>. It is then possible to inject a bean using <code>@Autowired</code> and to mock one using <code>@MockBean</code>.
In an integration test, the database should be embedded (H2 database is a good candidate) in order for the tests to be executable anywhere. For the same reason, external HTTP resources can be mocked using <a href="http://wiremock.org/">WireMock</a> and SMTP server with <a href="https://github.com/voodoodyne/subethasmtp">SubEthatSMTP</a>.</p>

<p>In order to be able to mock external microservices, the port must be fixed. In production, microservices will register themselves to a registry and an URL will be dynamically assigned to them. If <a href="https://github.com/Netflix/ribbon">Ribbon</a> is used with Spring Cloud, it is possible to fix the URL in tests, by adding a property to the test <code>application.yml</code> (here, the external microservice name is <code>user</code>):</p>

<pre><code class="yml">user:
  ribbon:
    listOfServers: localhost:9999
</code></pre>

<h3>Component Tests</h3>

<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>In the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to setup because the already existing external API of the microservice can often be used directly without the need to setup additional things (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>Component tests should be concise and easy to understand (see <a href="https://blog.crafties.fr/2017/09/16/how-to-write-robust-component-tests/">How to Write Robust Component Tests</a>). The goal is to test the behaviour of the microservice by writing a nominal case and very few edge cases. We noticed that writing the specification before implementing the feature can lead to very simple component tests. Moreover, it is a good practice to write the component tests in collaboration with the different stakeholders in order to cover the feature in a very efficient way.</p>

<p>In component tests, an embedded database can also be used. Moreover, it is possible to mock HTTP and AMQP clients: this is not the place to test the integration with external resources (see <a href="https://blog.crafties.fr/2017/07/23/setup-a-circuit-breaker-with-hystrix/">Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</a>).</p>

<p>An example of tools we can use to write component tests is <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> (to write the specifications) with <a href="https://cucumber.io/">Cucumber</a> (to run the tests).</p>

<p>In order to perform requests on the HTTP API of the microservice and make assertions on the response, <a href="https://blog.crafties.fr/2015/10/31/testing-spring-mvc-controllers/">MockMvc</a> can be used.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ResultActions</span> <span class="n">actions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I get \&quot;([^\&quot;]*)\&quot; on the application$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetOnTheApplication</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">uri</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^I get a Response with the status code (\\d+)$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetAResponseWithTheStatusCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">statusCode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="n">statusCode</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In order to inject AMQP messages, the channel used by Spring Cloud Stream can also be injected directly into the test.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// AMQP listener code</span>
</span><span class='line'><span class="nd">@EnableBinding</span><span class="o">(</span><span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStream</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@StreamListener</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleRevision</span><span class="o">(</span><span class="n">Message</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">MyMessageDTO</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// handle message</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Process</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Input</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span> <span class="n">SubscribableChannel</span> <span class="nf">process</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Cucumber step definition</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span> <span class="n">myChannel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I publish an event with the following data:$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">iPublishAnEventWithTheFollowingData</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">myChannel</span><span class="o">.</span><span class="na">process</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="n">GenericMessage</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">payload</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, it may be important to fix the time to make tests more robust (see <a href="https://blog.crafties.fr/2017/07/20/controlling-time-in-java/">Controlling the Time in Java</a>)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Autowired</span> <span class="nd">@MockBean</span> <span class="kd">private</span> <span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^The time is \&quot;([^\&quot;]*)\&quot;$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theTimeIs</span><span class="o">(</span><span class="n">String</span> <span class="n">datetime</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ZonedDateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">datetime</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">date</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Contract Tests</h3>

<p>The goal of contract tests is to automatically verify that the provider of a service and its consumers speak the same language. These tests do not aim to verify the behaviour of the components but simply their contracts. They are particularly useful for microservices since almost all their value lies in their interactions. It is crucial to guarantee that no provider breaks the contract used by its consumers.</p>

<p>The general idea is that consumers write tests that define the initial state of the provider, the request sent by the consumer and the expected response. The provider must provide a server in the required state. The contract will automatically be verified against this server. This implies the following:</p>

<ul>
<li>on the consumer side: contract tests are written using the HTTP client. Given a provider state, assertions are made on the HTTP response.</li>
<li>on the provider side: only the HTTP resource should be instanciated. All its dependencies should be mocked in order to provide the required state.</li>
</ul>


<p>It is important to note that contract tests should stick to the real needs of the consumer. If a field is not used by a consumer, it should not be tested in the contract test. Then, the provider is free to update or delete every field that is not used by any consumer and we are sure that if tests fail, it is for a good reason.</p>

<p>The tool we like to use to write and execute contract tests is <a href="https://docs.pact.io/">Pact</a>. It is a very mature product that has plugins for a lot of languages (JVM, Ruby, .NET, Javascript, Go, Python, etc.). Moreover, it is well integrated with Spring MVC thanks to the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-spring">DiUS pact-jvm-provider-spring plugin</a>.
During the execution of the consumer tests, contracts (called pacts) are generated in JSON format. They can be shared with the provider using a service called the <a href="https://github.com/pact-foundation/pact_broker">Pact Broker</a>.</p>

<p>This is an example of a consumer test written with the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-consumer-junit">DiUS pact-jvm-consumer-junit plugin</a>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_booking_request_and_get_rejection_response</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">AddressException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RequestResponsePact</span> <span class="n">pact</span> <span class="o">=</span> <span class="n">ConsumerPactBuilder</span>
</span><span class='line'>        <span class="o">.</span><span class="na">consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">hasPactWith</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">given</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">uponReceiving</span><span class="o">(</span><span class="s">&quot;a request to book a room&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;/api/book&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;hotelId\&quot;: 1234, &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;from\&quot;: \&quot;2017-09-01\&quot;, &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;\&quot;to\&quot;: \&quot;2017-09-16\&quot;&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&quot;}&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willRespondWith</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{ \&quot;errors\&quot; : [ \&quot;There is no room available for this booking request.\&quot; ] }&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toPact</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">PactVerificationResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">runConsumerTest</span><span class="o">(</span><span class="n">pact</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="n">mockServer</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BookingResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">bookingClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">aBookingRequest</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getErrors</span><span class="o">()).</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;There is no room available for this booking request.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">PactVerificationResult</span><span class="o">.</span><span class="na">Ok</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>On the server side:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RestPactRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Provider</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">booking</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="nd">@Consumer</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">front</span><span class="o">-</span><span class="n">office</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="nd">@PactBroker</span><span class="o">(</span>
</span><span class='line'>        <span class="n">host</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_HOST</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">port</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PORT</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">protocol</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PROTOCOL</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
</span><span class='line'>        <span class="n">authentication</span> <span class="o">=</span> <span class="nd">@PactBrokerAuth</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_USER</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">PACT_BROKER_PASSWORD</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookingContractTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">BookingService</span> <span class="n">bookingService</span><span class="o">;</span>
</span><span class='line'><span class="nd">@InjectMocks</span> <span class="kd">private</span> <span class="n">BookingResource</span> <span class="n">bookingResource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@TestTarget</span> <span class="kd">public</span> <span class="kd">final</span> <span class="n">MockMvcTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MockMvcTarget</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MessagingException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">target</span><span class="o">.</span><span class="na">setControllers</span><span class="o">(</span><span class="n">bookingResource</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@State</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_no_vacancy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">bookingService</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="n">eq</span><span class="o">(</span><span class="mi">1234L</span><span class="o">),</span> <span class="n">any</span><span class="o">(),</span> <span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">BookingResult</span><span class="o">.</span><span class="na">NO_VACANCY</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>End to End Tests</h3>

<p>End to end tests need the whole platform to be up and running to run entire business use cases across multiple microservices. They are very expensive and slow to run. These tests can be performed manually on a dedicated platform but have to be chosen with great care to maximize their benefits.</p>

<h2>To Sum up</h2>

<p><img class="center" src="/images/microservices_testing_strategy.png"></p>

<h2>Conclusion</h2>

<p>Automatic tests are very important in the software development industry. A good testing strategy can help to write more relevant, robust and maintainable tests. This article describes an example of strategy to test Java Spring Boot microservices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://rnowif.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T13:33:38+02:00</updated>
    <id>https://rnowif.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos")
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
@EnableCircuitBreaker
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallback = VideoClientFallback.class)
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallback implements VideoClient {

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
      // Degraded service: no suggestion to offer
      return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<pre><code class="yml">feign:
    hystrix:
        enabled: true
</code></pre>

<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallbackFactory = VideoClientFallbackFactory.class)
public interface VideoClient {

  @PostMapping(value = "/api/videos/suggest")
  List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallbackFactory implements FallbackFactory&lt;VideoClient&gt; {

    @Override
    public VideoClient create(Throwable throwable) {
        return new VideoClientFallback(throwable);
    }

}
</code></pre>

<pre><code class="java">public class VideoClientFallback implements VideoClient {

    private final Throwable cause;

    public VideoClientFallback(Throwable cause) {
      this.cause = cause;
    }

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
        if (cause instanceof FeignException &amp;&amp; ((FeignException) cause).status() == 404) {
            // Treat the HTTP 404 status
        }

        return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quoi de neuf dans Spring 5]]></title>
    <link href="https://rnowif.github.io/blog/2016/07/30/quoi-de-neuf-dans-spring-5/"/>
    <updated>2016-07-30T14:05:38+02:00</updated>
    <id>https://rnowif.github.io/blog/2016/07/30/quoi-de-neuf-dans-spring-5</id>
    <content type="html"><![CDATA[<p>Juergen Hoeller a annoncé hier <a href="https://spring.io/blog/2016/07/28/spring-framework-5-0-m1-released">la sortie de Spring 5.0 M1</a>. Cette nouvelle version majeure de Spring arrive avec son lot de nouveautés.
L'objectif de cet article est de découvrir ces nouveautés et ce qu'elles peuvent apporter aux développeurs Spring. Les nouveautés décrites dans cet article sont déjà disponibles dans la version 5.0.M1.</p>

<!-- more -->


<h2>Modification des prérequis</h2>

<p>Spring 5 étant une version majeure, l'équipe s'est permise de modifier les pré-requis et d'abandonner le support pour des librairies obsolètes. A noter que la version 4.3 est supportée jusqu'en 2020 environ pour ceux qui ne pourraient pas mettre à jour leur application.</p>

<h3>Java 8 et Java 9</h3>

<p>Le changement principal au niveau des prérequis est la réécriture partielle de Spring en Java 8. De fait, il n'est pas possible d'utiliser Spring 5 avec une version antérieure de Java. Ce changement a ravi les développeurs Spring, comme on peut s'en douter (Spring 4.3 était en effet développé pour être compatible avec Java 6 !).</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Current status: working in the <a href="https://twitter.com/springframework">@springframework</a> codebase with Java8 - I so much feel like a kid in a candy store right now!</p>&mdash; Stéphane Nicoll (@snicoll) <a href="https://twitter.com/snicoll/status/750332049492500480">July 5, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Le passage à Java 8 a permis d'ajouter des méthodes par défaut à certaines interfaces centrales de Spring. Par exemple, l'interface <code>BeanPostProcessor</code>, qui permet de pouvoir modifier un bean après son instanciation, voit ses deux méthodes retourner le bean initial par défaut. Il est ainsi possible d'implémenter seulement <code>postProcessBeforeInitialization</code>, qui modifie le bean avant l'appel de la méthode <code>@PostConstruct</code>, ou bien seulement <code>postProcessAfterInitialization</code>, qui modifie le bean après l’appel de la méthode <code>@PostConstruct</code>.</p>

<pre><code class="java">public interface BeanPostProcessor {
  default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
    return bean;
  }
  default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
    return bean;
  }
}
</code></pre>

<p>De plus, Java 8 a aussi introduit les lambdas, qui sont désormais utilisées dans les API Spring, comme par exemple le message d'erreur des méthodes de la classe <code>org.springframework.util.Assert</code> qui peut être évalué de manière <em>lazy</em> grâce à un <code>Supplier</code>.</p>

<pre><code class="java">Assert.isTrue(contextPath.startsWith("/"), () -&gt; "contextPath '" + contextPath + "' must start with '/'.");
</code></pre>

<p>Pour le moment, Java 8 est utilisé avec parcimonie mais nul doute que son usage va se généraliser dans les mois à venir pour améliorer l'expérience développeur des utilisateurs de Spring.</p>

<h4>Java 7</h4>

<p>Comme dit ci-dessus, Spring était compatible avec Java 6 jusqu'à la version 4, le passage à Java 8 a donc également permis de mettre à jour la base de code pour utiliser les fonctionnalités Java 7 (qui sont principalement des sucres syntaxiques) comme par exemple l'opérateur diamant, le <em>multicatch</em>, le <em>try-with-resources</em> ou l'utilisation de <code>StandardCharsets</code> au lieu de <code>String</code> pour définir les encodages.</p>

<h4>Java 9</h4>

<p>Finalement, Spring 5 continue de suivre les avancées de Java 9 pour rester le plus à jour possible dans son support. Par exemple, en Java 9, la méthode <code>Class.newInstance()</code> est dépréciée au profit de <code>Constructor.newInstance()</code> qui retourne une exception <code>InvocationTargetException</code> au lieu de propager l'exception utilisateur. Les classes Spring qui doivent instancier des beans arbitraires devront donc utiliser la nouvelle façon de faire.</p>

<h3>JPA 2.1 et Hibernate 5</h3>

<p>JPA 2.1 a presque 4 ans. Spring 5 essaie d'éviter les compromis avec la compatibilité et a donc établi JPA 2.1 comme prérequis. De fait, Hibernate 5 est obligatoire.</p>

<h3>Abandon du support</h3>

<p>Dans la même logique d'alléger le support pour des librairies obsolètes ou pas à jour, Spring 5 abandonne le support pour de nombreuses librairies dont PortletMVC, JDO, Guava caching, JasperReports, OpenJPA, Tiles 2, XMLBeans, Velocity.</p>

<h2>Programmation réactive</h2>

<p>La programmation réactive a le vent en poupe en ce moment et Spring 5 n'échappe pas à la règle. Le projet Spring Reactive a été mergé dans Spring Framework et permet désormais d'utiliser ses capacités dans Spring. De fait, Spring 5 permet désormais de sérialiser et désérialiser en XML (JAXB) et en Json (Jackson) de manière réactive et fournit un framework web et un <code>WebClient</code> réactifs.</p>

<p>Le framework Spring Web Reactive et le bien connu Spring Web MVC ne partagent pas de code car le paradigme de programmation est fondamentalement différent. Cependant, l'API est très proche, pour une plus grande cohérence et une prise en main plus rapide pour les utilisateurs de ce framework.</p>

<p>Voici par exemple à quoi ressemble un controller qui stream des données depuis un serveur de manière non bloquante et réactive.</p>

<pre><code class="java">@GetMapping("/accounts/{id}/alerts")
public Flux&lt;Alert&gt; getAccountAlerts(@PathVariable Long id) {

  return this.repository.getAccount(id)
      .flatMap(account -&gt;
          this.webClient
              .perform(get("/alerts/{key}", account.getKey()))
              .extract(bodyStream(Alert.class)));
}
</code></pre>

<p>Pour en savoir plus sur la programmation réactive avec Spring, se référer aux billets de blog <a href="https://spring.io/blog/2016/07/28/reactive-programming-with-spring-5-0-m1">Reactive Programming with Spring 5.0 M1</a> et <a href="https://spring.io/blog/2016/04/19/understanding-reactive-types">Understanding Reactive types</a>.</p>

<p>Pour information, un starter <em>Reactive Web</em> a été ajouté au <a href="http://start.spring.io">starter Spring Boot</a> en version 1.4+ de Spring Boot. Plus d'informations <a href="https://github.com/bclozel/spring-boot-web-reactive">ici</a>.</p>

<h2>Tests</h2>

<p>Finalement, Spring 5 a ajouté le support de JUnit 5, notamment grâce à l'ajout d'une <a href="http://junit.org/junit5/docs/current/user-guide/#extensions">extension</a> Spring, à utiliser avec <code>@ExtendWith(SpringExtension.class)</code> ou alors <code>@SpringJUnitConfig</code> qui combine <code>@ExtendWith(SpringExtension.class)</code> et <code>@ContextConfiguration</code>.</p>

<h2>Conclusion</h2>

<p>Spring 5 est une version majeure de Spring et l'équipe de développement en a profité pour faire un grand ménage dans les dépendances et les librairies supportées. Cette version permet de profiter pleinement des nouvelles fonctionnalités de Java sans la frustration parfois apportée par la rétro-compatibilité. De plus, la fusion de Spring Reactive dans le framework offre aux développeurs un outil extrêmement puissant pour tirer bénéfice de la programmation réactive avec Spring.</p>

<p>Pour information, la version RELEASE est prévue pour mars 2017.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiples vues JSON avec @JsonView]]></title>
    <link href="https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview/"/>
    <updated>2015-04-14T22:05:31+02:00</updated>
    <id>https://rnowif.github.io/blog/2015/04/14/multiples-vues-json-avec-at-jsonview</id>
    <content type="html"><![CDATA[<p>Le format <a href="http://fr.wikipedia.org/wiki/JavaScript_Object_Notation">Json</a> est de plus en plus utilisé aujourd'hui notamment dans les API de type REST qui offrent des services et retournent leurs résultats sous ce format. Afin d'éviter d'avoir à écrire la transformation en Json manuellement, il existe de nombreuses librairies permettant de faire cette transformation de manière automatique.</p>

<p>Dans cet article, nous allons voir comment utiliser la librairie <a href="http://jackson.codehaus.org/">Jackson</a> et notamment l'annotation <code>@JsonView</code> pour configurer plusieurs transformations pour un même objet. Nous allons également voir succintement comment intégrer cette annotation avec le framework <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html">Spring MVC</a>.</p>

<!-- more -->


<h2>Convertir un objet en Json avec Jackson</h2>

<p>Le code suivant permet d'utiliser Jackson pour convertir un objet Java en Json de manière automatique.</p>

<pre><code class="java">public String toJson(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper.writeValueAsString(foo);
}
</code></pre>

<h2>Introduction à @JsonView</h2>

<p>Lorsque Jackson convertit l'objet en Json, il prend en compte tous les champs de cet objet. Or, dans la vie courante, il est rarement pertinent de récupérer tous les champs dans le Json final (par exemple, le mot de passe d'un utilisateur) et il est souvent intéressant d'avoir deux sorties différentes en fonction du contexte (par exemple, un Json résumé et un détaillé avec plus de champs).</p>

<p>L'annotation <code>@JsonView</code> permet de définir des vues et associer chaque champ à une ou plusieurs vues. Ainsi, au moment de la conversion, on indique à Jackson quelle vue utiliser et seuls les champs associés à cette vue seront pris en compte.</p>

<h3>Mise en place des vues</h3>

<p>La vue Json doit être une classe, ainsi elle peut bénéficier de l'héritage. Si la vue A hérite de la vue B, tous les champs associés à la vue B seront pris en compte lorsqu'on va exporter la vue A.</p>

<p>Les vues peuvent être définies de la façon suivante.</p>

<pre><code class="java">public class JsonViews {

    public static class PublicView { };
    public static class InternalOnlyView extends PublicView { };

}
</code></pre>

<p>Il n'y a pas besoin de mettre quoi que ce soit dans les classes, une simple déclaration suffit. C'est pourquoi il est plus simple de les regrouper dans une classe. On remarque ici l'héritage qui permet d'indiquer que tout ce qui est public sera visible également dans la vue interne.</p>

<h3>Association d'une vue à un champ</h3>

<p>Pour associer une vue à un champ, il faut l'annoter avec <code>@JsonView</code> avec la vue en paramètre.</p>

<pre><code class="java">public class Foo {

    @JsonView(JsonViews.PublicView.class)
    private String name;

    @JsonView(JsonViews.InternalOnlyView.class)
    private String password;
}
</code></pre>

<p>Ensuite, pour indiquer à Jackson d'exporter seulement cette vue, il faut lui passer en paramètre au moment de la conversion.</p>

<pre><code class="java">public String toJsonPublic(Foo foo) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper
        .writerWithView(JsonViews.PublicView.class)
        .writeValueAsString(foo);
}
</code></pre>

<p><em>NB : Il est possible de définir plusieurs vues pour un champ en les mettant entre crochets <code>@JsonView({View1.class, View2.class})</code>. Ainsi, ce champ sera pris en compte dans chacune des vues</em></p>

<h2>Intégration avec Spring MVC</h2>

<p>Dans un controller Spring MVC, il n'est pas utile d'utiliser le code de conversion écrit précédemment. En effet, Jackson est intégré avec Spring MVC. Il suffit d'annoter la méthode du controller avec <code>@JsonView</code> pour lui indiquer la vue à utiliser.</p>

<pre><code class="java">@RestController
public class FooController {

    @JsonView(JsonViews.PublicView.class)
    @RequestMapping (value = "/public/foo", method = RequestMethod.GET)
    public Foo getFoo() {
        return new Foo("name", "password");
    }
}
</code></pre>

<p>Un appel à <code>/public/foo</code> va automatiquement retourner un objet Json qui représente la vue publique de l'objet instancié dans la méthode.</p>

<h2>Conclusion</h2>

<p><code>@JsonView</code> est un outil très simple et très puissant qui permet d'avoir plusieurs représentations du même objet sans avoir à écrire de code autre que quelques annotations. De plus, son intégration avec Spring MVC le rend très peu intrusif et ne pollue pas le code avec des opérations de conversion.</p>
]]></content>
  </entry>
  
</feed>
