{
    "version": "https://jsonfeed.org/version/1",
    "title": "A Software Gardener",
    "description": "",
    "home_page_url": "https://rnowif.github.io",
    "feed_url": "https://rnowif.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Renaud Humbert-Labeaumaz"
    },
    "items": [
        {
            "id": "https://rnowif.github.io/the-blind-golden-master.html",
            "url": "https://rnowif.github.io/the-blind-golden-master.html",
            "title": "The Blind Golden Master",
            "summary": "As part of my work, I regularly have to refactor/rewrite some part of our system that has little test coverage, if any. Most of the time, the code is too big or complex to write a test suite comprehensive enough to give me the confidence&hellip;",
            "content_html": "<p>As part of my work, I regularly have to refactor/rewrite some part of our system that has little test coverage, if any. Most of the time, the code is too big or complex to write a test suite comprehensive enough to give me the confidence I need in a timely manner. Consequently, I have come to use a characterisation test technique that I called the “Blind Golden Master”.</p>\n<!-- more -->\n\n<h2 id=\"characterisation-tests\">Characterisation Tests</h2>\n<p>If you know what a characterisation test is, you can skip this section. If not, bear with me for a moment. A characterisation test aims to check that an already existing piece of code always keeps the same behaviour throughout the changes you make. This behaviour does not need to be correct - if there is a bug in the code, these tests will check that it is still here at the end! Characterisation tests are then extremely useful during refactoring efforts since it is not necessary to understand (or even read) the code to write them.</p>\n<p>One of the most usual characterisation test techniques is the Golden Master. The idea is to exercise the code and record its output somehow (e.g. in a file). Then, the test will exercise the code with the same input and check the output against the previously recorded one - the golden master. See <a href=\"https://rnowif.github.io/blog/2017/04/10/trivia-refactoring/\">here</a> for an example of this technique.</p>\n<h2 id=\"the-blind-golden-master\">The Blind Golden Master</h2>\n<p>Sometimes, it is impractical to store the output of the code - or we simply couldn’t be bothered to do it. Sometimes, the new implementation and the legacy one have to co-exist (and evolve) for a while and the only goal is to check that they always both behave the same.</p>\n<p>With this technique, the test simply calls both the new and the legacy code and assert that their output is identical. This approach is extremely effective when the method has a limited set of parameters and no side effect.</p>\n<p>For instance, I used it to change the template engine for our codebase (C#).</p>\n<pre><code class=\"language-csharp\">string newResult = _newEngine.Render(templateName, model);\nstring legacyResult = _legacyEngine.Render(templateName, model);\nMinify(newResult).Should().BeEquivalentTo(Minify(legacyResult));</code></pre>\n<p>I also used it to change an algorithm that determine the file extension of a document (see the Java codebase <a href=\"https://github.com/rnowif/refactoring-with-tests/tree/refacto/socrates\">here</a>).</p>\n<pre><code class=\"language-java\">FileExtension legacyValue = application.getExtension(country, region);\nFileExtension newValue = application.getExtensionV2(country, region);\nassertEquals(legacyValue, newValue);</code></pre>\n<p>If the algorithm is crucial to the application and there are a lot of potential combinations to test, it is even possible to run the test in production: every time the code is called, it can invoke both the algorithms, compare their output and raise an error if they don’t match, and always return the legacy result. When there is no more error, it is time to switch to the new implementation. This <a href=\"https://github.blog/2015-12-15-move-fast/\">article</a> explains how GitHub rewrote its merge algorithm using this technique.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The Blind Golden Master is an extremely simple technique that provides confidence during refactoring without having to spend hours writing tests for the legacy code. It is a powerful enabler for improvement that does not require any specific tooling or overhead. Since I started using it a few years ago, it has proven a precious addition to my testing toolbox.</p>\n",
            "image": "https://rnowif.github.io/media/posts/1/autumn-219972_1280.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "testing",
                   "refactoring"
            ],
            "date_published": "2020-05-01T17:46:00+12:00",
            "date_modified": "2021-01-11T03:44:38+13:00"
        },
        {
            "id": "https://rnowif.github.io/aspnet-clean-architecture.html",
            "url": "https://rnowif.github.io/aspnet-clean-architecture.html",
            "title": "ASP.Net Clean Architecture",
            "summary": "When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation&hellip;",
            "content_html": "<p>When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation of the Uncle Bob’s <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">Clean Architecture</a> on an ASP.Net project. The source code of this project can be found on my <a href=\"https://github.com/rnowif/Expenses\">GitHub</a>.</p>\n<!-- more -->\n\n<p>The main idea of the clean architecture is to reduce the coupling between the core business code and the external world (Web, Database, Frameworks). In order to do that, the project can be divided in 3 main modules, that will be described below: <code>Domain</code>, <code>Web</code> and <code>Data</code>.</p>\n<h2 id=\"domain\">Domain</h2>\n<p>This module contains all the core business code. It does not depend on anything else than the .NET SDK and contains sub-modules.</p>\n<h3 id=\"entities\"><code>Entities</code></h3>\n<p>They are the building blocks of the domain and encapsulate the business concepts. Entities are not coupled with any ORM framework. Indeed the domain model can be quite different from the database model!</p>\n<h3 id=\"use-cases\"><code>Use Cases</code></h3>\n<p>Following the Uncle Bob’s definition, they contains application specific business rules and orchestrate the flow of data to and from the entities and implement higher level business rules. </p>\n<p>It is important to understand that the domain model should not leak outside of this module. In order to do that, use cases should not take entities are arguments for their methods, but a list of raw arguments. For instance, the use case that submit a new expense looks like the following:</p>\n<pre><code class=\"language-csharp\">public interface ISubmitExpense\n{\n    void Execute(Guid userId, string description, long priceWithoutTax, long priceIncludingTax);\n}</code></pre>\n<p>It is responsible to build an <code>Expense</code> object and apply the relevant business logic. </p>\n<h3 id=\"repositories\"><code>Repositories</code></h3>\n<p>In the domain module, repositories are only interfaces that are used by the use cases to access data without any knowledge of the concrete implementations: data can be retrieved from databases, files or external Web APIs, it should not affect the core business logic at all. To reinforce this, repositories take entities as arguments and return entities as well. It is the responsibility of the concrete implementation to handle conversion if needed.</p>\n<h2 id=\"data\">Data</h2>\n<p>The data module contains the database and ORM configuration and the repositories implementations. Typically, we find the EntityFramework configuration in this module as well as the annotated classes that will be mapped with database entries. Repositories implementation are responsible for converting “database objects” in domain objects:</p>\n<pre><code class=\"language-csharp\">public void Create(Expense expense)\n{\n  // Convert the domain object &quot;Expense&quot; into a database object &quot;DbExpense&quot;\n  _dbContext.Expenses.Add(DbExpense.FromExpense(expense));\n  _dbContext.SaveChanges();\n}</code></pre>\n<p>This prevents the ORM framework to leak into the domain.</p>\n<h2 id=\"web\">Web</h2>\n<p>The web module contains all the controllers. It is responsible for handling HTTP requests, converting JSON or XML payloads to objects and invoking use cases:</p>\n<pre><code class=\"language-csharp\">[HttpPost]\npublic void SubmitExpense([FromBody] SubmitExpenseCommand expense)\n{\n  // The controller just invoke the use case with data extracted from the body of the HTTP request\n  _submitExpense.Execute(expense.UserId, expense.Description, expense.PriceWithoutTax, expense.PriceIncludingTax);\n}</code></pre>\n<p>It should not contain any business logic whatsoever. As a consequence, controllers are very lightweight and easy to test.</p>\n<h2 id=\"dependency-injection\">Dependency injection</h2>\n<p>In order to achieve low coupling between the modules, interfaces are injected into the constructor of the different classes:</p>\n<pre><code class=\"language-csharp\">public class SubmitExpense : ISubmitExpense\n{\n\n    private readonly IExpenseRepository _repository;\n\n    public SubmitExpense(IExpenseRepository repository)\n    {\n      _repository = repository;\n    }\n}</code></pre>\n<p>The plumbing is handled by the <code>Startup.cs</code> class where all the implementations of the interfaces are declared:</p>\n<pre><code class=\"language-csharp\">public void ConfigureServices(IServiceCollection services)\n{\n  // ...\n\n  // Register &quot;SubmitExpense&quot; as the implementation of &quot;ISubmitExpense&quot;\n  services.AddTransient&lt;ISubmitExpense, SubmitExpense&gt;();\n  services.AddTransient&lt;IExpenseRepository, ExpenseRepository&gt;();\n}</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this architecture, the emphasis is put on the domain. Every other modules should adapt to it but it does not depend on anything. This results in lightweight classes that are very easy to understand and test in isolation.<br>Moreover, the low coupling makes it very easy to change the infrastructure. Indeed, the domain module would not change a bit if we decided to have a CLI instead of a Web App or if the data should be retrieved from an external Web API instead of a PostgreSQL database.</p>\n",
            "image": "https://rnowif.github.io/media/posts/2/architecture-3357028_1920.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "csharp",
                   "architecture"
            ],
            "date_published": "2018-10-22T10:04:00+13:00",
            "date_modified": "2021-01-11T09:22:38+13:00"
        },
        {
            "id": "https://rnowif.github.io/c-for-the-java-developer-enums.html",
            "url": "https://rnowif.github.io/c-for-the-java-developer-enums.html",
            "title": "C# for the Java Developer: Enums",
            "summary": "Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences. In Java, enums are very much like regular classes: they&hellip;",
            "content_html": "<p>Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences.</p>\n<!-- more -->\n\n<p>In Java, enums are very much like regular classes: they can implement interfaces and have methods. However, they cannot inherit other classes or be explicitly instantiated. They can be viewed as <code>final</code> classes (or <code>sealed</code> classes in C#) that already inherit the virtual “enum” class, have only private constructor(s) and a set of pre-defined instances (the values of the enum).</p>\n<p>For instance, let’s take the example of the HTTP status codes. In Java, it is possible to write this code:</p>\n<pre><code class=\"language-java\">enum HttpStatus implements Comparable&lt;HttpStatus&gt; {\n    OK(200), SERVER_ERROR(500), NOT_FOUND(404);\n\n    private final int code;\n\n    HttpStatus(int code) {\n        this.code = code;\n    }\n\n    // This is a regular instance method\n    int code() {\n        return code;\n    }\n\n    // This is the implementation of the Comparable interface\n    @Override\n    int compareTo(HttpStatus o) {\n        // Http statuses will be sorted by status code\n        return Integer.compare(code, o.code);\n    }\n}</code></pre>\n<pre><code class=\"language-java\">HttpStatus status = HttpStatus.OK;\n\n// The &#39;code&#39; method can be invoked like any other method\nint code = status.code();</code></pre>\n<p>In C#, enums are just integers in disguise. The previous snippet can be simulated in C# only because the <code>code</code> attribute happens to be an <code>int</code>. Otherwise, it would be very complex to have the same behaviour:</p>\n<pre><code class=\"language-csharp\">enum HttpStatus {\n    // int value of the enum can be forced to a specific value\n    OK = 200,\n    NOT_FOUND = 404,\n    SERVER_ERROR = 500\n}</code></pre>\n<pre><code class=\"language-csharp\">HttpStatus status = HttpStatus.OK;\n\n// The enum can be casted to an int to get its value\nint code = (int) status;</code></pre>\n<p>To sum up, Java enums are much more powerful than their C# counterparts. I often use these features when I write Java code and I think I would miss them if I had to write C# code on a daily basis.</p>\n",
            "image": "https://rnowif.github.io/media/posts/4/christopher-burns-Kj2SaNHG-hg-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java",
                   "csharp"
            ],
            "date_published": "2018-10-21T09:37:00+13:00",
            "date_modified": "2021-01-11T09:38:39+13:00"
        },
        {
            "id": "https://rnowif.github.io/c-for-the-java-developer-lambdas.html",
            "url": "https://rnowif.github.io/c-for-the-java-developer-lambdas.html",
            "title": "C# for the Java Developer: Lambdas",
            "summary": "A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be&hellip;",
            "content_html": "<p>A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be viewed as the implementation of an interface with only one method (called a <em>functional interface</em>) whereas a C# lambda can be assigned to a <code>delegate</code>, which is a concept that does not exist in Java. This article aims to explain how lambdas work in Java and C# and highlight their differences and similarities.</p>\n<!-- more -->\n\n<h2 id=\"java-functional-interfaces\">Java Functional Interfaces</h2>\n<p>In Java, a lambda can simply be viewed as an anonymous function that implements an interface with only one method. This kind of interface is called a <em>functional interface</em> and can be annotated with the <code>@FunctionalInterface</code> annotation that tells the compiler to enforce the only-one-method rule:</p>\n<pre><code class=\"language-java\">@FunctionalInterface\ninterface Printer {\n    void print(String message);\n}</code></pre>\n<pre><code class=\"language-java\">// The function interface is implemented with a lambda\nPrinter standardPrinter = message -&gt; System.out.println(message);\n\n// The print method of standardPrinter can be invoked\nstandardPrinter.print(&quot;Hello World!&quot;);</code></pre>\n<p>From the previous snippet, you should note that the way the interface is implemented makes absolutely no difference. It can be a lambda, a concrete or even an anonymous class. In any ways, you can simply invoke the <code>print</code> method of the interface.</p>\n<p>There are some pre-defined <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html\">generic functional interfaces</a> in the JDK that can be used directly off the shelf. The main ones are described below:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Method</th>\n<th>Role</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\"><code>Function&lt;T,R&gt;</code></a></td>\n<td><code>R apply(T t)</code></td>\n<td>Takes an argument of a given type T and returns an object of type R</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html\"><code>Consumer&lt;T&gt;</code></a></td>\n<td><code>void accept(T)</code></td>\n<td>Takes an argument of a given type T and does something useful (typically with side effects)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\"><code>Predicate&lt;T&gt;</code></a></td>\n<td><code>boolean test(T)</code></td>\n<td>Takes an argument of a given type T and returns a boolean (similar to <code>Function&lt;T, Boolean&gt;</code>)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html\"><code>Supplier&lt;T&gt;</code></a></td>\n<td><code>T get()</code></td>\n<td>Returns an object of type T</td>\n</tr>\n</tbody></table>\n<h2 id=\"c-delegates\">C# Delegates</h2>\n<p>In C#, a lambda can be assigned to a delegate which is a type that encapsulates a method:</p>\n<pre><code class=\"language-csharp\">delegate void Print(string message);</code></pre>\n<pre><code>// A lambda is assigned to the delegate\nPrint print = message =&gt; System.Console.WriteLine(message);\n\n// print can be directly invoked as a method\nprint(&quot;Hello World!&quot;);</code></pre><p>Like in Java, some delegates are already defined in the .NET framework, the main ones are described below:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Role</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.func-2\"><code>TResult Func&lt;in T,out TResult&gt;(T arg)</code></a></td>\n<td>Takes an argument of a given type T and returns an object of type TResult</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.action-1\"><code>void Action&lt;in T&gt;(T obj)</code></a></td>\n<td>Takes an argument of a given type T and does something useful (typically with side effects)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1\"><code>bool Predicate&lt;in T&gt;(T obj)</code></a></td>\n<td>Takes an argument of a given type T and returns a boolean (similar to <code>Func&lt;T, bool&gt;</code>)</td>\n</tr>\n</tbody></table>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>From a Java perspective, using lambdas in APIs (like Linq for instance) is pretty straightforward. However, when digging a little bit deeper, there are some subtle differences to understand. I find the Java approach simpler as it does not introduce another concept but the C# approach is cleaner because the delegate can be invoked directly like a method.</p>\n",
            "image": "https://rnowif.github.io/media/posts/3/lucas-benjamin-wQLAGv4_OYs-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java",
                   "csharp"
            ],
            "date_published": "2018-10-21T09:33:00+13:00",
            "date_modified": "2021-01-11T09:35:06+13:00"
        },
        {
            "id": "https://rnowif.github.io/c-for-the-java-developer-extension-methods.html",
            "url": "https://rnowif.github.io/c-for-the-java-developer-extension-methods.html",
            "title": "C# for the Java Developer: Extension Methods",
            "summary": "After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like Kotlin) but not&hellip;",
            "content_html": "<p>After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like <a href=\"https://kotlinlang.org/docs/reference/extensions.html\">Kotlin</a>) but not in Java, let the developer add methods to a class without touching its code (hence the name <em>extension</em> methods).</p>\n<!-- more -->\n\n<p>Let’s say you want to create a method that puts the first letter of a string in upper case and returns the new string. You cannot modify (or even inherit) the <code>String</code> class in Java to add this method. Since you don’t necessarily want to create your own custom flavour of the <code>String</code> class for your code base, you would probably create a static function that takes a <code>String</code> as an argument and return another <code>String</code>:</p>\n<pre><code class=\"language-java\">class StringExtensions {\n    static String capitalize(String word) {\n        return Character.toUpperCase(word.charAt(0)) + word.substring(1);\n    }\n}</code></pre>\n<p>Now, you can simply invoke this function like this:</p>\n<pre><code class=\"language-java\">String word = &quot;hello&quot;;\nString capitalizedWord = StringExtensions.capitalize(word);</code></pre>\n<p>Of course, creating a static method is also possible in C#. However, C# has a feature that allows to add new methods to a class without having to modify its code. This feature is called <em>extension methods</em>. In order to create an extension method, you have to create a top-level static class and implement a static method. The first argument of this method specifies the type that the method operates on and should have the <code>this</code> modifier:</p>\n<pre><code class=\"language-csharp\">static class StringExtensions \n{\n  static string Capitalize(this String word)\n  {\n      // Note that this cannot access any private data in the String class. \n      return char.ToUpper(word[0]) + word.Substring(1);\n  }\n}</code></pre>\n<p>In order to use it, the namespace that contains the class must be specified with a <code>using</code> directive. Afterwards, the method can be invoked as if it was an instance method of the type:</p>\n<pre><code class=\"language-csharp\">string word = &quot;hello&quot;;\nstring capitalizedWord = word.Capitalize();</code></pre>\n<p>Extension methods are very powerful. Beside the fact that the code looks “cleaner”, it is also possible to seamlessly plug new behaviours in existing types by simply importing a namespace. The extension code can be in separate specific modules that can be imported only when needed. </p>\n",
            "image": "https://rnowif.github.io/media/posts/6/jeeray-tang-eY2xn59BSyM-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java",
                   "csharp"
            ],
            "date_published": "2018-10-20T09:43:00+13:00",
            "date_modified": "2021-01-11T10:05:52+13:00"
        },
        {
            "id": "https://rnowif.github.io/c-for-the-java-developer-generics.html",
            "url": "https://rnowif.github.io/c-for-the-java-developer-generics.html",
            "title": "C# for the Java Developer: Generics",
            "summary": "In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is very different. This blog post aims to explain the differences and the similarities between the two. TL;DR Java generics is&hellip;",
            "content_html": "<p>In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is <em>very</em> different. This blog post aims to explain the differences and the similarities between the two.<br>TL;DR Java generics is a lie, C# generics is not.</p>\n<!-- more -->\n\n<h2 id=\"java-generics-is-a-lie\">Java Generics is a Lie</h2>\n<p>Generics have been introduced in Java 5. Before that, you had to manipulate <code>Objects</code> and cast them to the desired type:</p>\n<pre><code class=\"language-java\">List apples = new ArrayList();\napples.add(new Apple());\n// This is really a list of objects, so the cast is required\nApple firstApple = (Apple) apples.get(0);</code></pre>\n<p>In the previous snippet, you should note that there is absolutely nothing that prevents you from adding a <code>Banana</code> into the list and make the program crash at runtime. Also, this code is still valid in the latest version of Java (which is Java 11 as we speak). To say the least, this approach is not very safe and do not leverage the type system as much as we could expect.</p>\n<p>Since Java 5, it is then possible to use the generic version of the <code>List</code> class:</p>\n<pre><code class=\"language-java\">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();\napples.add(new Apple());\n// The cast is not required any more thanks to the generics\nApple firstApple = apples.get(0);</code></pre>\n<p>The thing is that, at runtime, the two previous snippets are strictly equivalent. Indeed, Java generics are removed during compilation and the resulting bytecode only manipulate <code>Objects</code> and casts. This is called <em>type erasure</em>. As a consequence, it is not possible, in Java, to write code like this:</p>\n<pre><code class=\"language-java\">/**\n * Filter objects of the given type\n */\n&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects) {\n    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();\n    for (Object o : objects) {\n        if (o instanceof T) {\n            filteredObjects.add((T) o);\n        }\n    }\n    return filteredObjects;\n}</code></pre>\n<p>Indeed, the type of <code>T</code> is erased at runtime and the <code>instanceof</code> operation cannot be performed. That is why a class object is often passed as an argument of the method:</p>\n<pre><code class=\"language-java\">/**\n * Filter objects of the given type\n */\n&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects, Class&lt;T&gt; clazz) {\n    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();\n    for (Object o : objects) {\n        if (clazz.isInstance(o)) {\n            filteredObjects.add((T) o);\n        }\n    }\n    return filteredObjects;\n}</code></pre>\n<p>This method can be invoked like this:</p>\n<pre><code class=\"language-java\">List&lt;String&gt; stringsOnly = filterObjectsOfType(Arrays.asList(&quot;hello&quot;, 2), String.class);\n// stringsOnly contains only &quot;hello&quot;</code></pre>\n<h2 id=\"c-generics-is-a-runtime-feature\">C# Generics is a Runtime Feature</h2>\n<p>C# generics, on the other hand, is a totally different beast. Indeed, the real type is kept at runtime and it is possible to use this type to write this kind of code:</p>\n<pre><code class=\"language-csharp\">/**\n * Filter objects of the given type\n */\npublic IEnumerable&lt;T&gt; FilterObjectsOfType&lt;T&gt;(IEnumerable&lt;object&gt; objects)\n{\n    List&lt;T&gt; filteredObjects = new List&lt;T&gt;();\n    foreach (var obj in objects)\n    {\n        if (obj is T)\n        {\n            filteredObjects.Add((T) obj);    \n        }\n    }\n    return filteredObjects;\n} </code></pre>\n<p>This method can be invoked like this:</p>\n<pre><code class=\"language-csharp\">IEnumerable&lt;String&gt; stringsOnly = FilterObjectsOfType&lt;String&gt;(new List&lt;object&gt;(new object[] { &quot;hello&quot;, 2 }));\n// stringsOnly contains only &quot;hello&quot;</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In Java, generics are used to write type-safe code but this feature is limited and the code can be awkward sometimes due to the type erasure mechanism. In C#, it is a runtime feature and its usage is much more straightforward.</p>\n<p><em>PS: I realize that the code I wrote in the snippets is not really idiomatic but I wanted to have Java and C# code as similar as possible to be able to focus only on the usage of generics.</em></p>\n",
            "image": "https://rnowif.github.io/media/posts/5/dna-1811955_1920.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java",
                   "csharp"
            ],
            "date_published": "2018-10-20T09:40:00+13:00",
            "date_modified": "2021-01-11T09:40:26+13:00"
        },
        {
            "id": "https://rnowif.github.io/what-is-a-volatile-variable-in-java.html",
            "url": "https://rnowif.github.io/what-is-a-volatile-variable-in-java.html",
            "title": "What is a Volatile Variable in Java?",
            "summary": "The volatile keyword is one of the less known and less understood keyword of the Java language. The goal of this article is to explain what it is and when to use it. In order to understand the value of volatile, one must first understand&hellip;",
            "content_html": "<p>The <code>volatile</code> keyword is one of the less known and less understood keyword of the Java language. The goal of this article is to explain what it is and when to use it.</p>\n<!-- more -->\n\n<h2 id=\"memory-architecture\">Memory Architecture</h2>\n<p>In order to understand the value of <code>volatile</code>, one must first understand the memory architecture of a computer:</p>\n<p>{% img /images/memory_architecture.png %}</p>\n<p>Each CPU contains its own registers, which are basically in-CPU memory. Accessing these registers and performing operations on variables here is very fast.\nEach CPU also has cache memory layers. It can access this cache memory fast, but not as fast as the registers.\nFinally, there is the main memory (also called RAM). All CPUs can access this memory. The main memory is much bigger than the cache memories of the CPU.</p>\n<p>Typically, when a CPU needs to read something from the memory, it will read it into its CPU cache memory and perform operations on it. It can even read it into its registers. When the CPU needs to write it back to the memory, it will flush its registers to the cache memory and eventually this cache memory will be flushed back to the main memory.</p>\n<p>In general, the flush is performed when the CPU needs to make room for other information. Thus, it seems clear that one cannot make any assumption about <em>when</em> this flush will occur.</p>\n<h2 id=\"visibility-of-shared-variables\">Visibility of Shared Variables</h2>\n<p>If a computer has 2 CPUs or more, it will be able to run several threads at the same time. It means that, if each thread want to access the same variable, each CPU will have a “copy” of this variable into its cache memory and this could lead to a major synchronization issue.</p>\n<p>Take this code for instance:</p>\n<pre><code class=\"language-java\">public class MyServer implements Runnable {\n    private boolean running = true;\n\n    @Override\n    public void run() {\n        while (running) {\n            // Do some very interesting stuff...\n        }\n    }\n\n    public void stop() {\n        running = false;\n    }\n}</code></pre>\n<p>It is very likely that the <code>stop</code> method will be called from a different thread than the one executing the <code>run</code> method. If these threads are executed on 2 different CPUs, the <code>run</code> method will not stop until the CPU has flushed its cache memory to the main memory. And we saw that there is no way to predict when this will happen.</p>\n<p>In Java, the <code>volatile</code> keyword explicitely ask for a variable to be directly wrote to the main memory, and thus becoming instantely available for all CPUs.</p>\n<p>The code then become:</p>\n<pre><code class=\"language-java\">public class MyServer implements Runnable {\n    private volatile boolean running = true;\n\n    @Override\n    public void run() {\n        while (running) {\n            // Do some very interesting stuff...\n        }\n    }\n\n    public void stop() {\n        running = false;\n    }\n}</code></pre>\n<p>Note that a volatile variable can be a primitive or an object and can be <code>null</code>.</p>\n<h2 id=\"when-to-use-volatile\">When to Use <code>volatile</code></h2>\n<p> A volatile variable is guaranteed to have its last version always available from every CPUs. It is typically used for flags that are modified by a thread and read by another one (like the <code>running</code> boolean in the previous snippet). Globally, you may use a <code>volatile</code> variable if the variable may be accessed by several threads and you don’t need to perform a sequence of operations in an atomic manner (you should not increment a <code>volatile</code> variable for instance). If you need to do so, you should consider using a synchronization mechanism.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The <code>volatile</code> keyword is seldomly used, maybe because messing with threads is frowned upon in a JEE (or Spring) application, but it can be very useful to know it and understand its usage. Indeed, it could make your code safer and prevent you from writing algorithms that rely on locks and synchronization where it’s not really needed.</p>\n",
            "image": "https://rnowif.github.io/media/posts/7/federico-fioravanti-RSA3pnGxPTQ-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java"
            ],
            "date_published": "2018-09-21T11:21:00+12:00",
            "date_modified": "2021-01-11T11:22:38+13:00"
        },
        {
            "id": "https://rnowif.github.io/intersection-types-in-java.html",
            "url": "https://rnowif.github.io/intersection-types-in-java.html",
            "title": "Intersection Types in Java",
            "summary": "This blog post aims to explain how we can use intersection types in Java when we expect an object that implements different interfaces. The Interface Segregation Principle (ISP) stipulates that interfaces should contain the least amount of methods as possible. In other terms, a client&hellip;",
            "content_html": "<p>This blog post aims to explain how we can use intersection types in Java when we expect an object that implements different interfaces.</p>\n<!-- more -->\n\n<h2 id=\"interface-segregation-principle\">Interface Segregation Principle</h2>\n<p>The Interface Segregation Principle (ISP) stipulates that interfaces should contain the least amount of methods as possible. In other terms, a client of an interface should use all the methods of this interface.</p>\n<p>For instance, let’s take this <code>File</code> interface:</p>\n<pre><code class=\"language-java\">interface File {\n    Collection&lt;String&gt; readLines();\n    void write(String line);\n    void deleteFile();\n}\n\nclass LocalFile implements File {\n    // ...\n}</code></pre>\n<p>As a client of this interface, it is highly unlikely that I need all methods. I may want to just read the file and, in that case, I certainely don’t want to be able to delete it. If I just want to delete the file, I probably don’t want to read all its lines.</p>\n<p>In order to avoid that, it is a good idea to split this interface in 3 seperate ones:</p>\n<pre><code class=\"language-java\">interface FileReader {\n    Collection&lt;String&gt; readLines();\n}\n\ninterface FileWriter {\n    void write(String line);\n}\n\ninterface FileDestroyer {\n    void deleteFile();\n}\n\nclass LocalFile implements FileReader, FileWriter, FileDestroyer {\n    // The concrete class can implement all 3 interfaces\n    // ...\n}</code></pre>\n<p>Now, a client can just require the interface it needs and ignore the rest. </p>\n<h2 id=\"interface-combination\">Interface Combination</h2>\n<p>Writing tiny interfaces is good to enforce ISP and lower the coupling of the code. However, what happens when a client wants to read a file <em>and</em> write at the same time?</p>\n<p>The first two snippets won’t compile because one of the interface is not implemented:</p>\n<pre><code class=\"language-java\">void readAndWrite(FileReader reader) {\n    reader.readLines();\n    reader.write(&quot;Hello&quot;); // That won&#39;t compile since reader does not implement FileWriter\n}\n\nvoid readAndWrite(FileWriter writer) {\n    reader.readLines(); // That won&#39;t compile since writer does not implement FileReader\n    reader.write(&quot;Hello&quot;);\n}</code></pre>\n<p>As an alternative, it is possible to pass an instance of <code>LocalFile</code> but it introduces a high coupling between the method and the LocalFile concrete class, defeating the whole purpose of interfaces entirely.</p>\n<pre><code class=\"language-java\">void readAndWrite(LocalFile file) {\n    file.readLines();\n    file.write(&quot;Hello&quot;);\n    // That will compile but it is not recommended\n}</code></pre>\n<p>Since Java 1.5, and the introduction of generics, a feature, known as Intersection Types, allows to combine interfaces in this kind of situation.</p>\n<h2 id=\"intersection-types-to-the-rescue\">Intersection Types to the Rescue</h2>\n<p>The following code uses intersection types to solve the issue of needing an object that implements several interfaces:</p>\n<pre><code class=\"language-java\">&lt;T extends FileReader &amp; FileWriter&gt; void readAndWrite(T file) {\n    file.readLines();\n    file.write(&quot;Hello&quot;);    \n}</code></pre>\n<p>The <code>&amp;</code> symbol means that the method expects a type <code>T</code> that implements both the <code>FileReader</code> and <code>FileWriter</code> interfaces.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The intersection types is a feature that is not widely used in Java. However, it is very powerful as it allows to write very tiny interfaces and combine them on demand. From now on, there is no excuse to write big fat interfaces that have dozens of totally unrelated methods!</p>\n",
            "image": "https://rnowif.github.io/media/posts/8/denys-nevozhai-7nrsVjvALnA-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "java",
                   "design"
            ],
            "date_published": "2018-09-19T11:23:00+12:00",
            "date_modified": "2021-01-11T11:25:04+13:00"
        },
        {
            "id": "https://rnowif.github.io/controlling-the-time-in-java.html",
            "url": "https://rnowif.github.io/controlling-the-time-in-java.html",
            "title": "Controlling the Time in Java",
            "summary": "Time is a tricky thing, it’s always changing. Having such moving parts into the codebase can be very annoying when testing, for instance. In this article, we will see how to control the time in Java. Let’s take a simple example of a pizza delivery&hellip;",
            "content_html": "<p>Time is a tricky thing, it’s always changing. Having such moving parts into the codebase can be very annoying when testing, for instance. In this article, we will see how to control the time in Java.</p>\n<!-- more -->\n\n<p>Let’s take a simple example of a pizza delivery service. Its policy is that pizzas should be delivered in 10 minutes. When the customer ask for a delivery, the delivery time is automatically calculated by the system based on this policy.</p>\n<pre><code class=\"language-java\">public class DeliveryPolicy {\n  public Delivery createDelivery(Pizza pizza) {\n    LocalDateTime deliveryTime = LocalDateTime.now().plus(10, ChronoUnit.MINUTES);\n\n    return new Delivery(pizza, deliveryTime);\n  }\n}</code></pre>\n<h2 id=\"how-do-we-test-it\">How Do we Test it?</h2>\n<p>Since the time always changes we cannot test this method very precisely without changing its code. We could test that the delivery time is <em>approximatively</em> 10 minutes in the future but like all fuzzy tests, it could fail from time to time depending on the context on which it is executed.</p>\n<h2 id=\"make-dependency-visible\">Make Dependency Visible</h2>\n<p>The reason why this code is so difficult to test is that it has a hidden dependency: the clock. Since Java 8, all <code>now</code> methods of the Date API take a clock as an argument. We can then make this dependency visible.</p>\n<pre><code class=\"language-java\">public class DeliveryPolicy {\n\n  private final Clock clock;\n\n  public DeliveryPolicy() {\n    this.clock = Clock.systemDefaultZone();\n  }\n\n  public Delivery createDelivery(Pizza pizza) {\n    LocalDateTime deliveryTime = LocalDateTime.now(clock).plus(10, ChronoUnit.MINUTES);\n\n    return new Delivery(pizza, deliveryTime);\n  }\n}</code></pre>\n<h2 id=\"dependency-injection-to-the-rescue\">Dependency Injection to the Rescue</h2>\n<p>Now that the dependency is out there, we can inject it in the constructor, like any other dependency, and testing this method becomes trivial.</p>\n<pre><code class=\"language-java\">public class DeliveryPolicy {\n\n  private final Clock clock;\n\n  public DeliveryPolicy(ClockProvider clockProvider) {\n    this.clock = clockProvider.get();\n  }\n\n  public Delivery createDelivery(Pizza pizza) {\n    LocalDateTime deliveryTime = LocalDateTime.now(clock).plus(10, ChronoUnit.MINUTES);\n\n    return new Delivery(pizza, deliveryTime);\n  }\n}</code></pre>\n<pre><code class=\"language-java\">public class DeliveryPolicyTest {\n\n  @Test\n  public void should_schedule_delivery_ten_minutes_later() {\n    ZonedDateTime now = ZonedDateTime.of(LocalDateTime.of(2017, 7, 18, 0, 0, 0), ZoneId.of(&quot;+01&quot;));\n    DeliveryPolicy policy = new DeliveryPolicy(() -&gt; Clock.fixed(now.toInstant(), now.getZone()));\n\n    Delivery delivery = policy.createDelivery(new Pizza());\n\n    LocalDateTime tenMinutesLater = LocalDateTime.of(2017, 7, 18, 0, 10, 0);\n    assertThat(delivery.getDeliveryTime()).isEqualTo(tenMinutesLater);\n  }\n}</code></pre>\n<h2 id=\"usage-with-spring-framework-and-spring-boot\">Usage with Spring Framework and Spring Boot</h2>\n<p>If you use Spring Framework in your application, you can create a <code>ClockProvider</code> bean that will give the default Clock. Moreover, if you use Spring Boot, it allows you to mock this bean very easily in integration tests with the <code>@MockBean</code> annotation.</p>\n<pre><code class=\"language-java\">@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DeliveryPolicyIT {\n\n  @MockBean\n  private ClockProvider clockProvider;\n\n  @Autowired\n  private DeliveryPolicy policy;\n\n  @Test\n  public void should_schedule_delivery_ten_minutes_later() {\n    ZonedDateTime now = ZonedDateTime.of(LocalDateTime.of(2017, 7, 18, 0, 0, 0), ZoneId.of(&quot;+01&quot;));\n    Mockito.when(clockProvider.get()).thenReturn(Clock.fixed(now.toInstant(), now.getZone()));\n\n    Delivery delivery = policy.createDelivery(new Pizza());\n\n    LocalDateTime tenMinutesLater = LocalDateTime.of(2017, 7, 18, 0, 10, 0);\n    assertThat(delivery.getDeliveryTime()).isEqualTo(tenMinutesLater);\n  }\n}</code></pre>\n<pre><code class=\"language-java\">@Configuration\npublic class ClockConfig {\n\n  @Bean\n  public ClockProvider clockProvider() {\n    return () -&gt; Clock.systemDefaultZone();\n  }\n}</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I used to think that the time, like random, was a very difficult thing to test. With the Java 8 Date API, it becomes trivial. You just have to acknowledge the dependency you have on the clock and treat it like any other dependency. Now, I almost never use a method of the Date API without passing a clock as a parameter. This allows me to control the time throughout the application very easily (in unit, integration or functional tests).</p>\n",
            "image": "https://rnowif.github.io/media/posts/9/fabrizio-verrecchia-Ai7sV3SSMIQ-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "testing",
                   "java"
            ],
            "date_published": "2017-07-20T11:29:00+12:00",
            "date_modified": "2021-01-11T11:29:57+13:00"
        },
        {
            "id": "https://rnowif.github.io/keep-calm-and-use-git-reflog.html",
            "url": "https://rnowif.github.io/keep-calm-and-use-git-reflog.html",
            "title": "Keep Calm and Use Git Reflog",
            "summary": "Git is a very powerful tool but it takes a fair amount of time to masterize it. It can be particuarly easy to break or lose things when you amend some commits, resolve conflicts or force push your changes. In this blog post, I will&hellip;",
            "content_html": "<p>Git is a very powerful tool but it takes a fair amount of time to masterize it. It can be particuarly easy to break or lose things when you amend some commits, resolve conflicts or force push your changes.</p>\n<p>In this blog post, I will show you how to use the <code>git reflog</code> command to retrieve commits that you thought you lost forever.</p>\n<!-- more -->\n\n<h2 id=\"retrieve-an-amended-commit\">Retrieve an amended commit</h2>\n<p>The first use case I will show is when you amend a commit:</p>\n<pre><code>$ git init\n$ echo &quot;Hello&quot; &gt; hello.txt\n$ git add hello.txt &amp;&amp; git commit -m &quot;Add hello&quot;\n$ echo &quot;Hello!&quot; &gt; hello.txt\n$ git add hello.txt &amp;&amp; git commit --amend</code></pre><p>If you think that the first commit is lost, read on.</p>\n<p>The <code>git reflog</code> command allows you to display all git commands that you performed on your repo and, most importantly, the associated commit hash. In fact, these commits are not lost, they are just not in the tree anymore but you can still check them out, cherry-pick them or do whatever you need to do.</p>\n<pre><code>$ git reflog\n3e6e190 HEAD@{0}: commit (amend): Add hello\n51587bc HEAD@{1}: commit (initial): Add hello\n$ git diff 51587bc 3e6e190\ndiff --git a/hello.txt b/hello.txt\nindex e965047..10ddd6d 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -1 +1 @@\n-Hello\n+Hello!</code></pre><h2 id=\"recover-an-erroneous-merge\">Recover an erroneous merge</h2>\n<p>The second scenario is when you rebase a branch on an other one and you have conflicts.</p>\n<pre><code>$ git checkout -b develop\n$ git checkout master\n$ echo &quot;Hello, world!&quot; &gt; hello.txt\n$ git add hello.txt &amp;&amp; git commit -m &quot;Hello, world!&quot;\n$ git checkout develop\n$ echo &quot;Hello, you!&quot; &gt; hello.txt\n$ git add hello.txt &amp;&amp; git commit -m &quot;Hello, you!&quot;\n$ echo &quot;World!&quot; &gt; world.txt\n$ git add world.txt &amp;&amp; git commit -m &quot;Add world.txt&quot;</code></pre><p>This is the resulting tree (note that the hello.txt has been modified on the two branches and there is a conflict):</p>\n<pre><code>* a5c7ca5 - (HEAD -&gt; develop) Hello, you!\n| * 4d016c5 - (master) Hello, world!\n|/  \n* 3e6e190 - Add hello</code></pre><p>Unsurprisingly, the <code>reflog</code> looks like this:</p>\n<pre><code>$ git reflog\n21c2ce2 HEAD@{0}: commit: Add world.txt\na5c7ca5 HEAD@{1}: commit: Hello, you!\n3e6e190 HEAD@{2}: checkout: moving from master to develop\n4d016c5 HEAD@{3}: commit: Hello, world!\n3e6e190 HEAD@{4}: checkout: moving from develop to master\n3e6e190 HEAD@{5}: checkout: moving from master to develop\n3e6e190 HEAD@{6}: commit (amend): Add hello\n51587bc HEAD@{7}: commit (initial): Add hello</code></pre><p>Now we rebase <code>develop</code> on <code>master</code> and we resolve the conflicts.</p>\n<pre><code>$ git rebase master\n// ... resolve merge conflicts</code></pre><p>The thing is that we made a mistake and took the wrong version of <code>hello.txt</code>. Since we did a rebase, we rewrote the history and we could think we lost the “good” version of <code>hello.txt</code>.</p>\n<p>{% img /images/git-reflog.png %}</p>\n<p>In fact, the <code>reflog</code> will display a line for each commit you rebased so it is very easy to pick the one where you made a mistake.</p>\n<pre><code>$ git reflog\nae9d1d8 HEAD@{0}: rebase finished: returning to refs/heads/develop\nae9d1d8 HEAD@{1}: rebase: Add world.txt\n4d016c5 HEAD@{2}: rebase: checkout master\n21c2ce2 HEAD@{3}: commit: Add world.txt\na5c7ca5 HEAD@{4}: commit: Hello, you!\n$ git diff 21c2ce2\ndiff --git c/hello.txt w/hello.txt\nindex 624d875..af5626b 100644\n--- c/hello.txt\n+++ w/hello.txt\n@@ -1 +1 @@\n-Hello, you!\n+Hello, world!</code></pre><p>If you want to go back and fix it, you just have to check the commit out, delete the current <code>develop</code> branch (since it is not in the correct state) and create a new <code>develop</code> branch based upon the right commit.</p>\n<pre><code>$ git checkout 21c2ce2\n$ git branch -D develop\n$ git checkout -b develop</code></pre><h2 id=\"conclusion\">Conclusion</h2>\n<p>I think you got the idea, Git keeps everything that you committed. Thus, don’t panic if you find yourself in a situation where you erase a previous commit and think about the <code>git reflog</code> command to dive into your history and look for the information you thought you lost!</p>\n",
            "image": "https://rnowif.github.io/media/posts/10/hulki-okan-tabak-T9HLn-g6Cmo-unsplash.jpg",
            "author": {
                "name": "Renaud Humbert-Labeaumaz"
            },
            "tags": [
                   "git"
            ],
            "date_published": "2017-04-11T11:30:00+12:00",
            "date_modified": "2021-01-11T11:33:38+13:00"
        }
    ]
}
