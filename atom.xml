<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Renaud Humbert-Labeaumaz]]></title>
  <link href="https://rnowif.github.io/atom.xml" rel="self"/>
  <link href="https://rnowif.github.io/"/>
  <updated>2018-10-22T23:26:28+13:00</updated>
  <id>https://rnowif.github.io/</id>
  <author>
    <name><![CDATA[Renaud Humbert-Labeaumaz]]></name>
    <email><![CDATA[rnow.if@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.Net Clean Architecture]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/22/asp-dot-net-clean-architecture/"/>
    <updated>2018-10-22T10:04:23+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/22/asp-dot-net-clean-architecture</id>
    <content type="html"><![CDATA[<p>When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation of the Uncle Bob&rsquo;s <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> on an ASP.Net project. The source code of this project can be found on my <a href="https://github.com/rnowif/Expenses">GitHub</a>.</p>

<!-- more -->


<p>The main idea of the clean architecture is to reduce the coupling between the core business code and the external world (Web, Database, Frameworks). In order to do that, the project can be divided in 3 main modules, that will be described below: <code>Domain</code>, <code>Web</code> and <code>Data</code>.</p>

<h2>Domain</h2>

<p>This module contains all the core business code. It does not depend on anything else than the .NET SDK and contains sub-modules.</p>

<h3><code>Entities</code></h3>

<p>They are the building blocks of the domain and encapsulate the business concepts. Entities are not coupled with any ORM framework. Indeed the domain model can be quite different from the database model!</p>

<h3><code>Use Cases</code></h3>

<p>Following the Uncle Bob&rsquo;s definition, they contains application specific business rules and orchestrate the flow of data to and from the entities and implement higher level business rules.</p>

<p>It is important to understand that the domain model should not leak outside of this module. In order to do that, use cases should not take entities are arguments for their methods, but a list of raw arguments. For instance, the use case that submit a new expense looks like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ISubmitExpense</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">Guid</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">long</span> <span class="n">priceWithoutTax</span><span class="p">,</span> <span class="kt">long</span> <span class="n">priceIncludingTax</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is responsible to build an <code>Expense</code> object and apply the relevant business logic.</p>

<h3><code>Repositories</code></h3>

<p>In the domain module, repositories are only interfaces that are used by the use cases to access data without any knowledge of the concrete implementations: data can be retrieved from databases, files or external Web APIs, it should not affect the core business logic at all. To reinforce this, repositories take entities as arguments and return entities as well. It is the responsibility of the concrete implementation to handle conversion if needed.</p>

<h2>Data</h2>

<p>The data module contains the database and ORM configuration and the repositories implementations. Typically, we find the EntityFramework configuration in this module as well as the annotated classes that will be mapped with database entries. Repositories implementation are responsible for converting &ldquo;database objects&rdquo; in domain objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Create</span><span class="p">(</span><span class="n">Expense</span> <span class="n">expense</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Convert the domain object &quot;Expense&quot; into a database object &quot;DbExpense&quot;</span>
</span><span class='line'>  <span class="n">_dbContext</span><span class="p">.</span><span class="n">Expenses</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">DbExpense</span><span class="p">.</span><span class="n">FromExpense</span><span class="p">(</span><span class="n">expense</span><span class="p">));</span>
</span><span class='line'>  <span class="n">_dbContext</span><span class="p">.</span><span class="n">SaveChanges</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This prevents the ORM framework to leak into the domain.</p>

<h2>Web</h2>

<p>The web module contains all the controllers. It is responsible for handling HTTP requests, converting JSON or XML payloads to objects and invoking use cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[HttpPost]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">SubmitExpense</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">SubmitExpenseCommand</span> <span class="n">expense</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// The controller just invoke the use case with data extracted from the body of the HTTP request</span>
</span><span class='line'>  <span class="n">_submitExpense</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">expense</span><span class="p">.</span><span class="n">UserId</span><span class="p">,</span> <span class="n">expense</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">expense</span><span class="p">.</span><span class="n">PriceWithoutTax</span><span class="p">,</span> <span class="n">expense</span><span class="p">.</span><span class="n">PriceIncludingTax</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should not contain any business logic whatsoever. As a consequence, controllers are very lightweight and easy to test.</p>

<h2>Dependency injection</h2>

<p>In order to achieve low coupling between the modules, interfaces are injected into the constructor of the different classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SubmitExpense</span> <span class="p">:</span> <span class="n">ISubmitExpense</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">IExpenseRepository</span> <span class="n">_repository</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">SubmitExpense</span><span class="p">(</span><span class="n">IExpenseRepository</span> <span class="n">repository</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_repository</span> <span class="p">=</span> <span class="n">repository</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The plumbing is handled by the <code>Startup.cs</code> class where all the implementations of the interfaces are declared:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Register &quot;SubmitExpense&quot; as the implementation of &quot;ISubmitExpense&quot;</span>
</span><span class='line'>  <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ISubmitExpense</span><span class="p">,</span> <span class="n">SubmitExpense</span><span class="p">&gt;();</span>
</span><span class='line'>  <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IExpenseRepository</span><span class="p">,</span> <span class="n">ExpenseRepository</span><span class="p">&gt;();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>In this architecture, the emphasis is put on the domain. Every other modules should adapt to it but it does not depend on anything. This results in lightweight classes that are very easy to understand and test in isolation.<br/>
Moreover, the low coupling makes it very easy to change the infrastructure. Indeed, the domain module would not change a bit if we decided to have a CLI instead of a Web App or if the data should be retrieved from an external Web API instead of a PostgreSQL database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Enums]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-enums/"/>
    <updated>2018-10-21T06:54:27+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-enums</id>
    <content type="html"><![CDATA[<p>Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences.</p>

<!-- more -->


<p>In Java, enums are very much like regular classes: they can implement interfaces and have methods. However, they cannot inherit other classes or be explicitly instantiated. They can be viewed as <code>final</code> classes (or <code>sealed</code> classes in C#) that already inherit the virtual &ldquo;enum&rdquo; class, have only private constructor(s) and a set of pre-defined instances (the values of the enum).</p>

<p>For instance, let&rsquo;s take the example of the HTTP status codes. In Java, it is possible to write this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">enum</span> <span class="n">HttpStatus</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">HttpStatus</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">OK</span><span class="o">(</span><span class="mi">200</span><span class="o">),</span> <span class="n">SERVER_ERROR</span><span class="o">(</span><span class="mi">500</span><span class="o">),</span> <span class="n">NOT_FOUND</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HttpStatus</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is a regular instance method</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">code</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is the implementation of the Comparable interface</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Http statuses will be sorted by status code</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">code</span><span class="o">,</span> <span class="n">o</span><span class="o">.</span><span class="na">code</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The &#39;code&#39; method can be invoked like any other method</span>
</span><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">code</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In C#, enums are just integers in disguise. The previous snippet can be simulated in C# only because the <code>code</code> attribute happens to be an <code>int</code>. Otherwise, it would be very complex to have the same behaviour:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">enum</span> <span class="n">HttpStatus</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// int value of the enum can be forced to a specific value</span>
</span><span class='line'>  <span class="n">OK</span> <span class="p">=</span> <span class="m">200</span><span class="p">,</span>
</span><span class='line'>  <span class="n">NOT_FOUND</span> <span class="p">=</span> <span class="m">404</span><span class="p">,</span>
</span><span class='line'>  <span class="n">SERVER_ERROR</span> <span class="p">=</span> <span class="m">500</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">HttpStatus</span> <span class="n">status</span> <span class="p">=</span> <span class="n">HttpStatus</span><span class="p">.</span><span class="n">OK</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The enum can be casted to an int to get its value</span>
</span><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">status</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To sum up, Java enums are much more powerful than their C# counterparts. I often use these features when I write Java code and I think I would miss them if I had to write C# code on a daily basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Lambdas]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-lambdas/"/>
    <updated>2018-10-21T00:37:12+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/21/c-sharp-for-the-java-developer-lambdas</id>
    <content type="html"><![CDATA[<p>A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be viewed as the implementation of an interface with only one method (called a <em>functional interface</em>) whereas a C# lambda can be assigned to a <code>delegate</code>, which is a concept that does not exist in Java. This article aims to explain how lambdas work in Java and C# and highlight their differences and similarities.</p>

<!-- more -->


<h2>Java Functional Interfaces</h2>

<p>In Java, a lambda can simply be viewed as an anonymous function that implements an interface with only one method. This kind of interface is called a <em>functional interface</em> and can be annotated with the <code>@FunctionalInterface</code> annotation that tells the compiler to enforce the only-one-method rule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// The function interface is implemented with a lambda</span>
</span><span class='line'><span class="n">Printer</span> <span class="n">standardPrinter</span> <span class="o">=</span> <span class="n">message</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The print method of standardPrinter can be invoked</span>
</span><span class='line'><span class="n">standardPrinter</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the previous snippet, you should note that the way the interface is implemented makes absolutely no difference. It can be a lambda, a concrete or even an anonymous class. In any ways, you can simply invoke the <code>print</code> method of the interface.</p>

<p>There are some pre-defined <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">generic functional interfaces</a> in the JDK that can be used directly off the shelf. The main ones are described below:</p>

<table>
<thead>
<tr>
<th> Name </th>
<th> Method </th>
<th> Role </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html"><code>Function&lt;T,R&gt;</code></a> </td>
<td> <code>R apply(T t)</code> </td>
<td> Takes an argument of a given type T and returns an object of type R </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html"><code>Consumer&lt;T&gt;</code></a> </td>
<td> <code>void accept(T)</code> </td>
<td> Takes an argument of a given type T and does something useful (typically with side effects) </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><code>Predicate&lt;T&gt;</code></a> </td>
<td> <code>boolean test(T)</code> </td>
<td> Takes an argument of a given type T and returns a boolean (similar to <code>Function&lt;T, Boolean&gt;</code>) </td>
</tr>
<tr>
<td> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html"><code>Supplier&lt;T&gt;</code></a> </td>
<td> <code>T get()</code> </td>
<td> Returns an object of type T </td>
</tr>
</tbody>
</table>


<h2>C# Delegates</h2>

<p>In C#, a lambda can be assigned to a delegate which is a type that encapsulates a method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">delegate</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// A lambda is assigned to the delegate</span>
</span><span class='line'><span class="n">Print</span> <span class="n">print</span> <span class="p">=</span> <span class="n">message</span> <span class="p">=&gt;</span> <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// print can be directly invoked as a method</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like in Java, some delegates are already defined in the .NET framework, the main ones are described below:</p>

<table>
<thead>
<tr>
<th> Method </th>
<th> Role </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.func-2"><code>TResult Func&lt;in T,out TResult&gt;(T arg)</code></a> </td>
<td> Takes an argument of a given type T and returns an object of type TResult </td>
</tr>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.action-1"><code>void Action&lt;in T&gt;(T obj)</code></a> </td>
<td> Takes an argument of a given type T and does something useful (typically with side effects) </td>
</tr>
<tr>
<td> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1"><code>bool Predicate&lt;in T&gt;(T obj)</code></a> </td>
<td> Takes an argument of a given type T and returns a boolean (similar to <code>Func&lt;T, bool&gt;</code>) </td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>From a Java perspective, using lambdas in APIs (like Linq for instance) is pretty straightforward. However, when digging a little bit deeper, there are some subtle differences to understand. I find the Java approach simpler as it does not introduce another concept but the C# approach is cleaner because the delegate can be invoked directly like a method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Generics]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics/"/>
    <updated>2018-10-20T05:57:36+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-generics</id>
    <content type="html"><![CDATA[<p>In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is <em>very</em> different. This blog post aims to explain the differences and the similarities between the two.<br/>
TL;DR Java generics is a lie, C# generics is not.</p>

<!-- more -->


<h2>Java Generics is a Lie</h2>

<p>Generics have been introduced in Java 5. Before that, you had to manipulate <code>Objects</code> and cast them to the desired type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">apples</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayList</span><span class="o">();</span>
</span><span class='line'><span class="n">apples</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Apple</span><span class="o">());</span>
</span><span class='line'><span class="c1">// This is really a list of objects, so the cast is required</span>
</span><span class='line'><span class="n">Apple</span> <span class="n">firstApple</span> <span class="o">=</span> <span class="o">(</span><span class="n">Apple</span><span class="o">)</span> <span class="n">apples</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the previous snippet, you should note that there is absolutely nothing that prevents you from adding a <code>Banana</code> into the list and make the program crash at runtime. Also, this code is still valid in the latest version of Java (which is Java 11 as we speak). To say the least, this approach is not very safe and do not leverage the type system as much as we could expect.</p>

<p>Since Java 5, it is then possible to use the generic version of the <code>List</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Apple</span><span class="o">&gt;</span> <span class="n">apples</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Apple</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">apples</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Apple</span><span class="o">());</span>
</span><span class='line'><span class="c1">// The cast is not required any more thanks to the generics</span>
</span><span class='line'><span class="n">Apple</span> <span class="n">firstApple</span> <span class="o">=</span> <span class="n">apples</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing is that, at runtime, the two previous snippets are strictly equivalent. Indeed, Java generics are removed during compilation and the resulting bytecode only manipulate <code>Objects</code> and casts. This is called <em>type erasure</em>. As a consequence, it is not possible, in Java, to write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Filter objects of the given type</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">filterObjectsOfType</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">filteredObjects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">o</span> <span class="o">:</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">T</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">filteredObjects</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">T</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">filteredObjects</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, the type of <code>T</code> is erased at runtime and the <code>instanceof</code> operation cannot be performed. That is why a class object is often passed as an argument of the method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Filter objects of the given type</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">filterObjectsOfType</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">filteredObjects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">o</span> <span class="o">:</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span><span class="o">.</span><span class="na">isInstance</span><span class="o">(</span><span class="n">o</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">filteredObjects</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">T</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">filteredObjects</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method can be invoked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringsOnly</span> <span class="o">=</span> <span class="n">filterObjectsOfType</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="c1">// stringsOnly contains only &quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>C# Generics is a Runtime Feature</h2>

<p>C# generics, on the other hand, is a totally different beast. Indeed, the real type is kept at runtime and it is possible to use this type to write this kind of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Filter objects of the given type</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">FilterObjectsOfType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">objects</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">filteredObjects</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">obj</span> <span class="k">in</span> <span class="n">objects</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="k">is</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">filteredObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">((</span><span class="n">T</span><span class="p">)</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">filteredObjects</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method can be invoked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="n">stringsOnly</span> <span class="p">=</span> <span class="n">FilterObjectsOfType</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="m">2</span> <span class="p">}));</span>
</span><span class='line'><span class="c1">// stringsOnly contains only &quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>In Java, generics are used to write type-safe code but this feature is limited and the code can be awkward sometimes due to the type erasure mechanism. In C#, it is a runtime feature and its usage is much more straightforward.</p>

<p><em>PS: I realize that the code I wrote in the snippets is not really idiomatic but I wanted to have Java and C# code as similar as possible to be able to focus only on the usage of generics.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# for the Java Developer: Extension Methods]]></title>
    <link href="https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-extension-methods/"/>
    <updated>2018-10-20T01:20:24+13:00</updated>
    <id>https://rnowif.github.io/blog/2018/10/20/c-sharp-for-the-java-developer-extension-methods</id>
    <content type="html"><![CDATA[<p>After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like <a href="https://kotlinlang.org/docs/reference/extensions.html">Kotlin</a>) but not in Java, let the developer add methods to a class without touching its code (hence the name <em>extension</em> methods).</p>

<!-- more -->


<p>Let&rsquo;s say you want to create a method that puts the first letter of a string in upper case and returns the new string. You cannot modify (or even inherit) the <code>String</code> class in Java to add this method. Since you don&rsquo;t necessarily want to create your own custom flavour of the <code>String</code> class for your code base, you would probably create a static function that takes a <code>String</code> as an argument and return another <code>String</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">StringExtensions</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">String</span> <span class="nf">capitalize</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Character</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">+</span> <span class="n">word</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can simply invoke this function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">word</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">capitalizedWord</span> <span class="o">=</span> <span class="n">StringExtensions</span><span class="o">.</span><span class="na">capitalize</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, creating a static method is also possible in C#. However, C# has a feature that allows to add new methods to a class without having to modify its code. This feature is called <em>extension methods</em>. In order to create an extension method, you have to create a top-level static class and implement a static method. The first argument of this method specifies the type that the method operates on and should have the <code>this</code> modifier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">class</span> <span class="nc">StringExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">string</span> <span class="nf">Capitalize</span><span class="p">(</span><span class="k">this</span> <span class="n">String</span> <span class="n">word</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Note that this cannot access any private data in the String class. </span>
</span><span class='line'>      <span class="k">return</span> <span class="kt">char</span><span class="p">.</span><span class="n">ToUpper</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="p">+</span> <span class="n">word</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use it, the namespace that contains the class must be specified with a <code>using</code> directive. Afterwards, the method can be invoked as if it was an instance method of the type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">word</span> <span class="p">=</span> <span class="s">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">string</span> <span class="n">capitalizedWord</span> <span class="p">=</span> <span class="n">word</span><span class="p">.</span><span class="n">Capitalize</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Extension methods are very powerful. Beside the fact that the code looks &ldquo;cleaner&rdquo;, it is also possible to seamlessly plug new behaviours in existing types by simply importing a namespace. The extension code can be in separate specific modules that can be imported only when needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is a Volatile Variable in Java?]]></title>
    <link href="https://rnowif.github.io/blog/2018/09/21/what-is-a-volatile-variable-in-java/"/>
    <updated>2018-09-21T22:13:33+12:00</updated>
    <id>https://rnowif.github.io/blog/2018/09/21/what-is-a-volatile-variable-in-java</id>
    <content type="html"><![CDATA[<p>The <code>volatile</code> keyword is one of the less known and less understood keyword of the Java language. The goal of this article is to explain what it is and when to use it.</p>

<!-- more -->


<h2>Memory Architecture</h2>

<p>In order to understand the value of <code>volatile</code>, one must first understand the memory architecture of a computer:</p>

<p><img src="https://rnowif.github.io/images/memory_architecture.png"></p>

<p>Each CPU contains its own registers, which are basically in-CPU memory. Accessing these registers and performing operations on variables here is very fast.
Each CPU also has cache memory layers. It can access this cache memory fast, but not as fast as the registers.
Finally, there is the main memory (also called RAM). All CPUs can access this memory. The main memory is much bigger than the cache memories of the CPU.</p>

<p>Typically, when a CPU needs to read something from the memory, it will read it into its CPU cache memory and perform operations on it. It can even read it into its registers. When the CPU needs to write it back to the memory, it will flush its registers to the cache memory and eventually this cache memory will be flushed back to the main memory.</p>

<p>In general, the flush is performed when the CPU needs to make room for other information. Thus, it seems clear that one cannot make any assumption about <em>when</em> this flush will occur.</p>

<h2>Visibility of Shared Variables</h2>

<p>If a computer has 2 CPUs or more, it will be able to run several threads at the same time. It means that, if each thread want to access the same variable, each CPU will have a &ldquo;copy&rdquo; of this variable into its cache memory and this could lead to a major synchronization issue.</p>

<p>Take this code for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServer</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Do some very interesting stuff...</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is very likely that the <code>stop</code> method will be called from a different thread than the one executing the <code>run</code> method. If these threads are executed on 2 different CPUs, the <code>run</code> method will not stop until the CPU has flushed its cache memory to the main memory. And we saw that there is no way to predict when this will happen.</p>

<p>In Java, the <code>volatile</code> keyword explicitely ask for a variable to be directly wrote to the main memory, and thus becoming instantely available for all CPUs.</p>

<p>The code then become:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServer</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Do some very interesting stuff...</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that a volatile variable can be a primitive or an object and can be <code>null</code>.</p>

<h2>When to Use <code>volatile</code></h2>

<p> A volatile variable is guaranteed to have its last version always available from every CPUs. It is typically used for flags that are modified by a thread and read by another one (like the <code>running</code> boolean in the previous snippet). Globally, you may use a <code>volatile</code> variable if the variable may be accessed by several threads and you don&rsquo;t need to perform a sequence of operations in an atomic manner (you should not increment a <code>volatile</code> variable for instance). If you need to do so, you should consider using a synchronization mechanism.</p>

<h2>Conclusion</h2>

<p>The <code>volatile</code> keyword is seldomly used, maybe because messing with threads is frowned upon in a JEE (or Spring) application, but it can be very useful to know it and understand its usage. Indeed, it could make your code safer and prevent you from writing algorithms that rely on locks and synchronization where it&rsquo;s not really needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intersection Types in Java]]></title>
    <link href="https://rnowif.github.io/blog/2018/09/19/intersection-types-in-java/"/>
    <updated>2018-09-19T21:29:15+12:00</updated>
    <id>https://rnowif.github.io/blog/2018/09/19/intersection-types-in-java</id>
    <content type="html"><![CDATA[<p>This blog post aims to explain how we can use intersection types in Java when we expect an object that implements different interfaces.</p>

<!-- more -->


<h2>Interface Segregation Principle</h2>

<p>The Interface Segregation Principle (ISP) stipulates that interfaces should contain the least amount of methods as possible. In other terms, a client of an interface should use all the methods of this interface.</p>

<p>For instance, let&rsquo;s take this <code>File</code> interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">File</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">readLines</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">deleteFile</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">LocalFile</span> <span class="kd">implements</span> <span class="n">File</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a client of this interface, it is highly unlikely that I need all methods. I may want to just read the file and, in that case, I certainely don&rsquo;t want to be able to delete it. If I just want to delete the file, I probably don&rsquo;t want to read all its lines.</p>

<p>In order to avoid that, it is a good idea to split this interface in 3 seperate ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">FileReader</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">readLines</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">FileWriter</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">FileDestroyer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">deleteFile</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">LocalFile</span> <span class="kd">implements</span> <span class="n">FileReader</span><span class="o">,</span> <span class="n">FileWriter</span><span class="o">,</span> <span class="n">FileDestroyer</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// The concrete class can implement all 3 interfaces</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, a client can just require the interface it needs and ignore the rest.</p>

<h2>Interface Combination</h2>

<p>Writing tiny interfaces is good to enforce ISP and lower the coupling of the code. However, what happens when a client wants to read a file <em>and</em> write at the same time?</p>

<p>The first two snippets won&rsquo;t compile because one of the interface is not implemented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">readAndWrite</span><span class="o">(</span><span class="n">FileReader</span> <span class="n">reader</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="na">readLines</span><span class="o">();</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span> <span class="c1">// That won&#39;t compile since reader does not implement FileWriter</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">readAndWrite</span><span class="o">(</span><span class="n">FileWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="na">readLines</span><span class="o">();</span> <span class="c1">// That won&#39;t compile since writer does not implement FileReader</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an alternative, it is possible to pass an instance of <code>LocalFile</code> but it introduces a high coupling between the method and the LocalFile concrete class, defeating the whole purpose of interfaces entirely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">readAndWrite</span><span class="o">(</span><span class="n">LocalFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="na">readLines</span><span class="o">();</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// That will compile but it is not recommended</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since Java 1.5, and the introduction of generics, a feature, known as Intersection Types, allows to combine interfaces in this kind of situation.</p>

<h2>Intersection Types to the Rescue</h2>

<p>The following code uses intersection types to solve the issue of needing an object that implements several interfaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">FileReader</span> <span class="o">&amp;</span> <span class="n">FileWriter</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">readAndWrite</span><span class="o">(</span><span class="n">T</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="na">readLines</span><span class="o">();</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>   
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>&amp;</code> symbol means that the method expects a type <code>T</code> that implements both the <code>FileReader</code> and <code>FileWriter</code> interfaces.</p>

<h2>Conclusion</h2>

<p>The intersection types is a feature that is not widely used in Java. However, it is very powerful as it allows to write very tiny interfaces and combine them on demand. From now on, there is no excuse to write big fat interfaces that have dozens of totally unrelated methods!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Java Spring Boot Microservices]]></title>
    <link href="https://rnowif.github.io/blog/2017/09/18/testing-java-spring-cloud-microservices/"/>
    <updated>2017-09-18T02:09:24+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/09/18/testing-java-spring-cloud-microservices</id>
    <content type="html"><![CDATA[<p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. It is crucial to understand the role of each type of tests in order to leverage their potential.</p>

<p>The goal of this article is to describe a strategy to use them in order to test Java Spring Boot microservices. For every type of tests, we will try to explain its role, its scope as well as tooling we like to use.</p>

<!-- more -->


<h2>Anatomy of a Microservice</h2>

<p>First of all, we will setup a common vocabulary to make this article as clear as possible. A standard microservice is composed of:</p>

<ul>
<li><strong>Resources</strong>: HTTP controllers or AMQP listeners that will serve as the entry point of the microservice.</li>
<li><strong>Services / domain</strong>: Classes that will contain the business logic.</li>
<li><strong>Repositories</strong>: Classes that will expose an API to access a storage (like a database for instance).</li>
<li><strong>Clients</strong>: HTTP clients or AMQP producers that will communicate with external resources.</li>
<li><strong>Gateways</strong>: Classes that will serve as interfaces between domain services and clients by handling HTTP or AMQP related tasks and providing a clean API to the domain.</li>
</ul>


<h2>Types of Tests</h2>

<h3>Unit Tests</h3>

<p>Unit tests allow to test a unit (generally a method) in isolation. They are very cost-effective: easy to setup and very fast. Thus, they can give a very fast feedback about the state of the application to quickly spot bugs or regressions. It is then advised to test every edge cases and relevant combinations with unit tests.
As a bonus, they can validate a design: if the code is really difficult to test, the design is probably bad.</p>

<p>In a microservice, like in any other codebase, it is crucial to unit test domain / service classes and every other classes that contain logic.</p>

<p>The tooling we prefer to write unit tests is <a href="http://junit.org/junit5/">Junit</a> (to run the tests), <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> (to write assertions) and <a href="http://site.mockito.org/">Mockito</a> (to mock external dependencies).</p>

<h3>Integration Tests</h3>

<p>Integration tests are used to test the correct integration of the different bricks of the application. They are sometimes hard to setup and have to be carefully chosen. The idea is not to test all possible interactions but to choose relevant ones. The feedback of these tests is less fast than with unit tests because they are slower to execute. It is important to note that writing too many integration tests for the same interaction can be counter-productive. Indeed, the build time will be increased without any added value.</p>

<p>In a microservice, integration tests can be written for:</p>

<ul>
<li>Repositories when the query is more complex than just a <code>findById</code>.</li>
<li>Services in case of doubt on the interaction between the service and the respository (JPA or transaction issues for instance).</li>
<li>HTTP clients.</li>
<li>Gateways.</li>
</ul>


<p>Spring Boot provides a very good tooling to write integration tests. A typical integration test with Spring Boot looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserGatewayIntTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserGateway</span> <span class="n">userGateway</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test must use the <code>SpringRunner</code> and be annotated with <code>@SpringBootTest</code>. It is then possible to inject a bean using <code>@Autowired</code> and to mock one using <code>@MockBean</code>.
In an integration test, the database should be embedded (H2 database is a good candidate) in order for the tests to be executable anywhere. For the same reason, external HTTP resources can be mocked using <a href="http://wiremock.org/">WireMock</a> and SMTP server with <a href="https://github.com/voodoodyne/subethasmtp">SubEthatSMTP</a>.</p>

<p>In order to be able to mock external microservices, the port must be fixed. In production, microservices will register themselves to a registry and an URL will be dynamically assigned to them. If <a href="https://github.com/Netflix/ribbon">Ribbon</a> is used with Spring Cloud, it is possible to fix the URL in tests, by adding a property to the test <code>application.yml</code> (here, the external microservice name is <code>user</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ribbon</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">listOfServers</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost:9999</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Component Tests</h3>

<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>In the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to setup because the already existing external API of the microservice can often be used directly without the need to setup additional things (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>Component tests should be concise and easy to understand (see <a href="https://blog.crafties.fr/2017/09/16/how-to-write-robust-component-tests/">How to Write Robust Component Tests</a>). The goal is to test the behaviour of the microservice by writing a nominal case and very few edge cases. We noticed that writing the specification before implementing the feature can lead to very simple component tests. Moreover, it is a good practice to write the component tests in collaboration with the different stakeholders in order to cover the feature in a very efficient way.</p>

<p>In component tests, an embedded database can also be used. Moreover, it is possible to mock HTTP and AMQP clients: this is not the place to test the integration with external resources (see <a href="https://blog.crafties.fr/2017/07/23/setup-a-circuit-breaker-with-hystrix/">Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</a>).</p>

<p>An example of tools we can use to write component tests is <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> (to write the specifications) with <a href="https://cucumber.io/">Cucumber</a> (to run the tests).</p>

<p>In order to perform requests on the HTTP API of the microservice and make assertions on the response, <a href="https://blog.crafties.fr/2015/10/31/testing-spring-mvc-controllers/">MockMvc</a> can be used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ResultActions</span> <span class="n">actions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I get \&quot;([^\&quot;]*)\&quot; on the application$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetOnTheApplication</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">uri</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^I get a Response with the status code (\\d+)$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetAResponseWithTheStatusCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">statusCode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="n">statusCode</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to inject AMQP messages, the channel used by Spring Cloud Stream can also be injected directly into the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// AMQP listener code</span>
</span><span class='line'><span class="nd">@EnableBinding</span><span class="o">(</span><span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStream</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@StreamListener</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleRevision</span><span class="o">(</span><span class="n">Message</span><span class="o">&lt;</span><span class="n">MyMessageDTO</span><span class="o">&gt;</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// handle message</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Process</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Input</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span> <span class="n">SubscribableChannel</span> <span class="nf">process</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cucumber step definition</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span> <span class="n">myChannel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I publish an event with the following data:$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iPublishAnEventWithTheFollowingData</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">myChannel</span><span class="o">.</span><span class="na">process</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="n">GenericMessage</span><span class="o">&lt;&gt;(</span><span class="n">payload</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it may be important to fix the time to make tests more robust (see <a href="https://blog.crafties.fr/2017/07/20/controlling-time-in-java/">Controlling the Time in Java</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="nd">@MockBean</span> <span class="kd">private</span> <span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^The time is \&quot;([^\&quot;]*)\&quot;$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">theTimeIs</span><span class="o">(</span><span class="n">String</span> <span class="n">datetime</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ZonedDateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">datetime</span><span class="o">);</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">date</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Contract Tests</h3>

<p>The goal of contract tests is to automatically verify that the provider of a service and its consumers speak the same language. These tests do not aim to verify the behaviour of the components but simply their contracts. They are particularly useful for microservices since almost all their value lies in their interactions. It is crucial to guarantee that no provider breaks the contract used by its consumers.</p>

<p>The general idea is that consumers write tests that define the initial state of the provider, the request sent by the consumer and the expected response. The provider must provide a server in the required state. The contract will automatically be verified against this server. This implies the following:</p>

<ul>
<li>on the consumer side: contract tests are written using the HTTP client. Given a provider state, assertions are made on the HTTP response.</li>
<li>on the provider side: only the HTTP resource should be instanciated. All its dependencies should be mocked in order to provide the required state.</li>
</ul>


<p>It is important to note that contract tests should stick to the real needs of the consumer. If a field is not used by a consumer, it should not be tested in the contract test. Then, the provider is free to update or delete every field that is not used by any consumer and we are sure that if tests fail, it is for a good reason.</p>

<p>The tool we like to use to write and execute contract tests is <a href="https://docs.pact.io/">Pact</a>. It is a very mature product that has plugins for a lot of languages (JVM, Ruby, .NET, Javascript, Go, Python, etc.). Moreover, it is well integrated with Spring MVC thanks to the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-spring">DiUS pact-jvm-provider-spring plugin</a>.
During the execution of the consumer tests, contracts (called pacts) are generated in JSON format. They can be shared with the provider using a service called the <a href="https://github.com/pact-foundation/pact_broker">Pact Broker</a>.</p>

<p>This is an example of a consumer test written with the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-consumer-junit">DiUS pact-jvm-consumer-junit plugin</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_booking_request_and_get_rejection_response</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">AddressException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">RequestResponsePact</span> <span class="n">pact</span> <span class="o">=</span> <span class="n">ConsumerPactBuilder</span>
</span><span class='line'>            <span class="o">.</span><span class="na">consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">hasPactWith</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">given</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">uponReceiving</span><span class="o">(</span><span class="s">&quot;a request to book a room&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;/api/book&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;hotelId\&quot;: 1234, &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;from\&quot;: \&quot;2017-09-01\&quot;, &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;to\&quot;: \&quot;2017-09-16\&quot;&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;}&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">willRespondWith</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{ \&quot;errors\&quot; : [ \&quot;There is no room available for this booking request.\&quot; ] }&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">toPact</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PactVerificationResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">runConsumerTest</span><span class="o">(</span><span class="n">pact</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="n">mockServer</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">BookingResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">bookingClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">aBookingRequest</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getErrors</span><span class="o">()).</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;There is no room available for this booking request.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">PactVerificationResult</span><span class="o">.</span><span class="na">Ok</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the server side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RestPactRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Provider</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@PactBroker</span><span class="o">(</span>
</span><span class='line'>        <span class="n">host</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_HOST}&quot;</span><span class="o">,</span> <span class="n">port</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PORT}&quot;</span><span class="o">,</span> <span class="n">protocol</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PROTOCOL}&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">authentication</span> <span class="o">=</span> <span class="nd">@PactBrokerAuth</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_USER}&quot;</span><span class="o">,</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PASSWORD}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookingContractTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">BookingService</span> <span class="n">bookingService</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@InjectMocks</span> <span class="kd">private</span> <span class="n">BookingResource</span> <span class="n">bookingResource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@TestTarget</span> <span class="kd">public</span> <span class="kd">final</span> <span class="n">MockMvcTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MockMvcTarget</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MessagingException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">target</span><span class="o">.</span><span class="na">setControllers</span><span class="o">(</span><span class="n">bookingResource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@State</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_no_vacancy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">bookingService</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="n">eq</span><span class="o">(</span><span class="mi">1234L</span><span class="o">),</span> <span class="n">any</span><span class="o">(),</span> <span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">BookingResult</span><span class="o">.</span><span class="na">NO_VACANCY</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>End to End Tests</h3>

<p>End to end tests need the whole platform to be up and running to run entire business use cases across multiple microservices. They are very expensive and slow to run. These tests can be performed manually on a dedicated platform but have to be chosen with great care to maximize their benefits.</p>

<h2>To Sum up</h2>

<p><img class="center" src="https://rnowif.github.io/images/microservices_testing_strategy.png"></p>

<h2>Conclusion</h2>

<p>Automatic tests are very important in the software development industry. A good testing strategy can help to write more relevant, robust and maintainable tests. This article describes an example of strategy to test Java Spring Boot microservices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://rnowif.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T23:33:38+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableFeignClients</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfiguration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableFeignClients</span>
</span><span class='line'><span class="nd">@EnableCircuitBreaker</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfiguration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="n">VideoClientFallback</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallback</span> <span class="kd">implements</span> <span class="n">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Degraded service: no suggestion to offer</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">feign</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hystrix</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">,</span> <span class="n">fallbackFactory</span> <span class="o">=</span> <span class="n">VideoClientFallbackFactory</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallbackFactory</span> <span class="kd">implements</span> <span class="n">FallbackFactory</span><span class="o">&lt;</span><span class="n">VideoClient</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">VideoClient</span> <span class="nf">create</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">VideoClientFallback</span><span class="o">(</span><span class="n">throwable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallback</span> <span class="kd">implements</span> <span class="n">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Throwable</span> <span class="n">cause</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">VideoClientFallback</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">cause</span> <span class="o">=</span> <span class="n">cause</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cause</span> <span class="k">instanceof</span> <span class="n">FeignException</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">FeignException</span><span class="o">)</span> <span class="n">cause</span><span class="o">).</span><span class="na">status</span><span class="o">()</span> <span class="o">==</span> <span class="mi">404</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Treat the HTTP 404 status</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling the Time in Java]]></title>
    <link href="https://rnowif.github.io/blog/2017/07/21/controlling-time-in-java/"/>
    <updated>2017-07-21T01:06:15+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/07/21/controlling-time-in-java</id>
    <content type="html"><![CDATA[<p>Time is a tricky thing, it&rsquo;s always changing. Having such moving parts into the codebase can be very annoying when testing, for instance. In this article, we will see how to control the time in Java.</p>

<!-- more -->


<p>Let&rsquo;s take a simple example of a pizza delivery service. Its policy is that pizzas should be delivered in 10 minutes. When the customer ask for a delivery, the delivery time is automatically calculated by the system based on this policy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeliveryPolicy</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Delivery</span> <span class="nf">createDelivery</span><span class="o">(</span><span class="n">Pizza</span> <span class="n">pizza</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LocalDateTime</span> <span class="n">deliveryTime</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plus</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Delivery</span><span class="o">(</span><span class="n">pizza</span><span class="o">,</span> <span class="n">deliveryTime</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How Do we Test it?</h2>

<p>Since the time always changes we cannot test this method very precisely without changing its code. We could test that the delivery time is <em>approximatively</em> 10 minutes in the future but like all fuzzy tests, it could fail from time to time depending on the context on which it is executed.</p>

<h2>Make Dependency Visible</h2>

<p>The reason why this code is so difficult to test is that it has a hidden dependency: the clock. Since Java 8, all <code>now</code> methods of the Date API take a clock as an argument. We can then make this dependency visible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeliveryPolicy</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Clock</span> <span class="n">clock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DeliveryPolicy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">clock</span> <span class="o">=</span> <span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Delivery</span> <span class="nf">createDelivery</span><span class="o">(</span><span class="n">Pizza</span> <span class="n">pizza</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LocalDateTime</span> <span class="n">deliveryTime</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">clock</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Delivery</span><span class="o">(</span><span class="n">pizza</span><span class="o">,</span> <span class="n">deliveryTime</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dependency Injection to the Rescue</h2>

<p>Now that the dependency is out there, we can inject it in the constructor, like any other dependency, and testing this method becomes trivial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeliveryPolicy</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Clock</span> <span class="n">clock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DeliveryPolicy</span><span class="o">(</span><span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">clock</span> <span class="o">=</span> <span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Delivery</span> <span class="nf">createDelivery</span><span class="o">(</span><span class="n">Pizza</span> <span class="n">pizza</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LocalDateTime</span> <span class="n">deliveryTime</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">clock</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Delivery</span><span class="o">(</span><span class="n">pizza</span><span class="o">,</span> <span class="n">deliveryTime</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeliveryPolicyTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_schedule_delivery_ten_minutes_later</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ZonedDateTime</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;+01&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">DeliveryPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DeliveryPolicy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">now</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Delivery</span> <span class="n">delivery</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">createDelivery</span><span class="o">(</span><span class="k">new</span> <span class="nf">Pizza</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LocalDateTime</span> <span class="n">tenMinutesLater</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">delivery</span><span class="o">.</span><span class="na">getDeliveryTime</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">tenMinutesLater</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage with Spring Framework and Spring Boot</h2>

<p>If you use Spring Framework in your application, you can create a <code>ClockProvider</code> bean that will give the default Clock. Moreover, if you use Spring Boot, it allows you to mock this bean very easily in integration tests with the <code>@MockBean</code> annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeliveryPolicyIT</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@MockBean</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">DeliveryPolicy</span> <span class="n">policy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_schedule_delivery_ten_minutes_later</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ZonedDateTime</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;+01&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">now</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Delivery</span> <span class="n">delivery</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">createDelivery</span><span class="o">(</span><span class="k">new</span> <span class="nf">Pizza</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LocalDateTime</span> <span class="n">tenMinutesLater</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">delivery</span><span class="o">.</span><span class="na">getDeliveryTime</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">tenMinutesLater</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClockConfig</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Bean</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ClockProvider</span> <span class="nf">clockProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I used to think that the time, like random, was a very difficult thing to test. With the Java 8 Date API, it becomes trivial. You just have to acknowledge the dependency you have on the clock and treat it like any other dependency. Now, I almost never use a method of the Date API without passing a clock as a parameter. This allows me to control the time throughout the application very easily (in unit, integration or functional tests).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Calm and Use Git Reflog]]></title>
    <link href="https://rnowif.github.io/blog/2017/04/11/git-reflog/"/>
    <updated>2017-04-11T18:52:15+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/04/11/git-reflog</id>
    <content type="html"><![CDATA[<p>Git is a very powerful tool but it takes a fair amount of time to masterize it. It can be particuarly easy to break or lose things when you amend some commits, resolve conflicts or force push your changes.</p>

<p>In this blog post, I will show you how to use the <code>git reflog</code> command to retrieve commits that you thought you lost forever.</p>

<!-- more -->


<h2>Retrieve an amended commit</h2>

<p>The first use case I will show is when you amend a commit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ echo "Hello" &gt; hello.txt
</span><span class='line'>$ git add hello.txt && git commit -m "Add hello"
</span><span class='line'>$ echo "Hello!" &gt; hello.txt
</span><span class='line'>$ git add hello.txt && git commit --amend</span></code></pre></td></tr></table></div></figure>


<p>If you think that the first commit is lost, read on.</p>

<p>The <code>git reflog</code> command allows you to display all git commands that you performed on your repo and, most importantly, the associated commit hash. In fact, these commits are not lost, they are just not in the tree anymore but you can still check them out, cherry-pick them or do whatever you need to do.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reflog
</span><span class='line'>3e6e190 HEAD@{0}: commit (amend): Add hello
</span><span class='line'>51587bc HEAD@{1}: commit (initial): Add hello
</span><span class='line'>$ git diff 51587bc 3e6e190
</span><span class='line'>diff --git a/hello.txt b/hello.txt
</span><span class='line'>index e965047..10ddd6d 100644
</span><span class='line'>--- a/hello.txt
</span><span class='line'>+++ b/hello.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-Hello
</span><span class='line'>+Hello!</span></code></pre></td></tr></table></div></figure>


<h2>Recover an erroneous merge</h2>

<p>The second scenario is when you rebase a branch on an other one and you have conflicts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b develop
</span><span class='line'>$ git checkout master
</span><span class='line'>$ echo "Hello, world!" &gt; hello.txt
</span><span class='line'>$ git add hello.txt && git commit -m "Hello, world!"
</span><span class='line'>$ git checkout develop
</span><span class='line'>$ echo "Hello, you!" &gt; hello.txt
</span><span class='line'>$ git add hello.txt && git commit -m "Hello, you!"
</span><span class='line'>$ echo "World!" &gt; world.txt
</span><span class='line'>$ git add world.txt && git commit -m "Add world.txt"</span></code></pre></td></tr></table></div></figure>


<p>This is the resulting tree (note that the hello.txt has been modified on the two branches and there is a conflict):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* a5c7ca5 - (HEAD -&gt; develop) Hello, you!
</span><span class='line'>| * 4d016c5 - (master) Hello, world!
</span><span class='line'>|/  
</span><span class='line'>* 3e6e190 - Add hello</span></code></pre></td></tr></table></div></figure>


<p>Unsurprisingly, the <code>reflog</code> looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reflog
</span><span class='line'>21c2ce2 HEAD@{0}: commit: Add world.txt
</span><span class='line'>a5c7ca5 HEAD@{1}: commit: Hello, you!
</span><span class='line'>3e6e190 HEAD@{2}: checkout: moving from master to develop
</span><span class='line'>4d016c5 HEAD@{3}: commit: Hello, world!
</span><span class='line'>3e6e190 HEAD@{4}: checkout: moving from develop to master
</span><span class='line'>3e6e190 HEAD@{5}: checkout: moving from master to develop
</span><span class='line'>3e6e190 HEAD@{6}: commit (amend): Add hello
</span><span class='line'>51587bc HEAD@{7}: commit (initial): Add hello</span></code></pre></td></tr></table></div></figure>


<p>Now we rebase <code>develop</code> on <code>master</code> and we resolve the conflicts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase master
</span><span class='line'>// ... resolve merge conflicts</span></code></pre></td></tr></table></div></figure>


<p>The thing is that we made a mistake and took the wrong version of <code>hello.txt</code>. Since we did a rebase, we rewrote the history and we could think we lost the &ldquo;good&rdquo; version of <code>hello.txt</code>.</p>

<p><img src="https://rnowif.github.io/images/git-reflog.png"></p>

<p>In fact, the <code>reflog</code> will display a line for each commit you rebased so it is very easy to pick the one where you made a mistake.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reflog
</span><span class='line'>ae9d1d8 HEAD@{0}: rebase finished: returning to refs/heads/develop
</span><span class='line'>ae9d1d8 HEAD@{1}: rebase: Add world.txt
</span><span class='line'>4d016c5 HEAD@{2}: rebase: checkout master
</span><span class='line'>21c2ce2 HEAD@{3}: commit: Add world.txt
</span><span class='line'>a5c7ca5 HEAD@{4}: commit: Hello, you!
</span><span class='line'>$ git diff 21c2ce2
</span><span class='line'>diff --git c/hello.txt w/hello.txt
</span><span class='line'>index 624d875..af5626b 100644
</span><span class='line'>--- c/hello.txt
</span><span class='line'>+++ w/hello.txt
</span><span class='line'>@@ -1 +1 @@
</span><span class='line'>-Hello, you!
</span><span class='line'>+Hello, world!</span></code></pre></td></tr></table></div></figure>


<p>If you want to go back and fix it, you just have to check the commit out, delete the current <code>develop</code> branch (since it is not in the correct state) and create a new <code>develop</code> branch based upon the right commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout 21c2ce2
</span><span class='line'>$ git branch -D develop
</span><span class='line'>$ git checkout -b develop</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I think you got the idea, Git keeps everything that you committed. Thus, don&rsquo;t panic if you find yourself in a situation where you erase a previous commit and think about the <code>git reflog</code> command to dive into your history and look for the information you thought you lost!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trivia Kata: A Refactoring Story]]></title>
    <link href="https://rnowif.github.io/blog/2017/04/10/trivia-refactoring/"/>
    <updated>2017-04-10T18:52:15+12:00</updated>
    <id>https://rnowif.github.io/blog/2017/04/10/trivia-refactoring</id>
    <content type="html"><![CDATA[<p>Refactoring a legacy code can be a tricky business. More often than not, the code is not tested, unclear and contains some bugs. If not planned, the time required to refactor will eat all the time allocated to the feature. The feature will then be implemented very quickly and it will result in more buggy unmaintainable code.</p>

<p>In this blog post, I will try to show some tools and methods to refactor safely a piece of code. I will use the <a href="https://github.com/jbrains/trivia">trivia kata</a> as a support for this. The resulting code can be found on <a href="https://github.com/rnowif/trivia-refactoring/commits/master">GitHub</a>.</p>

<!-- more -->


<h2>Characterization Test: the Golden Master</h2>

<p>The prerequisite to any refactor is to build a test harness to be sure that the refactoring will not break anything. In this example, it could seem like a waste of time to test all possible paths with unit tests. Fortunately, the code contains a lot of traces that print what the code does. It is then possible to run the code with a set of inputs, capture the output and save it. This output is called the <em>Golden Master</em>. Every time the code is modified, the same inputs are used to run the code and the output is compared to the golden master. As you may have noticed, this will not ensure that the code is bug-free, it will just make sure that the code always <strong>behaves</strong> the same.</p>

<p>In Java, the golden master can be implemented using a library called <em>approval</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">nikolavp</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">approval</span><span class="o">-</span><span class="n">core</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">0.3</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The associated test is shown below (see <a href="https://github.com/rnowif/trivia-refactoring/commit/0c4255e69cc5395a70de417913de20c82606b0c2">commit</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_record_and_verify_golden_master</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">playGame</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Approvals</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;src&quot;</span><span class="o">,</span> <span class="s">&quot;main&quot;</span><span class="o">,</span> <span class="s">&quot;resources&quot;</span><span class="o">,</span> <span class="s">&quot;approval&quot;</span><span class="o">,</span> <span class="s">&quot;result.txt&quot;</span><span class="o">));</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">playGame</span><span class="o">(</span><span class="kt">long</span> <span class="n">seed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ByteArrayOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="k">new</span> <span class="nf">PrintStream</span><span class="o">(</span><span class="n">outputStream</span><span class="o">));</span> <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">notAWinner</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Game</span> <span class="n">aGame</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Game</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Chet&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Pat&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Sue&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">(</span><span class="n">seed</span><span class="o">);</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">aGame</span><span class="o">.</span><span class="na">roll</span><span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">9</span><span class="o">)</span> <span class="o">==</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">notAWinner</span> <span class="o">=</span> <span class="n">aGame</span><span class="o">.</span><span class="na">wrongAnswer</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">notAWinner</span> <span class="o">=</span> <span class="n">aGame</span><span class="o">.</span><span class="na">wasCorrectlyAnswered</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">notAWinner</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">outputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the code uses a <code>Random</code> to roll a dice, we have to fix the seed of the <code>Random</code> so it always returns the same random rolls in the same order (<code>1</code>). The code has to be run once with this seed and the output has to be pasted into <code>src/main/resources/approval/result.txt</code> to create the golden master (<code>2</code>). Afterwards, the test will capture the output (<code>3</code>) and compare it to the golden master. If a difference appears, a diff will prompt.</p>

<p>Sometimes during my refactoring sessions, I like to make mistakes on purpose just to check the robustness of my test harness. I find it very useful to increase the confidence you have in your tests and fix them if you have to.</p>

<h2>First Step: Clean Up</h2>

<p>Personnaly, I can&rsquo;t really think when I am in front of a bloated and unclear code. Thus, the first thing I did to refactor this piece of code is to rearrange it, delete unused imports and dead code, remove magic strings and magic numbers, use generics and reduce the visibility of fields and methods that can be reduced to be sure that I can touch them without breaking the public API. The major part of these refactorings can be made for you by your IDE so don&rsquo;t hesitate to do it as it reduces the risk of error and it is much quicker. You can also use a plugin like <a href="http://www.sonarlint.org/index.html">SonarLint</a> for instance to detect issues directly into your IDE.</p>

<p>Once the code easier to think about, I noticed that strings where used to identify categories. This seemed like a good place to create an enum (see <a href="https://github.com/rnowif/trivia-refactoring/commit/1578c0ce9d7da73641e5f4202b1a72f00ba13723">commit</a>). To start, I just replaced the strings with the enum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">askQuestion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;Pop&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">popQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;Science&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">scienceQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;Sports&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">sportsQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;Rock&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">rockQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">currentCategory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Pop&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Pop&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">8</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Pop&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Science&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Science&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">9</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Science&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Sports&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">6</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Sports&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;Sports&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Rock&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>became</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">askQuestion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Category</span><span class="o">.</span><span class="na">POP</span><span class="o">))</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">popQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Category</span><span class="o">.</span><span class="na">SCIENCE</span><span class="o">))</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">scienceQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Category</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">))</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">sportsQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">currentCategory</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Category</span><span class="o">.</span><span class="na">ROCK</span><span class="o">))</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="n">rockQuestions</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Category</span> <span class="nf">currentCategory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">POP</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">POP</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">8</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">POP</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SCIENCE</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SCIENCE</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">9</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SCIENCE</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">6</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)</span> <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Category</span><span class="o">.</span><span class="na">ROCK</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of <code>if</code> statement that looks a lot like a <code>switch</code> can almost always be replaced by a <code>Map</code> so that is what I did (see <a href="https://github.com/rnowif/trivia-refactoring/commit/b8780743929eb10ab5f8a90c9fe68c9dd3c310a9">commit</a>). I created two maps to contain questions of each category and the category for each position:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">askQuestion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">print</span><span class="o">(</span><span class="n">questionsByCategory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentCategory</span><span class="o">()).</span><span class="na">removeFirst</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Category</span> <span class="nf">currentCategory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">categoriesByPosition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPosition</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Second Step: Segregate</h2>

<p>The second step I chose to follow is to put specific logic into private methods. Once again, your IDE can help you here, use it!</p>

<p>For instance, that piece of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">print</span><span class="o">(</span><span class="n">players</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPlayer</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; is getting out of the penalty box&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">=</span> <span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">+</span> <span class="n">roll</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">NB_CELLS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">=</span> <span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]</span> <span class="o">-</span> <span class="n">NB_CELLS</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">print</span><span class="o">(</span><span class="n">players</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPlayer</span><span class="o">)</span>  <span class="o">+</span> <span class="s">&quot;&#39;s new location is &quot;</span> <span class="o">+</span> <span class="n">places</span><span class="o">[</span><span class="n">currentPlayer</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>became</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">print</span><span class="o">(</span><span class="n">players</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPlayer</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; is getting out of the penalty box&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">move</span><span class="o">(</span><span class="n">roll</span><span class="o">);</span>
</span><span class='line'><span class="n">print</span><span class="o">(</span><span class="n">players</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPlayer</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&#39;s new location is &quot;</span> <span class="o">+</span> <span class="n">currentPosition</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>By doing that, you can remove duplication by factorizing algorithms (like move a player) into specific methods. Moreover, you prepare the field for extracting objects from this code (see the next section). However, in order to do that properly, the private methods have to be in the purest form possible: they should use or modify the least amount of private fields possible (see <a href="https://github.com/rnowif/trivia-refactoring/commit/160c52d4a393fef3a58ad062fa9b552f0a9631a0">commit</a>). With that in mind, the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Category</span> <span class="nf">currentCategory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">categoriesByPosition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentPosition</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>has been replaced by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Category</span> <span class="nf">currentCategory</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">categoriesByPosition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Third Step: Divide and Conquer</h2>

<p>Now that logic has been segregated into private methods, it is pretty straightforward to extract objects from these methods.</p>

<p>In this kata, we saw that several concepts emerge: <code>Player</code>, <code>Board</code> and <code>QuestionDeck</code>. A <code>PlayerList</code> class has also been added to handle the players rotation. All these classes can be tested in isolation in order not to rely solely on the golden master anymore.</p>

<p>For instance, the following code prints the next question to ask:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">roll</span><span class="o">(</span><span class="kt">int</span> <span class="n">roll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Category</span> <span class="n">currentCategory</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="na">categoryOf</span><span class="o">(</span><span class="n">newPosition</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="s">&quot;The category is &quot;</span> <span class="o">+</span> <span class="n">currentCategory</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="n">nextQuestionAbout</span><span class="o">(</span><span class="n">currentCategory</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">nextQuestionAbout</span><span class="o">(</span><span class="n">Category</span> <span class="n">category</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">questionsByCategory</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">category</span><span class="o">).</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By creating a <code>QuestionDeck</code> object, we can have a code like this (see <a href="https://github.com/rnowif/trivia-refactoring/commit/6ae3f22923b425d51f7fb657d7236926d2149309">commit</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">roll</span><span class="o">(</span><span class="kt">int</span> <span class="n">roll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// QuestionDeck deck = new QuestionDeck(NB_QUESTIONS, CATEGORIES);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Category</span> <span class="n">currentCategory</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="na">categoryOf</span><span class="o">(</span><span class="n">newPosition</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="s">&quot;The category is &quot;</span> <span class="o">+</span> <span class="n">currentCategory</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="n">deck</span><span class="o">.</span><span class="na">nextQuestionAbout</span><span class="o">(</span><span class="n">currentCategory</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The private method <code>nextQuestionAbout</code> and the field <code>questionsByCategory</code> are no longer in the <code>Game</code> class.</p>

<p>When you extract classes from the main code, it is very important not to break the public API. It is possible to annotate some methods with <code>@Deprecated</code> though (see <a href="https://github.com/rnowif/trivia-refactoring/commit/a7c4d85c50395a0a66908eb15e3926b6d8d822de">commit</a>). A good example of this can be seen in this <a href="https://www.crafties.fr/videos/2017-02-27-episode-9-refactoring-dependances-statiques.html">video</a>.</p>

<h2>Fourth Step: Break up</h2>

<p>The last step is when we remove all deprecated methods that we introduced during the refactoring. It is not always possible to do it right after the refactoring session as we don&rsquo;t always have access to the client code that consumes our public API. In this case we do, so I removed these methods (see <a href="https://github.com/rnowif/trivia-refactoring/commit/eb7ab019f62808b589de0f6a4fcf904163fd667d">commit</a>).</p>

<p>The client code looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Game</span> <span class="n">aGame</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Game</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Chet&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Pat&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">aGame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Sue&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// aGame.roll()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>Game</code> class is not in charge of questions, board, categories and players anymore so we have to inject them into the constructor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NB_CELLS</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NB_QUESTIONS</span> <span class="o">=</span> <span class="mi">50</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="n">CATEGORIES</span> <span class="o">=</span> <span class="n">asList</span><span class="o">(</span><span class="n">Category</span><span class="o">.</span><span class="na">POP</span><span class="o">,</span> <span class="n">Category</span><span class="o">.</span><span class="na">SCIENCE</span><span class="o">,</span> <span class="n">Category</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">,</span> <span class="n">Category</span><span class="o">.</span><span class="na">ROCK</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">PLAYERS</span> <span class="o">=</span> <span class="n">asList</span><span class="o">(</span><span class="s">&quot;Chet&quot;</span><span class="o">,</span> <span class="s">&quot;Pat&quot;</span><span class="o">,</span> <span class="s">&quot;Sue&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">Game</span> <span class="n">aGame</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Game</span><span class="o">(</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Board</span><span class="o">(</span><span class="n">NB_CELLS</span><span class="o">,</span> <span class="n">CATEGORIES</span><span class="o">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">QuestionDeck</span><span class="o">(</span><span class="n">NB_QUESTIONS</span><span class="o">,</span> <span class="n">CATEGORIES</span><span class="o">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">PlayerList</span><span class="o">(</span><span class="n">PLAYERS</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// aGame.roll()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<p>Of course, as it is always the case with refactoring, I could have done more. The main risk is that <em>more</em> does not always mean <em>better</em>. A refactoring session must have a purpose and it is very important to know when to stop. It could be when you can add your new feature or fix a bug seamlessly or simply because you don&rsquo;t have any more time allocated to this task.</p>

<p>I hope that this post gave you some tools and methods to refactor your code without the fear of breaking something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi utiliser le TDD est une bonne idée pour apprendre un nouveau langage]]></title>
    <link href="https://rnowif.github.io/blog/2016/12/27/pourquoi-utiliser-le-tdd-pour-apprendre-langage/"/>
    <updated>2016-12-27T05:44:15+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/12/27/pourquoi-utiliser-le-tdd-pour-apprendre-langage</id>
    <content type="html"><![CDATA[<p>Durant ma dernière mission, j'ai eu à écrire du code dans des langages que je ne connaissais pas du tout, ou très peu (Ruby, Perl, Python, Go). J'ai donc expérimenté une technique qui consiste à apprendre un langage par les tests. Cette technique se nomme le <em>Test Driven Learning</em>.</p>

<p>L'objectif de cet article est de décrire pourquoi il peut être intéressant d'utiliser le TDD pour apprendre un nouveau langage de manière efficace.</p>

<!-- more -->


<h2>Découverte du langage</h2>

<p>Écrire un test est suffisamment complexe pour découvrir pas mal de spécificités du langage mais suffisamment simple pour ne pas avoir besoin de trop chercher.
En effet, il faut bien créer un fichier, éventuellement une classe, instancier un objet, créer et appeler une fonction, définir une variable, etc. Cependant, il est très rapidement possible d'écrire un test sans avoir besoin de connaître le langage en détail : pas besoin de boucle, de structure conditionnelle ou bien d'héritage. De plus, exécuter un test est en général bien plus simple que de déployer le code (sur un serveur ou en local) pour le tester &ldquo;à la main&rdquo;.</p>

<p>Par ailleurs, le fait de ne pas connaître le langage garantit que le test sera focalisé sur le comportement et donc totalement découplé de l'implémentation !</p>

<p>Ceci est un test en Ruby écrit avec le framework <a href="http://rspec.info/">rspec</a>. Ce test est pratiquement un copié / collé de l'exemple du tutoriel, adapté à mon contexte :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">GoogleQueryParser</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;extract query&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return the query when other parameters are set afterwards&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">parser</span> <span class="o">=</span> <span class="no">GoogleQueryParser</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;/search?q=kibana&amp;hl=fr&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;kibana&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après quelques essais, la structure est créée, le code est compilé et les tests sont lancés. L'implémentation peut commencer.</p>

<h2>Fil d'ariane</h2>

<p>Une fois le test écrit, il sert de fil rouge pour guider l'implémentation. Ceci est également vrai quand le TDD est utilisé avec un langage que l'on maîtrise mais, quand le langage est inconnu, il est plus facile de se détourner du droit chemin. Le test permet donc de se concentrer sur un objectif fixé et clairement exprimé. C'est un véritable bac à sable où il est possible d'expérimenter sans risque.</p>

<h2>Refactoring facilité</h2>

<p>Les premières lignes de code dans un nouveau langage sont rarement parfaites. Au fur et à mesure de l'apprentissage, il est possible de faire mieux. Cela tombe bien, car le TDD encourage justement à écrire une première implémentation qui fait seulement passer le test et refactorer ensuite.</p>

<p>Sans test, la découverte d'un nouveau langage peut être périlleuse. En effet, il est très simple d'écrire du code &ldquo;qui marche&rdquo; et de ne surtout plus le toucher après, de peur de tout casser. Dès son écriture, ce code est donc voué à être un fardeau pour toute l'équipe.</p>

<h2>Conclusion</h2>

<p>J'ai très souvent entendu des gens dire qu'ils ne faisaient pas de TDD car ils ne maîtrisaient pas assez le langage. Je pense au contraire que le TDD est un excellent moyen pour apprendre un langage ou un paradigme. Il permet de s'assurer un harnais de sécurité et d'expérimenter sans aucun risque. Tous les avantages du TDD semblent exacerbés lorsque le langage cible est peu ou pas connu. En somme, je pense qu'avoir appris le Ruby par le TDD m'a permis d'être à la fois meilleur en Ruby <strong>et</strong> en TDD, tout en étant bien plus productif, malgré le gap technique.</p>

<p>Si vous souhaitez aller plus loin dans le TDL, je vous conseille de lire l'<a href="https://ldez.github.io/blog/2015/12/04/test-driven-learning-go/">article</a> de <a href="https://twitter.com/ludnadez">Ludovic Fernandez</a>, où il apprend le Go par les tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un mécanisme d’AOP, sans framework !]]></title>
    <link href="https://rnowif.github.io/blog/2016/11/03/aop-sans-framework/"/>
    <updated>2016-11-03T19:55:27+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/11/03/aop-sans-framework</id>
    <content type="html"><![CDATA[<p>L'<em>Aspect Oriented Programming</em> est un paradigme de programmation qui permet de traiter les préoccupations transverses (ou <em>cross cutting concerns</em> en anglais) telles que le logging, le cache ou les transactions séparément du code métier.</p>

<p>L'AOP repose la plupart du temps sur l'utilisation de librairies ou de frameworks qui rendent ce type de programmation assez obscur et parfois difficile à comprendre. L'objectif de cet article est d'expliquer comment cela fonctionne afin de le démystifier.</p>

<!-- more -->


<p>L'ensemble du code montré dans cet article est accessible sur ce repo <a href="https://github.com/rnowif/demo-aop">GitHub</a>.</p>

<h2>Pourquoi l'AOP ?</h2>

<p>Pour cet article, nous allons partir d'une classe qui implémente la suite de Fibonacci et dont on veut calculer le temps d'exécution.
De manière naïve, il serait possible de calculer et logger ce temps d'exécution directement dans la méthode (<a href="https://github.com/rnowif/demo-aop/tree/63660763cdb1f1d97e3ba63e9c5a271a60d53a99">voir le commit</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FibonacciCalculatorImpl</span> <span class="kd">implements</span> <span class="n">FibonacciCalculator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOG</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">FibonacciCalculatorImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StopWatch</span> <span class="n">watch</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StopWatch</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">());</span>
</span><span class='line'>        <span class="n">watch</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Start calculation for number {}&quot;</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;End calculation for number {} ({} ms)&quot;</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">watch</span><span class="o">.</span><span class="na">elapsed</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code pose plusieurs problèmes : le <em>tangling</em> et le <em>scattering</em>.</p>

<h3><em>Code tangling</em></h3>

<p>Le <em>code tangling</em> signifie que le code contient différentes notions qui sont mélangées : la mesure du temps et le métier. On pourrait en imaginer d'autres comme la gestion des transactions, le cache ou le monitoring.</p>

<p>Ceci est problématique car le code métier, qui apporte la vraie valeur, est noyé dans du code de &ldquo;plomberie&rdquo; qui peut finir par prendre beaucoup plus de place que le code initial !</p>

<h3><em>Code scattering</em></h3>

<p>Le <em>code scattering</em> signifie que le code non métier sera sans nul doute réécrit dans beaucoup de méthodes. On voit alors émerger un grand nombre de duplications de code, qui le rendent très difficile à maintenir.</p>

<h2>Le pattern <em>Proxy</em></h2>

<p>La première amélioration évidente qu'il est possible d'apporter est d'extraire la logique de calcul du temps dans une classe spécifique, qui va implémenter la même interface que <code>FibonacciCalculatorImpl</code> et déléguer l'appel de la méthode <code>calculate</code> à une instance de <code>FibonacciCalculatorImpl</code>. Il s'agit du pattern <em>Proxy</em> (<a href="https://github.com/rnowif/demo-aop/tree/a4d00f2b5b0a2cb28196a738ece906560546bda5">voir le commit</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimedFibonacciCalculator</span> <span class="kd">implements</span> <span class="n">FibonacciCalculator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOG</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">FibonacciCalculatorImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">FibonacciCalculator</span> <span class="n">calculator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TimedFibonacciCalculator</span><span class="o">(</span><span class="n">FibonacciCalculator</span> <span class="n">calculator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StopWatch</span> <span class="n">watch</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StopWatch</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">());</span>
</span><span class='line'>        <span class="n">watch</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Start calculation for number {}&quot;</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="c1">// Delegate calculation</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;End calculation for number {} ({} ms)&quot;</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">watch</span><span class="o">.</span><span class="na">elapsed</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>L'utilisation de cette classe se fait comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FibonacciCalculator</span> <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TimedFibonacciCalculator</span><span class="o">(</span><span class="k">new</span> <span class="nf">FibonacciCalculatorImpl</span><span class="o">());</span>
</span><span class='line'><span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;10th fibonacci number : {}&quot;</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>L'utilisation de ce pattern règle le problème du <em>code tangling</em> mais pas du tout celui du <em>code scattering</em>. En effet, cette classe <code>TimedFibonacciCalculator</code> n'est pas vraiment réutilisable car elle est fortement couplée à l'interface <code>FibonacciCalculator</code>.</p>

<h2>Externalisation de la logique de chronométrage</h2>

<p>Pour résoudre le <em>code scattering</em>, il faut extraire la logique de mesure du temps et lui permettre d'appeler n'importe quelle méthode (<a href="https://github.com/rnowif/demo-aop/tree/fb545b1a3af8e34b37e8f93f4abf97b57ae75f33">voir le commit</a>). On peut, pour cela, définir une interface fonctionnelle générique qui contient une méthode <code>invoke</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">InvocationPoint</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="nf">invoke</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette interface pourra alors être injectée dans une classe réutilisable, permettant de mesurer le temps nécessaire à l'exécution de la méthode <code>invoke</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimedInvocation</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOG</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">TimedInvocation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">InvocationPoint</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">invocationPoint</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StopWatch</span> <span class="n">watch</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StopWatch</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">());</span>
</span><span class='line'>        <span class="n">watch</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Start calculation&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">result</span> <span class="o">=</span> <span class="n">invocationPoint</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;End calculation ({} ms)&quot;</span><span class="o">,</span> <span class="n">watch</span><span class="o">.</span><span class="na">elapsed</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <em>proxy</em> ne sert donc plus que de passe-plat pour appeler cette classe (l'interface <code>InvocationPoint</code> peut aisément être implémentée par un lambda):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimedFibonacciCalculator</span> <span class="kd">implements</span> <span class="n">FibonacciCalculator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">FibonacciCalculator</span> <span class="n">calculator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TimedFibonacciCalculator</span><span class="o">(</span><span class="n">FibonacciCalculator</span> <span class="n">calculator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">TimedInvocation</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span>
</span><span class='line'>                <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">calculator</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarque ici que le message de log est plus générique : il n'est plus possible de tracer l'index de la suite que l'on veut calculer. En effet, ce log est très générique et peut permettre de mesurer le temps d'exécution de n'importe quelle méthode.</p>

<h2>Génération automatique de <em>proxy</em></h2>

<p>Le <em>tangling</em> et le <em>scattering</em> sont éliminés mais il faut tout de même créer une classe de <em>proxy</em> pour chaque méthode que l'on souhaite chronométrer. Le mécanisme de <em>JDKProxy</em>, inclus directement dans le JDK, permet de créer des <em>proxys</em> dynamiques à partir d'une interface (<code>FibonacciCalculator</code>) et d'une implémentation de <code>InvocationHandler</code> (<a href="https://github.com/rnowif/demo-aop/tree/88dda77b942cc9370762d3e2efb79b6b9c0c6aeb">voir le commit</a>). Celle-ci contient une méthode <code>invoke(Object proxy, Method method, Object[] args): Object</code> qui prend en paramètre le proxy, la méthode qui a été apelée ainsi que ses arguments et doit retourner le résultat de l'appel de la méthode.</p>

<p>Le plus simple des <code>InvocationHandler</code>, qui ne fait rien, peut s'écrire comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SimpleInvocationHandler</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La création du proxy se fait ainsi :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FibonacciCalculator</span> <span class="n">calculator</span> <span class="o">=</span> <span class="o">(</span><span class="n">FibonacciCalculator</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span>
</span><span class='line'>  <span class="n">FibonacciCalculator</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span><span class="n">FibonacciCalculator</span><span class="o">.</span><span class="na">class</span><span class="o">},</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">SimpleInvocationHandler</span><span class="o">(</span><span class="k">new</span> <span class="nf">FibonacciCalculatorImpl</span><span class="o">())</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans notre cas, le handler va devoir calculer le temps d'exécution de la méthode. Il s'écrit donc ainsi :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimedInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TimedInvocationHandler</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">TimedInvocation</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span>
</span><span class='line'>                <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Activer ou désactiver la mesure du temps</h2>

<p>Pour faire comme les pros (sic !), il est possible d'activer ou désactiver la mesure du temps sur une méthode en y ajoutant une annotation <code>@Timed</code> qui servira de marqueur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FibonacciCalculatorImpl</span> <span class="kd">implements</span> <span class="n">FibonacciCalculator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Timed</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">calculate</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le handler, il suffit alors d'utiliser la reflection pour déterminer si la méthode est annotée ou non, et mesure le temps en conséquence :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimedInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">Timed</span><span class="o">&gt;</span> <span class="n">ANNOTATION_CLASS</span> <span class="o">=</span> <span class="n">Timed</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TimedInvocationHandler</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isTimed</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">TimedInvocation</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span>
</span><span class='line'>                    <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Method not annotated, just invoke target</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isTimed</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Is timed if the interface method or the target method is annotated</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">getDeclaredAnnotation</span><span class="o">(</span><span class="n">ANNOTATION_CLASS</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">method</span><span class="o">.</span><span class="na">getParameterTypes</span><span class="o">()).</span><span class="na">getDeclaredAnnotation</span><span class="o">(</span><span class="n">ANNOTATION_CLASS</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour rappel, une annotation n'est qu'un marqueur. La magie n'est pas dans l'annotation mais dans le code qui l'utilise !</p>

<h2>Conclusion</h2>

<h3>A propos de l'AOP</h3>

<p>Cet article a, de manière assez rudimentaire, permis d’implémenter un mécanisme d’AOP sans avoir recours à aucun framework externe. Néanmoins, il permet de comprendre certains aspects et limitations de l’AOP.</p>

<p>En effet, il est très simple de créer des proxys dynamiques avec JDKProxy lorsque la classe cible implémente une interface. Lorsque ce n’est pas le cas, le proxy doit étendre cette classe et surcharger la méthode à proxifier (il est possible d’utiliser une librairie comme <a href="https://github.com/cglib/cglib">CGLib</a> pour faire ça automatiquement).
Par aileurs, l’AOP implémenté grâce à ce mécanisme ne peut pas fonctionner sur des méthodes ou des classes privées ou finales. En effet, la méthode doit être définie dans une interface ou pouvoir être surchargée. De plus, si la classe à proxifier appelle directement une méthode de sa propre classe, notre AOP ne s’applique pas. Ici, la méthode calculate est récursive. Cependant, la mesure du temps ne s’opère que si la méthode est appelée à travers le proxy. Donc, seul l’appel de la méthode par &ldquo;l’extérieur&rdquo; est chronométré.</p>

<p>Certains autres mécanismes permettent de s’affranchir de ces contraintes en modifiant directement le code généré. Cette opération, appelée tissage, peut être effectuée à la compilation ou au runtime grâce à des librairies et instrumentations diverses.</p>

<h3>AspectJ et Spring AOP</h3>

<p><a href="http://www.eclipse.org/aspectj/">AspectJ</a> est un framework qui permet de faire de l’AOP grâce au tissage. Spring, quant à lui, utilise abondamment l’AOP grâce au mécanisme de proxy décrit dans cet article (avec les annotations <code>@Transactional</code>, <code>@Cacheable</code>, etc.). Il va parcourir l’ensemble des beans du contexte d’application et les remplacer par des <em>proxys</em> dynamiques. Ainsi, les beans que l’application manipule ne sont pas les implémentations brutes, mais des proxys (plus d’information sur les <em>proxys</em> AOP avec Spring <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-understanding-aop-proxies">ici</a>). Spring permet également de faire de l’AspectJ.</p>

<h3>Note finale</h3>

<p>L'AOP n'est pas magique, ni très complexe. Cependant, il est très fortement utilisé dans les framework de type Spring. Une bonne compréhension de ses mécanismes et de son implémentation permet de faciliter grandement le dévelopement et le debug des applications d'entreprise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests plus robustes au changement]]></title>
    <link href="https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement/"/>
    <updated>2016-11-03T05:31:42+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/11/03/ecrire-des-tests-plus-robustes-au-changement</id>
    <content type="html"><![CDATA[<p>Un des principaux freins à l'écriture de tests est quand ceux-ci doivent être mis à jour à chaque fois qu'une classe ou qu'une méthode est modifiée. Parfois, les tests à mettre à jour n'ont rien à voir avec la classe ou la méthode modifiée, mais comme ils s'en servent, ils s'en retrouvent affectés eux aussi. Ce problème survient quand le test est trop couplé à l'implémentation.
Dans cet article, nous allons voir comment découpler les tests des classes qu'ils utilisent et ainsi les rendre plus robustes.</p>

<!-- more -->


<h2>Méthode 0 : La méthode naïve</h2>

<p>Soit une classe qui doit tester si une personne a accès à une ressource ou non. L'API de la classe <code>Person</code> est maintenue par une autre équipe et est donc hors de contrôle.
La façon la plus naïve d'écrire le test pourrait être la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_underaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">kid</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>  <span class="n">kid</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">17</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">kid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si l'API de la classe <code>Person</code> évolue et prend l'âge directement en paramètre du constructeur, ce test ne compilera plus et devra être réécrit, ainsi que tous les autres tests qui instancient directement une <code>Person</code>.</p>

<h2>Méthode 1 : Utilisation d'une méthode de création</h2>

<p>La première solution serait d'utiliser une méthode de création partagée par tous les tests de la classe :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_underaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">kid</span> <span class="o">=</span> <span class="n">newPerson</span><span class="o">(</span><span class="mi">17</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">kid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Person</span> <span class="nf">newPerson</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>  <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">17</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ici, si l'API de <code>Person</code> change, seule la méthode est affectée. Tous les tests passeront sans difficulté une fois cette méthode modifiée.</p>

<p>Maintenant, la politique d'autorisation évolue pour refuser les mineurs, mais également les garçons (même majeurs). Le test devient alors :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_underaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">kid</span> <span class="o">=</span> <span class="n">newPerson</span><span class="o">(</span><span class="mi">17</span><span class="o">,</span> <span class="n">Gender</span><span class="o">.</span><span class="na">FEMALE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">kid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_male_and_overaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">maleAdult</span> <span class="o">=</span> <span class="n">newPerson</span><span class="o">(</span><span class="mi">18</span><span class="o">,</span> <span class="n">Gender</span><span class="o">.</span><span class="na">MALE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">maleAdult</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Person</span> <span class="nf">newPerson</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">Gender</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>  <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</span><span class='line'>  <span class="n">person</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="n">gender</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarque que le premier test a été modifié, bien que le sexe de la personne ne soit pas pertinent dans ce cas. Le code du premier test est donc moins expressif sur la règle métier testée. Si on augmente le nombre de paramètres dans la méthode <code>newPerson</code> l'expressivité et la robustesse des tests décroit de plus en plus. De plus, la méthode <code>newPerson</code> n'est pas directement réutilisable dans les autres classes de test.</p>

<h2>Méthode 2 : Utilisation d'un builder</h2>

<p>Cette méthode consiste à utiliser un <code>Builder</code> pour permettre de construire une instance de <code>Person</code> personnalisable à la demande.</p>

<p>Il suffit de créer une classe <code>PersonBuilder</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonBuilder</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Gender</span> <span class="n">gender</span> <span class="o">=</span> <span class="n">Gender</span><span class="o">.</span><span class="na">FEMALE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">PersonBuilder</span> <span class="nf">aPerson</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">PersonBuilder</span> <span class="nf">withAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">PersonBuilder</span> <span class="nf">withGender</span><span class="o">(</span><span class="n">Gender</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">gender</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Person</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">();</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="n">gender</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">person</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les tests deviennent alors :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_underaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">kid</span> <span class="o">=</span> <span class="n">aPerson</span><span class="o">().</span><span class="na">withAge</span><span class="o">(</span><span class="mi">17</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">kid</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_deny_access_when_male_and_overaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">maleAdult</span> <span class="o">=</span> <span class="n">aPerson</span><span class="o">().</span><span class="na">withAge</span><span class="o">(</span><span class="mi">18</span><span class="o">).</span><span class="na">withGender</span><span class="o">(</span><span class="n">Gender</span><span class="o">.</span><span class="na">MALE</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="n">AuthorizationPolicy</span> <span class="n">policy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AuthorizationPolicy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Authorization</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="na">authorize</span><span class="o">(</span><span class="n">maleAdult</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">authorization</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="n">Authorization</span><span class="o">.</span><span class="na">DENY</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Désormais, les tests sont bien plus clairs sur leur intention car seuls les attributs nécessaires sont spécifiés. Les autres peuvent être <code>null</code> ou avoir des valeurs par défaut (ici, le sexe est féminin par défaut par exemple). De plus, la logique d'instanciation d'une <code>Person</code> est située à un seul endroit dans les tests et seul le builder serait affecté si l'API venait à changer.</p>

<h2>Conclusion</h2>

<p>Les méthodes décrites dans cet article permettent de découpler les tests des logiques d'instanciation des objets nécessaires. Elles sont particulièrement utiles lors de l'utilisation d'API tierces qui ne sont pas toujours très stables ni très bien conçues. Grâce à elles, les tests sont plus expressifs, plus robustes et plus concis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timelion, le petit nouveau de Kibana 5]]></title>
    <link href="https://rnowif.github.io/blog/2016/10/27/timelion/"/>
    <updated>2016-10-27T09:26:16+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/10/27/timelion</id>
    <content type="html"><![CDATA[<p>Elastic vient de sortir <a href="https://www.elastic.co/blog/elastic-stack-5-0-0-released">sa dernière mouture de la stack Elastic</a>. Il s'agit de la version 5 et, pour la première fois, tous les produits ont une version commune. Cette nouvelle version vient avec son lot de nouveautés. Dans cet article, nous allons nous concentrer sur les nouveautés apportées à Kibana, et principalement Timelion.</p>

<p>Les exemples sont tirés de métriques fournies par le plugin <a href="https://www.elastic.co/guide/en/beats/metricbeat/5.0/metricbeat-getting-started.html">MetricBeat</a>, qui remplace TopBeat dans la version 5 de la stack.</p>

<!-- more -->


<h2>Généralités</h2>

<p>Au lancement de Kibana, on remarque tout d'abord le changement visuel. Le menu est désormais à gauche, les icônes un peu cryptiques de Kibana 4 pour ajouter, sauvegarder ou ouvrir des éléments sont remplacées par des boutons avec du texte et les contours des visualisations dans les dashboards sont supprimés. Pour le reste, on retrouve assez vite ses habitudes de Kibana 4.</p>

<p><img class="center" src="https://rnowif.github.io/images/kibana_new_look.png"></p>

<p>Les principales évolutions tiennent dans l'ajout des plugins <a href="https://www.elastic.co/guide/en/sense/current/introduction.html">Sense</a> et <a href="https://www.elastic.co/fr/blog/timelion-timeline">Timelion</a> (prononcez <em>timeline</em>). Ces modules ne sont pas nouveaux mais ils sont désormais intégrés de base dans Kibana.</p>

<h2>Timelion</h2>

<h3>Présentation</h3>

<p>Timelion permet d'afficher des courbes décrites par un langage particulier. Pour accéder à cette fonctionnalité, il faut cliquer sur l'icône avec une tête de lion.</p>

<p><img class="center" src="https://rnowif.github.io/images/timelion_intro.png"></p>

<p>La requête décrivant la courbe à afficher est présente dans le champ au dessus de la courbe. La requête de base est <code>.es(*)</code>. Cela va afficher le nombre total d'événements reçus au fil du temps. La datasource <code>.es</code> (ou <code>.elasticsearch</code>) permet d'effectuer une <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html">requête lucène</a> dans l'index elasticsearch par défaut. Il est possible de spécifier l'index et la requête de cette manière :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(index='metricbeat-*', q='*')</span></code></pre></td></tr></table></div></figure>


<p><em>NB : Il existe plusieurs datasources en plus de Elasticsearch, notamment Graphite, <a href="https://www.quandl.com/">Quandl</a> et <a href="http://data.worldbank.org/">WorldBank</a></em></p>

<h3>Afficher une courbe</h3>

<p>Si on veut afficher une métrique plutôt que le nombre d'événements, il est possible d'ajouter un attribut <code>metric</code> à la requête. Les métriques disponibles sont <code>avg</code>, <code>sum</code>, <code>min</code>, <code>max</code> et <code>cardinality</code> (nombre de valeurs distinctes). Par exemple, pour afficher l'évolution de la consommation CPU de java, il faut effectuer la requête suivante :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct')</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://rnowif.github.io/images/evolution_cpu_java.png"></p>

<p>Timelion affiche la requête en label de la courbe, ce qui n'est pas très lisible ici. Il est donc possible de fournir sont propre label avec la fonction <code>label()</code> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java')</span></code></pre></td></tr></table></div></figure>


<h3>Afficher plusieurs courbes</h3>

<p>Maintenant, on aimerait afficher également le nombre d'événements qui arrivent afin de chercher une éventuelle corrélation entre la consommation CPU et la charge d'événements. Pour ce faire, il suffit d'ajouter à la requête une deuxième datasource, afin de récupérer ce nombre d'événements. Cependant, les deux échelles n'ont rien à voir, il faut donc ajouter une deuxième axe y avec la fonction <code>yaxis</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java'), .es(*).yaxis(yaxis=2).label('Evénements')</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://rnowif.github.io/images/java_cpu_vs_events.png"></p>

<p>Les variations de la courbe des événements n'est pas très visible, on va donc fixer un seuil minimal à l'axe y pour y voir plus clair, avec la propriété <code>min</code> de <code>yaxis</code>. Avec un titre en plus (fonction <code>title</code>) et des couleurs fixes (fonction <code>color</code>), le graphe est prêt à mettre dans un dashboard.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(q='metricset.name:process AND system.process.name:java', metric='sum:system.process.cpu.total.pct').label('Consommation CPU Java').color('#F00'), .es(*).yaxis(yaxis=2, min=330).label('Evénements').color('#00F').title('Consommation CPU vs Evénements')</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://rnowif.github.io/images/cpu_vs_events_final.png"></p>

<p>Visiblement, la charge n'est pas suffisante pour voir une corrélation entre la consommation CPU et le nombre d'événements.</p>

<h3>Opérer sur des courbes</h3>

<p>Timelion propose également de faire des opérations entre les courbes. Par exemple, il est possible de suivre la taille moyenne des paquets qui arrivent par l'interface <em>lo</em> en divisant (avec la fonction <code>divide</code>) le volume moyen qui transite par le nombre moyen de paquets.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(q='metricset.name:network AND system.network.name:lo', metric='avg:system.network.in.bytes').divide(.es(q='metricset.name:network AND system.network.name:lo', metric='avg:system.network.in.packets')).label('Taille moyenne des paquets')</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="https://rnowif.github.io/images/avg_packet_size.png"></p>

<p><em>NB : Il existe de nombreuses opérations qu'il est possible d'utiliser pour traiter les courbes : <code>abs</code>, <code>movingaverage</code>, <code>multiply</code>, <code>subtract</code>, <code>sum</code>, etc. Se référer à la <a href="https://github.com/elastic/timelion/blob/master/FUNCTIONS.md">documentation complète</a> pour plus d'informations</em></p>

<h2>Conclusion</h2>

<p>Kibana 5 est assez agréable à utiliser mais ne change pas radicalement l'expérience utilisateur par rapport à la version 4. Les retouches graphiques sont appréciables mais les évolutions réellement impactantes sont à chercher du coté des plugins Sense et Timelion. Ce dernier est un outil très puissant pour mettre des courbes de différentes sources en corrélation (ou d'index différents dans un même cluster Elasticsearch) et je suis sûr que vous trouverez des tas de cas d'usage bien plus pertinents que ceux que j'ai pu montrer dans cet article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quoi de neuf dans Spring 5]]></title>
    <link href="https://rnowif.github.io/blog/2016/07/31/quoi-de-neuf-dans-spring-5/"/>
    <updated>2016-07-31T00:05:38+12:00</updated>
    <id>https://rnowif.github.io/blog/2016/07/31/quoi-de-neuf-dans-spring-5</id>
    <content type="html"><![CDATA[<p>Juergen Hoeller a annoncé hier <a href="https://spring.io/blog/2016/07/28/spring-framework-5-0-m1-released">la sortie de Spring 5.0 M1</a>. Cette nouvelle version majeure de Spring arrive avec son lot de nouveautés.
L'objectif de cet article est de découvrir ces nouveautés et ce qu'elles peuvent apporter aux développeurs Spring. Les nouveautés décrites dans cet article sont déjà disponibles dans la version 5.0.M1.</p>

<!-- more -->


<h2>Modification des prérequis</h2>

<p>Spring 5 étant une version majeure, l'équipe s'est permise de modifier les pré-requis et d'abandonner le support pour des librairies obsolètes. A noter que la version 4.3 est supportée jusqu'en 2020 environ pour ceux qui ne pourraient pas mettre à jour leur application.</p>

<h3>Java 8 et Java 9</h3>

<p>Le changement principal au niveau des prérequis est la réécriture partielle de Spring en Java 8. De fait, il n'est pas possible d'utiliser Spring 5 avec une version antérieure de Java. Ce changement a ravi les développeurs Spring, comme on peut s'en douter (Spring 4.3 était en effet développé pour être compatible avec Java 6 !).</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Current status: working in the <a href="https://twitter.com/springframework">@springframework</a> codebase with Java8 - I so much feel like a kid in a candy store right now!</p>&mdash; Stéphane Nicoll (@snicoll) <a href="https://twitter.com/snicoll/status/750332049492500480">July 5, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Le passage à Java 8 a permis d'ajouter des méthodes par défaut à certaines interfaces centrales de Spring. Par exemple, l'interface <code>BeanPostProcessor</code>, qui permet de pouvoir modifier un bean après son instanciation, voit ses deux méthodes retourner le bean initial par défaut. Il est ainsi possible d'implémenter seulement <code>postProcessBeforeInitialization</code>, qui modifie le bean avant l'appel de la méthode <code>@PostConstruct</code>, ou bien seulement <code>postProcessAfterInitialization</code>, qui modifie le bean après l’appel de la méthode <code>@PostConstruct</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BeanPostProcessor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">default</span> <span class="n">Object</span> <span class="nf">postProcessBeforeInitialization</span><span class="o">(</span><span class="n">Object</span> <span class="n">bean</span><span class="o">,</span> <span class="n">String</span> <span class="n">beanName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">BeansException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bean</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">default</span> <span class="n">Object</span> <span class="nf">postProcessAfterInitialization</span><span class="o">(</span><span class="n">Object</span> <span class="n">bean</span><span class="o">,</span> <span class="n">String</span> <span class="n">beanName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">BeansException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bean</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De plus, Java 8 a aussi introduit les lambdas, qui sont désormais utilisées dans les API Spring, comme par exemple le message d'erreur des méthodes de la classe <code>org.springframework.util.Assert</code> qui peut être évalué de manière <em>lazy</em> grâce à un <code>Supplier</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Assert</span><span class="o">.</span><span class="na">isTrue</span><span class="o">(</span><span class="n">contextPath</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">),</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="s">&quot;contextPath &#39;&quot;</span> <span class="o">+</span> <span class="n">contextPath</span> <span class="o">+</span> <span class="s">&quot;&#39; must start with &#39;/&#39;.&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour le moment, Java 8 est utilisé avec parcimonie mais nul doute que son usage va se généraliser dans les mois à venir pour améliorer l'expérience développeur des utilisateurs de Spring.</p>

<h4>Java 7</h4>

<p>Comme dit ci-dessus, Spring était compatible avec Java 6 jusqu'à la version 4, le passage à Java 8 a donc également permis de mettre à jour la base de code pour utiliser les fonctionnalités Java 7 (qui sont principalement des sucres syntaxiques) comme par exemple l'opérateur diamant, le <em>multicatch</em>, le <em>try-with-resources</em> ou l'utilisation de <code>StandardCharsets</code> au lieu de <code>String</code> pour définir les encodages.</p>

<h4>Java 9</h4>

<p>Finalement, Spring 5 continue de suivre les avancées de Java 9 pour rester le plus à jour possible dans son support. Par exemple, en Java 9, la méthode <code>Class.newInstance()</code> est dépréciée au profit de <code>Constructor.newInstance()</code> qui retourne une exception <code>InvocationTargetException</code> au lieu de propager l'exception utilisateur. Les classes Spring qui doivent instancier des beans arbitraires devront donc utiliser la nouvelle façon de faire.</p>

<h3>JPA 2.1 et Hibernate 5</h3>

<p>JPA 2.1 a presque 4 ans. Spring 5 essaie d'éviter les compromis avec la compatibilité et a donc établi JPA 2.1 comme prérequis. De fait, Hibernate 5 est obligatoire.</p>

<h3>Abandon du support</h3>

<p>Dans la même logique d'alléger le support pour des librairies obsolètes ou pas à jour, Spring 5 abandonne le support pour de nombreuses librairies dont PortletMVC, JDO, Guava caching, JasperReports, OpenJPA, Tiles 2, XMLBeans, Velocity.</p>

<h2>Programmation réactive</h2>

<p>La programmation réactive a le vent en poupe en ce moment et Spring 5 n'échappe pas à la règle. Le projet Spring Reactive a été mergé dans Spring Framework et permet désormais d'utiliser ses capacités dans Spring. De fait, Spring 5 permet désormais de sérialiser et désérialiser en XML (JAXB) et en Json (Jackson) de manière réactive et fournit un framework web et un <code>WebClient</code> réactifs.</p>

<p>Le framework Spring Web Reactive et le bien connu Spring Web MVC ne partagent pas de code car le paradigme de programmation est fondamentalement différent. Cependant, l'API est très proche, pour une plus grande cohérence et une prise en main plus rapide pour les utilisateurs de ce framework.</p>

<p>Voici par exemple à quoi ressemble un controller qui stream des données depuis un serveur de manière non bloquante et réactive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&quot;/accounts/{id}/alerts&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Flux</span><span class="o">&lt;</span><span class="n">Alert</span><span class="o">&gt;</span> <span class="nf">getAccountAlerts</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">getAccount</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">account</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">webClient</span>
</span><span class='line'>              <span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/alerts/{key}&quot;</span><span class="o">,</span> <span class="n">account</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span>
</span><span class='line'>              <span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">bodyStream</span><span class="o">(</span><span class="n">Alert</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour en savoir plus sur la programmation réactive avec Spring, se référer aux billets de blog <a href="https://spring.io/blog/2016/07/28/reactive-programming-with-spring-5-0-m1">Reactive Programming with Spring 5.0 M1</a> et <a href="https://spring.io/blog/2016/04/19/understanding-reactive-types">Understanding Reactive types</a>.</p>

<p>Pour information, un starter <em>Reactive Web</em> a été ajouté au <a href="http://start.spring.io">starter Spring Boot</a> en version 1.4+ de Spring Boot. Plus d'informations <a href="https://github.com/bclozel/spring-boot-web-reactive">ici</a>.</p>

<h2>Tests</h2>

<p>Finalement, Spring 5 a ajouté le support de JUnit 5, notamment grâce à l'ajout d'une <a href="http://junit.org/junit5/docs/current/user-guide/#extensions">extension</a> Spring, à utiliser avec <code>@ExtendWith(SpringExtension.class)</code> ou alors <code>@SpringJUnitConfig</code> qui combine <code>@ExtendWith(SpringExtension.class)</code> et <code>@ContextConfiguration</code>.</p>

<h2>Conclusion</h2>

<p>Spring 5 est une version majeure de Spring et l'équipe de développement en a profité pour faire un grand ménage dans les dépendances et les librairies supportées. Cette version permet de profiter pleinement des nouvelles fonctionnalités de Java sans la frustration parfois apportée par la rétro-compatibilité. De plus, la fusion de Spring Reactive dans le framework offre aux développeurs un outil extrêmement puissant pour tirer bénéfice de la programmation réactive avec Spring.</p>

<p>Pour information, la version RELEASE est prévue pour mars 2017.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand ne pas mocker]]></title>
    <link href="https://rnowif.github.io/blog/2016/04/14/quand-ne-pas-mocker/"/>
    <updated>2016-04-14T06:55:56+12:00</updated>
    <id>https://rnowif.github.io/blog/2016/04/14/quand-ne-pas-mocker</id>
    <content type="html"><![CDATA[<p>En tant que <em>Test Driven Developer</em> et plutôt adepte de l'école de TDD de Londres, j'ai tendance à utiliser un nombre assez important de <em>mocks</em> quand je teste mon code. Cependant, il y a des cas où je trouve plus utile de ne <strong>pas</strong> en utiliser.</p>

<p>L'objectif de cet article est de décrire ces cas ainsi que la façon de tester le code sans utiliser de <em>mocks</em>.</p>

<!-- more -->


<h2>Bases de données</h2>

<p>Quand je traite directement avec une base de données, la seule chose qui m'importe est si le code interagit correctement avec elle ou non. A part quelques cas particuliers d'optimisation ou de protection contre les injections SQL, la requête elle-même n'a que très peu d'importance.<br/>
Je préfère donc utiliser une vraie base de données et faire des assertions directement dessus plutôt que de vérifier la requête générée.</p>

<p>De plus, il est plus simple de monter une base de données embarquée que de capturer la requête. En effet, il serait nécessaire de connaître l'implémentation utilisée pour accéder à la base de données et ceci est un signe que nos tests sont trop couplés à notre implémentation. Ils tomberaient donc en échec si l'on venait à en changer (passage de requêtes JDBC à un ORM, ou l'inverse par exemple).</p>

<p>L'exemple suivant utilise les classes <code>EmbeddedDatabaseBuilder</code> et <code>JdbcTemplate</code> de Spring pour créer et accéder à une base de données embarquée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRepositoryTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_save_user_to_database</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JdbcUserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JdbcUserRepository</span><span class="o">(</span><span class="n">ds</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;Doe&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">count</span><span class="o">(</span><span class="n">ds</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;Doe&quot;</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">count</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">ds</span><span class="o">,</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">ds</span><span class="o">).</span><span class="na">queryForObject</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;select count(*) from user where first_name = ? and last_name = ?&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">firstName</span><span class="o">,</span> <span class="n">lastName</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">EmbeddedDatabaseBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="n">EmbeddedDatabaseType</span><span class="o">.</span><span class="na">HSQL</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addScript</span><span class="o">(</span><span class="s">&quot;db/sql/create-db.sql&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce test ne tombera jamais en échec tant que le <em>comportement</em> de la classe ne change pas, même si son implémentation change totalement.</p>

<h2>Réseau</h2>

<p>Le code qui communique à travers le réseau peut être difficile à tester en isolation. Selon moi, ceci n'est surtout pas forcément utile. En effet, le but principal est de vérifier le bon transfert d'informations à travers le réseau, quelle que soit la librairie utilisée pour effectuer ce transfert.</p>

<p>Dans ce genre de cas, je prends souvent le parti de créer un faux serveur qui sera lancé durant mes tests afin de communiquer avec le code à tester.</p>

<p>L'exemple suivant décrit le test d'un client TCP qui va communiquer avec un serveur qui se contente de renvoyer ce qu'on lui envoie. Le faux serveur est représenté par la classe <code>FakeEchoServer</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FakeEchoServer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FakeEchoServer</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">port</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">(</span><span class="n">DataInputStream</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">getReader</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span> <span class="n">DataOutputStream</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">getWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">writer</span><span class="o">.</span><span class="na">writeUTF</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readUTF</span><span class="o">());</span>
</span><span class='line'>                        <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataOutputStream</span> <span class="nf">getWriter</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataOutputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataInputStream</span> <span class="nf">getReader</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataInputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">running</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le test, quant à lui, va instancier ce faux serveur et appeler la méthode à tester du client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EchoClientTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">PORT</span> <span class="o">=</span> <span class="mi">9999</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_message_and_get_response</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FakeEchoServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FakeEchoServer</span><span class="o">(</span><span class="n">PORT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">echoResult</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EchoClient</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">,</span> <span class="n">PORT</span><span class="o">).</span><span class="na">sendAndReceive</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">echoResult</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le faux serveur devra évoluer au fur et à mesure que le <em>comportement</em> du client changera mais ne sera pas modifié par un changement de librairie ou de façon d'utiliser le réseau.</p>

<h2>Système de fichiers</h2>

<p>Lorsque l'on doit interagir avec un système de fichiers, on le fait souvent via des appels statiques à des classes comme <code>FileUtils</code> de <code>commons-io</code> ou <code>Files</code> du JDK ou bien des appels à <code>new File()</code>. Quoi qu'il en soit, il est difficile de <em>mocker</em> ce genre d'appels pour faire des assertions pertinentes.</p>

<p>Une solution pourrait être de ne pas <em>mocker</em> du tout et de récupérer le fichier manipulé directement depuis le système de fichiers mais il faudrait alors penser à bien nettoyer le disque avant chaque test et faire aussi attention aux droits dans le dossier à utiliser.</p>

<p>Fort heureusement, JUnit propose une <code>Rule</code> dédiée à ce genre de cas. Il s'agit de <code>TemporaryFolder</code> qui va créer un dossier temporaire dans lequel il sera possible de travailler. A la fin du test, ce dossier sera supprimé.</p>

<p>Le test d'une classe manipulant des fichiers se présente alors sous la forme suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileStoreTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TemporaryFolder</span> <span class="n">temporaryFolder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TemporaryFolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_store_file_in_the_user_folder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">URISyntaxException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">File</span> <span class="n">rootFolder</span> <span class="o">=</span> <span class="n">temporaryFolder</span><span class="o">.</span><span class="na">newFolder</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">readAllBytes</span><span class="o">(</span><span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ClassLoader</span><span class="o">.</span><span class="na">getSystemResource</span><span class="o">(</span><span class="s">&quot;files/avatar.png&quot;</span><span class="o">).</span><span class="na">toURI</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">FileStore</span><span class="o">(</span><span class="n">rootFolder</span><span class="o">).</span><span class="na">store</span><span class="o">(</span><span class="k">new</span> <span class="nf">UserFile</span><span class="o">(</span><span class="s">&quot;avatar.png&quot;</span><span class="o">,</span> <span class="n">content</span><span class="o">,</span> <span class="s">&quot;john&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">File</span> <span class="n">expectedFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">rootFolder</span><span class="o">,</span> <span class="s">&quot;john/files/avatar.png&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">expectedFile</span><span class="o">).</span><span class="na">exists</span><span class="o">().</span><span class="na">hasBinaryContent</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette technique a pour inconvénient de supprimer le dossier temporaire après chaque test. Ainsi, si le test est en échec il ne sera pas forcément aisé de comprendre pourquoi car le dossier aura disparu. Si ce besoin se fait sentir, il peut être plus pertinent de créer un dossier temporaire à la main dans une méthode de setup (annotée <code>@Before</code>) au lieu d'utiliser la <code>@Rule</code>.</p>

<h2>Mail</h2>

<p>De nombreuses applications envoient des mails. Les stratégies généralement utilisées pour les tester se divisent en deux catégories :</p>

<ul>
<li><em>Mocker</em> la classe responsable de l'envoi des mails.</li>
<li>Utiliser une adresse mail &ldquo;poubelle&rdquo; qui va recevoir tous les mails et les vérifier manuellement.</li>
</ul>


<p>Aucune de ces deux méthodes n'est optimale car dans le premier cas, on ne sait pas ce qui est réellement envoyé par mail et cela rend le test très couplé à l'implémentation et dans le deuxième cas, le test n'est que très difficilement automatisable.</p>

<p>La solution optimale serait de pouvoir instancier un vrai serveur SMTP et de pouvoir récupérer les mails qu'il a reçu. C'est ce que propose la librairie <a href="https://github.com/voodoodyne/subethasmtp">SubEtha SMTP</a>.</p>

<p>Le test d'une classe permettant d'envoyer des mails va donc ressembler à ceci (on utilise également la classe <code>JavaMailSender</code> de Spring pour envoyer les mails) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailSenderTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">SMTP_PORT</span> <span class="o">=</span> <span class="mi">5555</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_mail_to_customer_address</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MessagingException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Wiser</span> <span class="n">wiser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Wiser</span><span class="o">(</span><span class="n">SMTP_PORT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wiser</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">MailSender</span><span class="o">(</span><span class="n">getJavaMailSender</span><span class="o">(),</span> <span class="s">&quot;contact@acme.org&quot;</span><span class="o">).</span><span class="na">send</span><span class="o">(</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">CustomerMail</span><span class="o">(</span><span class="s">&quot;john@acme.org&quot;</span><span class="o">,</span> <span class="s">&quot;Hey you!&quot;</span><span class="o">,</span> <span class="s">&quot;How are you?&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">WiserMessage</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">wiser</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">messages</span><span class="o">).</span><span class="na">hasSize</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MimeMessage</span> <span class="n">mimeMessage</span> <span class="o">=</span> <span class="n">messages</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getMimeMessage</span><span class="o">();</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">.</span><span class="na">getSubject</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;Hey you!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">.</span><span class="na">getFrom</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">toString</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;contact@acme.org&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">.</span><span class="na">getRecipients</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">)[</span><span class="mi">0</span><span class="o">].</span><span class="na">toString</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;john@acme.org&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">toString</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;How are you?\r\n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">wiser</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">JavaMailSender</span> <span class="nf">getJavaMailSender</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JavaMailSenderImpl</span> <span class="n">javaMailSender</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">JavaMailSenderImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">javaMailSender</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">javaMailSender</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">SMTP_PORT</span><span class="o">);</span>
</span><span class='line'>        <span class="n">javaMailSender</span><span class="o">.</span><span class="na">setProtocol</span><span class="o">(</span><span class="s">&quot;smtp&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">javaMailSender</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Cette liste n'est bien sûr pas exhaustive est peut être complétée à l'infini.
Cependant, une tendance émerge. En effet, on se rend compte que les zones où le <em>mock</em> peut être compliqué, voire contre productif, se situent au niveau des interfaces avec le monde extérieur. Il n'est pas toujours important de tester la manière dont le code va communiquer avec l'extérieur, ni même le format exact des données envoyées.
La plupart du temps, il est seulement important de savoir si le système avec lequel le code interagit a correctement compris le message ou non. Dans les autres cas (vérification de protocole, optimisations de requêtes, etc.), il est plus pertinent d'utiliser des <em>mocks</em> pour analyser le contenu exact de ce qui est envoyé.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactorer, c'est comme dormir]]></title>
    <link href="https://rnowif.github.io/blog/2016/02/01/refactorer-c-est-comme-dormir/"/>
    <updated>2016-02-01T07:16:09+13:00</updated>
    <id>https://rnowif.github.io/blog/2016/02/01/refactorer-c-est-comme-dormir</id>
    <content type="html"><![CDATA[<p>Robert est un développeur. On a demandé à Robert d'ajouter une nouvelle fonctionnalité à l'application. Robert aimerait bien en profiter pour refactorer un peu le code car il ne respecte pas les bonnes pratiques qu'il a pu voir lors du dernier meetup Software Craftsmanship. On dit alors à Robert qu'il ne peut pas refactorer car, en ce moment, il n'y a pas le temps pour ça et qu'il doit produire. Robert se dit qu'il n'y a de toutes façons jamais le temps&hellip;</p>

<p>Cette histoire vous semble familière ? En effet, le refactoring est souvent perçu comme n'apportant aucune valeur. D'autres choses dans la vie peuvent sembler n'apporter aucune valeur. Il y en a notamment une qui prend près du tiers de la vie d'une personne pendant laquelle cette personne ne fait littéralement rien : <em>dormir</em> !</p>

<!-- more -->


<p>Le nombre de choses que l'on pourrait faire si l'on ne dormait pas ! Cependant, au bout de quelques jours, voire quelques heures, des événements désagréables finiraient par survenir. Sans sommeil, la moindre des tâches peut devenir très longue à effectuer et des erreurs étranges peuvent arriver (comme verser du jus d'orange dans son bol de céréales). Après un certain temps, le sommeil prend le dessus de manière incontrôlée, ce qui peut conduire à des accidents (à cause d'une somnolence au volant par exemple).</p>

<p>De manière similaire, repousser le refactoring nuit au projet. Les développements peuvent prendre beaucoup plus de temps que nécessaire et des bugs peuvent survenir sur des fonctionnalités très éloignées de celles qui sont modifiées. De plus, il arrive un moment où le refactoring s'impose : le code ne peut plus être modifié sans risquer d'importantes régressions. Ceci peut se produire à un moment critique du projet et donc le mettre en péril. A ce moment là, la sentence tant redoutée peut tomber : « il faut tout réécrire ».</p>

<p>De manière globale, refactorer régulièrement est nécessaire à la bonne santé du projet, tout comme dormir chaque nuit l'est pour la notre. Dans la suite de cet article, nous allons définir ce que signifie refactorer dans ce contexte, quand est-il bon de le faire, comment bien le préparer et que faire si le temps manque.</p>

<h2>Que signifie refactorer ?</h2>

<p>Selon Michael Feathers, le refactoring est l'acte d'améliorer le <em>design</em> du code sans changer son comportement.</p>

<p>Il ne s'agit pas forcément de changer toute une hiérarchie de classes ou de mettre en place un <em>design pattern</em> très complexe mais cela peut être aussi simple que de renommer une variable, une méthode, une classe, d'extraire une méthode privée dans une classe externe, de regrouper les attributs d'une méthode dans un objet, etc.</p>

<p>De plus, nous considérons aussi qu'ajouter des tests à du code existant est du refactoring. En effet, un code testable est un premier pas vers un meilleur <em>design</em>.</p>

<h2>Quand faut-il refactorer ?</h2>

<p>L'idée n'est pas d'essayer de corriger l'intégralité du système à chaque fois. Ceci serait contre productif et impossible à mettre en place. De plus, il serait très difficilement justifiable de provoquer des régressions dans une partie du code très éloignée de celle qui est censée être modifiée.</p>

<p>Le refactoring est très efficace lorsqu'il est ciblé sur le code qui est concerné par le développement d'une fonctionnalité. De plus, il nous semble préférable de refactorer avant d'ajouter du nouveau code afin de démarrer sur des bases saines.</p>

<h2>Comment le préparer ?</h2>

<p>La première chose à faire avant de refactorer est de s'assurer qu'il y a des tests en place. Ces tests permettent de vérifier que le refactoring ne génère pas de régression. Si ces tests ne sont pas déjà en place, il faut les ajouter avant de commencer.</p>

<p>Il peut arriver qu'il soit impossible de tester une portion de code. Dans ce cas, il faut effectuer le refactoring minimum nécessaire à la mise en place des tests.</p>

<h2>Que faire si le temps manque ?</h2>

<p>Si, comme Robert, le temps vous manque, il faut faire preuve de pragmatisme. Il peut être intéressant d'effectuer de petits refactoing à chaque développement. Cela permet d'améliorer le <em>design</em> sans consommer trop de temps et de préparer le terrain pour de plus gros refactoring.</p>

<h2>Conclusion</h2>

<p>Le refactoring est essentiel dans un projet et doit être effectué régulièrement. Il permet d'assurer que les nouvelles fonctionnalités pourront être développées dans un temps raisonnable et de limiter les régressions en améliorant le <em>design</em>. Par ailleurs, il permet aussi aux développeurs de (re)prendre du plaisir à faire évoluer le produit.</p>

<p>Nous aimerions conclure avec la règle du boy scout qui indique que l'on doit toujours laisser le code dans un meilleur état que lorsqu'on l'a trouvé. L'application de cette règle conduit à l'amélioration de la qualité globale du code et à l'inversion de la dette technique.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Nadia Humbert-Labeaumaz (<a href="https://www.twitter.com/nphumbert">@nphumbert</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tell don't ask]]></title>
    <link href="https://rnowif.github.io/blog/2015/07/29/tell-dont-ask/"/>
    <updated>2015-07-29T07:57:56+12:00</updated>
    <id>https://rnowif.github.io/blog/2015/07/29/tell-dont-ask</id>
    <content type="html"><![CDATA[<p>Quand j'étais à l'école et que j'apprenais la programmation orientée objet (POO), on nous disait que les classes permettaient d'encapsuler des comportements et de cacher leur implémentation au reste du monde. Ainsi, le code qui appelle une méthode attend d'elle qu'elle se comporte comme elle a été spécifiée, quelle que soit son implémentation.</p>

<!-- more -->


<p>Prenons l'exemple d'un panier, dont le coût total doit être calculé selon certaines règles (somme de tous les articles, ajout éventuel de taxes, charges, etc.). En POO, on pourrait s'attendre à ce que la classe <code>Basket</code> ait une méthode <code>calculateTotalCost</code> qui va calculer ce coût. Après tout, le code appelant ne veut pas savoir comment calculer un coût, il veut juste le récupérer.</p>

<p>Pourtant, lors de mes premiers mois dans le monde du travail, je suis tombé sur ce genre ce code, au détour d'une méthode de la <em>couche service</em> (je vous fais grâce de la classe <code>Basket</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculateTotalCost</span><span class="o">(</span><span class="n">Basket</span> <span class="n">basket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">int</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="o">(</span><span class="n">Article</span> <span class="n">article</span> <span class="o">:</span> <span class="n">basket</span><span class="o">.</span><span class="na">getArticles</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">totalCost</span> <span class="o">+=</span> <span class="n">article</span><span class="o">.</span><span class="na">getUnitPrice</span><span class="o">()</span> <span class="o">*</span> <span class="n">article</span><span class="o">.</span><span class="na">getQuantity</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">totalCost</span> <span class="o">=</span> <span class="n">totalCost</span> <span class="o">+</span> <span class="n">TAX_RATE</span> <span class="o">*</span> <span class="n">totalCost</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">basket</span><span class="o">.</span><span class="na">setTotalCost</span><span class="o">(</span><span class="n">totalCost</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">totalCost</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pourquoi en est-on arrivé là ?</p>

<ul>
<li>A cause de Java qui encourage les <em>getters</em> et <em>setters</em> sur les beans ?</li>
<li>A cause des librairies comme <a href="https://projectlombok.org/">lombok</a>, qui automatisent la création de ces accesseurs ?</li>
<li>A cause de l'architecture en couches qui a été usée et abusée ?</li>
<li>A cause de l'héritage des langages procéduraux comme le C, et la fainéantise des développeurs pour changer de paradigme ?</li>
<li>Ou peut-être n'y a-t-il pas de problème et qu'il s'agit d'une bonne manière de coder ?</li>
</ul>


<p>Selon moi, il ne s'agit pas d'une manière correcte de coder ce genre de fonctionnalités et c'est pourquoi j'ai décidé d'écrire cet article.</p>

<h2>Le principe <em>Tell don&rsquo;t ask</em></h2>

<p>Ce principe stipule qu'au lieu de demander (<em>ask</em>) à un objet des informations pour les exploiter, il vaut mieux dire (<em>tell</em>) à cet objet ce que l'on veut faire et il s'en chargera lui même.</p>

<p>Selon ce principe, la classe <code>Basket</code> utilisée ci-dessus devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Basket</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Article</span><span class="o">&gt;</span> <span class="n">articles</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculateTotalCost</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Article</span> <span class="n">article</span> <span class="o">:</span> <span class="n">articles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">totalCost</span> <span class="o">+=</span> <span class="n">article</span><span class="o">.</span><span class="na">priceWithoutTaxes</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">totalCost</span> <span class="o">+</span> <span class="n">TAX_RATE</span> <span class="o">*</span> <span class="n">totalCost</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>et le service devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculateTotalCost</span><span class="o">(</span><span class="n">Basket</span> <span class="n">basket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">basket</span><span class="o">.</span><span class="na">calculateTotalCost</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plusieurs remarques peuvent être faites à la lecture de ce nouveau code :</p>

<ul>
<li>Il n'y a plus d'accesseurs dans la classe <code>Basket</code>. Ses champs sont encapsulés et non exposés aux quatres vents : l'objet redevient responsable de son état.</li>
<li>Le comportement est rapproché des données qu'il va utiliser. Ainsi, il est bien plus simple de comprendre le code (et donc de le maintenir) car les données traitées sont proches de leur traitement et elle ne sont plus utilisées ailleurs.</li>
<li>La <a href="https://fr.wikipedia.org/wiki/Loi_de_D%C3%A9m%C3%A9ter">Loi de Demeter</a> est respectée. Ainsi, un changement dans une méthode de calcul de prix n'affectera personne d'autre que la classe dont le prix doit être calculé.</li>
<li>La question quant à l'utilité du service est bel et bien posée. Il ne s'agit plus que d'un passe-plat totalement inutile à part à pourrir la base de code.</li>
</ul>


<h2>De l'utilité des services et des couches</h2>

<p>En suivant ce genre de principes, il devient évident que le <em>service</em>, ce fameux <a href="https://fr.wikipedia.org/wiki/God_object">God Object</a> qui faisait la pluie et le beau temps dans le code, est réduit à peau de chagrin. Il est même possible de s'en passer très souvent.</p>

<p>Cependant, il reste indispensable dans le cas où les objets doivent collaborer entre eux. Globalement, si je devais indiquer la <em>règle</em> que j'essaie de suivre au quotidien, je dirais ceci :</p>

<ul>
<li>Si l'objet dispose de toutes les informations pour effectuer un traitement, il doit le faire.</li>
<li>Si le traitement porte sur plusieurs objets différents, une classe externe (typiquement un service) peut s'en occuper.</li>
</ul>


<h2>Restons pragmatiques</h2>

<p>Comme toujours, les principes se confrontent à la réalité et ils ne gagnent pas toujours. Il faut parfois savoir faire des petites entorses à la règle et ne pas être dogmatique sur ce genre de sujets. Qui sait, les bonnes pratiques d'aujourd'hui seront peut-être les anti-patterns de demain.</p>

<p>Cependant, après quelques temps de pratique, je pense qu'il est possible d'appliquer le principe de <em>Tell Don&rsquo;t Ask</em> au quotidien. Il est même possible de commencer dès aujourd'hui et sans devoir refactoriser l'intégralité du code source existant.</p>

<p>Pensez à ça lors de vos prochains développement et n'hésitez pas à en parler sur <a href="https://twitter.com/RnowIf">Twitter (@RnowIf)</a>, dans un commentaire sur cette page ou bien lors d'un <a href="http://www.meetup.com/fr/Software-Craftsmanship-Lyon/">Meetup Craftsman</a> à Lyon ou ailleurs.</p>
]]></content>
  </entry>
  
</feed>
