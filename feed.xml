<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>A Software Gardener</title>
    <link href="https://rnowif.github.io/feed.xml" rel="self" />
    <link href="https://rnowif.github.io" />
    <updated>2021-03-10T04:43:25+13:00</updated>
    <author>
        <name>Renaud Humbert-Labeaumaz</name>
    </author>
    <id>https://rnowif.github.io</id>

    <entry>
        <title>Bringing Meaning to Legacy Code with Parameter Objects</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/bringing-meaning-to-legacy-code-with-parameter-objects.html"/>
        <id>https://rnowif.github.io/bringing-meaning-to-legacy-code-with-parameter-objects.html</id>
            <category term="refactoring"/>
            <category term="legacy"/>
            <category term="design"/>

        <updated>2021-03-10T04:43:25+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/17/xavi-cabrera-kn-UmDZQDjM-unsplash.jpg" alt="" />
                    <p>Most of the legacy codebases I have work on suffered from primitive obsession. One of the symptoms is the presence of methods with a swarm of <code>int</code>, <code>string</code> or <code>bool</code> parameters.
These methods harm the codebase as they are hard to understand and easy to misuse - which could cause bugs and headaches.
This article aims to present a simple, yet extremely effective, solution to this issue through the use of parameter objects.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/17/xavi-cabrera-kn-UmDZQDjM-unsplash.jpg" alt="" />
                <p>Most of the legacy codebases I have work on suffered from primitive obsession. One of the symptoms is the presence of methods with a swarm of <code>int</code>, <code>string</code> or <code>bool</code> parameters.
These methods harm the codebase as they are hard to understand and easy to misuse - which could cause bugs and headaches.
This article aims to present a simple, yet extremely effective, solution to this issue through the use of parameter objects.</p>
<hr id="read-more" />

<p>Let’s take the following method signature to illustrate:</p>
<pre><code class="language-csharp">string GenerateLoginLink(
    int userId, 
    DateTime? expiryDate, 
    int? maxAllowedClicks, 
    bool notifyOnClick, 
    bool sendLinkByEmail, 
    bool redirectToHomePage, 
    string? redirectUrl
);</code></pre>
<p>This method generates a link that would allow the user to log in to the platform and be redirected to a specific url. This link has an expiry date or a maximal number of clicks allowed. Also, we can optionally send it directly to the user by email and notify an admin when the user has clicked on it.</p>
<p>There are a couple of business rules to be aware of:</p>
<ul>
<li><code>expiryDate</code> and <code>maxAllowedClicks</code> are mutually exclusive (i.e. we can only pass one of them as an argument)</li>
<li><code>redirectUrl</code> is only useful if <code>redirectToHomePage</code> is <code>false</code></li>
</ul>
<p>Now, this method presents some issues.</p>
<ul>
<li><strong>Illegal combinations.</strong> In the best-case scenario, providing the method with an <code>expiryDate</code> and a <code>maxAllowedClicks</code> throws an exception or silently gives priority to one of these fields. In the worst-case scenario, it generates an unpredictable behaviour because the case is not handled. Also, what if both are <code>null</code>?</li>
<li><strong>Poor expressivity.</strong> The business rules expressed above are far from obvious. Maybe they are documented in the method’s comment but people do not always read the documentation and it can become stale very quickly if we forget to update it (maybe that is the reason why people tend to overlook documentation?). Also, there is absolutely nothing preventing the developer to pass illegal or useless combinations.</li>
<li><strong>Error-prone.</strong>  Finally, did you notice the 3 consecutive booleans in the method’s signature? How easy would it be to invert two of them by mistake? The method might work exactly as expected and be thoroughly unit tested, you will still have bugs if you don’t use it properly. </li>
</ul>
<p>The first iteration would be to use a parameter object for this method.</p>
<pre><code class="language-csharp">public class LoginLinkConfig 
{
    public DateTime? ExpiryDate {get; set;}
    public int? MaxAllowedClicks {get; set;}
    public bool NotifyOnClick {get; set;}
    public bool SendLinkByEmail {get; set;}
    public bool RedirectToHomePage {get; set;}
    public string? RedirectUrl  {get; set;}
}

string GenerateLoginLink(int userId, LoginLinkConfig config);</code></pre>
<p>This change could reduce the risk of error and would make the use of default values easier. However, it would not be very helpful to prevent illegal combinations and increase expressivity.</p>
<p>A solution to tackle these issues is to use the builder pattern. This pattern provides an expressive API to create an object and is particularly useful when it comes to objects with optional fields.</p>
<pre><code class="language-csharp">public class LoginLinkConfig 
{
    // Properties are now read-only
    public DateTime? ExpiryDate {get;}
    public int? MaxAllowedClicks {get;}
    public bool NotifyOnClick {get;}
    public bool SendLinkByEmail {get;}
    public bool RedirectToHomePage {get;}
    public string? RedirectUrl  {get;}

    // The constructor is private to force the use of the builder
    private LoginLinkConfig(DateTime? expiryDate, int? maxAllowedClicks, bool notifyOnClick, bool sendLinkByEmail, bool redirectToHomePage, string? redirectUrl) 
    {
        ExpiryDate = expiryDate;
        MaxAllowedClicks = maxAllowedClicks;
        NotifyOnClick = notifyOnClick;
        SendLinkByEmail = sendLinkByEmail;
        RedirectUrl = redirectUrl;
    }

    // Notice that the parameter in these methods is not nullable
    public static Builder ExpiringLink(DateTime expiryDate) =&gt; new Builder(expiryDate);
    public static Builder LimitedClicksLink(int maxAllowedClicks) =&gt; new Builder(maxAllowedClicks);

    public class Builder
    {
        private DateTime? _expiryDate;
        private int? _maxAllowedClicks;
        private bool _notifyOnClick;
        private bool _sendLinkByEmail;
        // We can set sensible default values
        private bool _redirectToHomePage = true;
        private string? _redirectUrl;

        public Builder(DateTime expiryDate)
        {
            _expiryDate = expiryDate;
        }

        public Builder(int maxAllowedClicks)
        {
            _maxAllowedClicks = maxAllowedClicks;
        }

        public Builder WithRedirection(string redirectUrl)
        {
            _redirectToHomePage = false;
            _redirectUrl = redirectUrl;

            // Return the builder to allow chaining
            return this;
        }

        public Builder WithClickNotification()
        {
            _notifyOnClick = true;

            // Return the builder to allow chaining
            return this;
        }

        public Builder SentByEmail()
        {
            _sendLinkByEmail = true;

            // Return the builder to allow chaining
            return this;
        }

        public LoginLinkConfig Build() =&gt; new LoginLinkConfig(_expiryDate, _maxAllowedClicks, _notifyOnClick, _sendLinkByEmail, _redirectUrl);
    }

}</code></pre>
<p>With this builder, creating the config object goes from</p>
<pre><code class="language-csharp">var maxAllowedClicksConfig = new LoginLinkConfig 
{
    MaxAllowedClicks = 1,
    NotifyOnClick = true,
    RedirectToHomePage = false,
    RedirectUrl  = &quot;/myaccount&quot;
};

var expiringLinkConfig = new LoginLinkConfig 
{
    ExpiryDate = DateTime.Now.AddDays(1),
    SendLinkByEmail = true,
    RedirectToHomePage = true
};</code></pre>
<p>to </p>
<pre><code class="language-csharp">var maxAllowedClicksConfig = LoginLinkConfig.LimitedClicksLink(1)
    .WithClickNotification()
    .WithRedirection(&quot;/myaccount&quot;)
    .Build();

var expiringLinkConfig = LoginLinkConfig.ExpiringLink(DateTime.Now.AddDays(1))
    .SendByEmail()
    .Build();</code></pre>
<p>This new instantiation process is arguably more verbose, but provides the following benefits:</p>
<ul>
<li><strong>More meaningful.</strong> By using a builder, the developer can express what they mean and there is no doubt about it. Since we got rid of the ambiguity, errors are less likely to occur.</li>
<li><strong>No illegal state.</strong> As illustrated in the example, there is absolutely no way of representing an illegal state. For instance, if you want to create an expiring link, you cannot also set the <code>_maxAllowedClicks</code>. Otherwise, when you provide a <code>redirectUrl</code>, the <code>_redirectToHomePage</code> is automatically set to <code>false</code> and cannot be changed.</li>
<li><strong>Simpler implementation.</strong> Finally, since the business rules described above are embedded into the object creation, there is no need to enforce them into the method - which allows for simpler implementation. Also, other methods can use the config object, knowing that the business rules will always be applied.</li>
</ul>
<p>Overall, using a parameter object in conjunction with the builder pattern is a very simple way to bring back meaning into your legacy codebase and reduce bugs by making illegal states literally impossible to represent.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Untangling Legacy Code with Events</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/untangling-legacy-code-with-events.html"/>
        <id>https://rnowif.github.io/untangling-legacy-code-with-events.html</id>
            <category term="refactoring"/>
            <category term="legacy"/>
            <category term="design"/>
            <category term="architecture"/>

        <updated>2021-03-09T17:42:06+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/16/paper-1565157_1920.jpg" alt="" />
                    <p>Legacy code is typically characterised by long methods that mix up different concepts and levels of abstraction.
In this context, it can be hard to extract behaviour into proper modules because it feels like everything depends on everything and it would require a massive overhaul of the entire codebase.
This article proposes to use events to reduce coupling between legacy code and other properly-bounded modules to either extract existing code or add new one.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/16/paper-1565157_1920.jpg" alt="" />
                <p>Legacy code is typically characterised by long methods that mix up different concepts and levels of abstraction.
In this context, it can be hard to extract behaviour into proper modules because it feels like everything depends on everything and it would require a massive overhaul of the entire codebase.
This article proposes to use events to reduce coupling between legacy code and other properly-bounded modules to either extract existing code or add new one.</p>
<hr id="read-more" />

<p>Let’s say you have a typical <code>UserManager</code> class which features a <code>CreateUser</code> method.
Once a user is created, we might want to send a welcome email to set the password and clear a cache somewhere.
The initial code looks something like this:</p>
<pre><code class="language-csharp">public class UserManager {
    // ...

    public async Task CreateUser(string username) {
        var user = new User { Username = username };
        int userId = await _repository.Add(user);
        await ClearCacheForUser(userId);
        await SendWelcomeEmail(userId, user);
    }

    private async Task ClearCacheForUser(int userId) {
        // ...
    }

    private async Task SendWelcomeEmail(int userId, User user) {
        // ...
    }
}</code></pre>
<p>The first step could be to extract <code>ClearCacheForUser</code> and <code>SendWelcomeEmail</code> to dedicated classes. However, it would not fundamentally change the issue. Indeed, the <code>CreateUser</code> method would still need to know to clear the cache, send the email, and all the other processes that need to happen upon user creation. Thus, the coupling is still there.</p>
<p>A simple solution to remove this coupling is to use events. Before you raise an eyebrow, it’s important to note that using events does not necessarily mean implementing a full-blown event-sourcing architecture with an event store and whatnot (keep in mind that event-driven and event-sourcing are <a href="https://martinfowler.com/articles/201701-event-driven.html">two separate things</a>). 
As a matter of fact, starting with a very straightforward in-process event bus can go a long way to help untangle your legacy code.</p>
<p>The following code is a complete implementation of an in-process event bus that you can use.</p>
<pre><code class="language-csharp">public abstract class MyEvent {}

public interface IEventBus
{
    Task Publish&lt;T&gt;(T @event) where T : EpEvent;

    void Subscribe&lt;T&gt;(IEventHandler&lt;T&gt; handler) where T : MyEvent;
}

public interface IEventHandler&lt;in T&gt; where T : MyEvent
{
    Task Handle(T @event);
}

public class InProcessEventBus : IEventBus
{
    private readonly IDictionary&lt;Type, IList&lt;object&gt;&gt; _subscriptions = new Dictionary&lt;Type, IList&lt;object&gt;&gt;();

    public async Task Publish&lt;T&gt;(T @event) where T : MyEvent
    {
        if (_subscriptions.TryGetValue(typeof(T), out IList&lt;object&gt; handlers))
        {
            foreach (IEventHandler&lt;T&gt; handler in handlers.OfType&lt;IEventHandler&lt;T&gt;&gt;())
            {
                    await handler.Handle(@event);
            }
        }
    }

    public void Subscribe&lt;T&gt;(IEventHandler&lt;T&gt; handler) where T : MyEvent
    {
        if (!_subscriptions.ContainsKey(typeof(T)))
        {
            _subscriptions[typeof(T)] = new List&lt;object&gt;();
        }

        _subscriptions[typeof(T)].Add(handler);
    }
}</code></pre>
<p>Using this minimalist event bus, we can re-write our <code>CreateUser</code> method like this:</p>
<pre><code class="language-csharp">public class UserCreatedEvent : MyEvent {
    public int UserId { get; }
    public string Username { get; }

    public UserCreatedEvent(int userId, string username) {
        UserId = userId;
        Username = username;
    }
}

public class UserManager {
    // ...
    private readonly IEventBus _eventBus;

    public async Task CreateUser(string username) {
        var user = new User { Username = username };
        int userId = await _repository.Add(user);

        await _eventBus.Publish(new UserCreatedEvent(userId, username));
    }
}</code></pre>
<p>Now, we can create handlers to process this <code>UserCreatedEvent</code> and do what needs to be done.</p>
<pre><code class="language-csharp">public class ClearUserCacheEventHandler : IEventHandler&lt;UserCreatedEvent&gt;
{
    public ClearUserCacheEventHandler(IEventBus eventBus)
    {
        eventBus.Subscribe(this);
    }

    public Task Handle(UserCreatedEvent @event)
    {
        // Clear cache
    }
}

public class SendWelcomeEmailEventHandler : IEventHandler&lt;UserCreatedEvent&gt;
{
    public SendWelcomeEmailEventHandler(IEventBus eventBus)
    {
        eventBus.Subscribe(this);
    }

    public Task Handle(UserCreatedEvent @event)
    {
        // Send welcome email
    }
}</code></pre>
<p>This event bus will not help with scalability as the events are processed synchronously and the <code>Publish</code> method only returns once all the events are processed. 
However, it can dramatically reduce coupling within the codebase and can act as a stepping stone to make your architecture more <em>event-driven</em>. 
Moreover, if you need to go further (e.g. two services communicating through events), you already have the abstractions in place to switch the <code>InProcessEventBus</code> for an out-of-process implementation.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>In Defence of the Liskov Substitution Principle</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/rehabilitating-the-liskov-substitution-principle.html"/>
        <id>https://rnowif.github.io/rehabilitating-the-liskov-substitution-principle.html</id>
            <category term="design"/>

        <updated>2021-01-23T12:19:32+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/14/stormtrooper-1343877_1920.jpg" alt="" />
                    The Liskov Substitution Principle (LSP for short) is the “L” in the SOLID principles. Even though many people know this principle, at least by name, I cannot keep track of how many times it is skipped when the SOLID principles are being explained. Most of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/14/stormtrooper-1343877_1920.jpg" alt="" />
                <p>The Liskov Substitution Principle (LSP for short) is the “L” in the <a href="https://en.wikipedia.org/wiki/SOLID">SOLID</a> principles. Even though many people know this principle, at least by name, I cannot keep track of how many times it is skipped when the SOLID principles are being explained. Most of the time, the explanation of the LSP is reduced to stating its name and showing a half-assed example to which nobody can relate!</p>
<h2 id="perceived-complexity">Perceived Complexity</h2>
<p>I think that the LSP is often overlooked because of its perceived complexity, starting with its name. Indeed, this principle is named after the computer science pioneer and Turing Award winner <a href="https://en.wikipedia.org/wiki/Barbara_Liskov">Barbara Liskov</a>, who laid the base for our understanding of modules and abstraction. As such, it is the only SOLID principle that has not a self-explaining name and I believe that it could throw people off.</p>
<p>Funnily enough, Barbara Liskov explained - during a <a href="https://youtu.be/oeknOtb0gzQ?t=1339">conference talk</a> she gave in 2020 - that someone asked her once what this principle meant and she was pretty confused because she wasn’t even aware of its existence.</p>
<div class="post__iframe"><iframe loading="lazy" width="560" height="315" src="https://www.youtube.com/embed/oeknOtb0gzQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>

<h2 id="its-just-semantics">It’s Just Semantics</h2>
<p>In a nutshell, the LSP means that there must be a <strong><em>semantic</em></strong> relationship between a class and a subclass - sharing methods with the same name is not enough. For instance, stacks and queues may both have <code>add</code> or <code>remove</code> methods but these classes should not inherit from each other as these methods mean completely different things: a stack would work in a <em>last-in-first-out</em> (LIFO) fashion as opposed to <em>first-in-first-out</em> (FIFO) for a queue. Consequently, if your program is built using a queue and you <em>substitute</em> it for a stack, it might not work anymore.</p>
<h2 id="temper-your-expectations">Temper your Expectations</h2>
<p>The idea behind the LSP revolves around expectations and contracts. If I use a stack, I <em>expect</em> it to be a LIFO and would not be happy if it turned out to be a FIFO instead. Any subtype of the stack should respect this <em>contract</em>.</p>
<p>We can therefore infer that a subtype violates the LSP if</p>
<ul>
<li>it expects more than what the contract states (e.g. non-null input, specific concrete type for an interface, etc.)</li>
<li>it does less than what the contract requires (e.g. return null when it shouldn’t, does not return a list in proper order)</li>
<li>it does not implement a method defined in the base class or interface.</li>
</ul>
<p>The LSP also means that the client code should not rely on something that is not in the contract.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Purposeful Testing or Why the Test Pyramid is a Scam</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/purposeful-testing-or-why-the-test-pyramid-is-a-scam.html"/>
        <id>https://rnowif.github.io/purposeful-testing-or-why-the-test-pyramid-is-a-scam.html</id>
            <category term="testing"/>

        <updated>2021-01-16T08:13:33+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/12/anthony-mcgee-iOZOydyIw3M-unsplash.jpg" alt="" />
                    The test pyramid is a metaphor that illustrates the “ideal” weight of tests depending on their granularity. It goes from the unit tests at the base - which are more numerous - to the end-to-end tests at the top - which should be scarce. It&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/12/anthony-mcgee-iOZOydyIw3M-unsplash.jpg" alt="" />
                <p>The <a href="https://martinfowler.com/articles/practical-test-pyramid.html">test pyramid</a> is a metaphor that illustrates the “ideal” weight of tests depending on their granularity. It goes from the unit tests at the base - which are more numerous - to the end-to-end tests at the top - which should be scarce.</p>
<p>It is often opposed to the “ice cream cone” <a href="https://abstracta.us/blog/test-automation/best-testing-practices-agile-teams-automation-pyramid/">anti-pattern</a> that features a few unit tests and a massive amount of manual end-to-end tests.</p>
<p>I think that this pattern is a good heuristic - especially when your test suite looks like an ice cream cone - but it also yields a lot of sterile discussions, such as</p>
<ul>
<li>What is a unit test? What is an integration test?</li>
<li>Do I test private methods?</li>
<li>Do I test pass-through methods? Do I test getters, setters?</li>
<li>What is ideal code coverage? Should I go to jail if I have less than 100% coverage?</li>
</ul>
<h2 id="purposeful-testing">Purposeful Testing</h2>
<p>Behind this click-bait title, I would like to go <em>beyond</em> the test pyramid and start reasoning in terms of <em>purpose</em> rather than <em>form</em>. Whenever I write tests, I make sure to ask myself the following questions, to be sure that my tests are fit-for-purpose:</p>
<ul>
<li><strong>What is the purpose of this test?</strong> <em>Knowing what the test is supposed to check prevents me from trying to test too much and ultimately write something that will hurt me in the long run. Let’s remember that tests are similar to production code in the way that they require maintenance.</em></li>
<li><strong>What would make this test fail?</strong> <em>By trying to answer this question, I often realise that this test’s failure does not mean that it has achieved its purpose. Worse, sometimes the test simply cannot fail. Tests are not supposed to check everything, they should keep passing when something that they are not supposed to cover is broken.</em></li>
<li><strong>Will it impede our ability to refactor?</strong> <em>A test can too heavily be coupled with the production code can actually be counterproductive. Indeed, it would incentivise not to refactor and hurt maintainability. A typical symptom of a test that impedes refactoring is the overuse of mocks.</em></li>
</ul>
<h2 id="test-taxonomy">Test Taxonomy</h2>
<p>By applying this reasoning, I identified the following types of test (this list is far from complete and will get updated in the future).</p>
<h3 id="support-tests">Support Tests</h3>
<p>These tests aim to <em>support</em> the development of an algorithm or standalone class (i.e. no dependency). You would typically start with a very straightforward code and incrementally add test cases to increase the scope and add new edge cases. I have found this type of test to be the perfect use case for <a href="https://www.youtube.com/watch?v=RWYvBNX9wcU">Test Driven Development</a>.</p>
<h3 id="plumbing-tests">Plumbing Tests</h3>
<p><em>Plumbing</em> tests ensure that several classes, external libraries, or third-party services work together as intended. In the test pyramid, these tests fall into the generally accepted definition of <em>integration tests</em>. The goal here is not to check all the edge cases but rather the assumptions made about the various APIs.</p>
<h3 id="use-case-tests">Use Case Tests</h3>
<p>These end-to-end tests make sure that a user scenario works as intended. <em>Use case tests</em> typically include roundtrips to the database and virtually no mocks. They are good candidates for <a href="https://www.youtube.com/watch?v=Qe84jbwyZ3U&amp;t=47s">double-loop TDD</a>.</p>
<h3 id="orchestration-tests">Orchestration Tests</h3>
<p>Unless use case tests, <em>orchestration</em> tests rely heavily on mocks. They are relevant for pieces of code that will just enforce a workflow and call other dependencies. For instance, you may want to check that the code triggers a method call when some conditions are met. I usually make sure to keep these tests are extremely lean as too many mocks can seriously impede refactoring.</p>
<h3 id="developer-experience-dx-tests">Developer Experience (DX) Tests</h3>
<p>As I always say to everyone willing to listen to me, tests do not only check your code’s behaviour, but also its design and usability. <em>DX</em> tests are extremely valuable when you are creating an API and want to verify that its usage makes sense and is straightforward. These tests should treat the API as a black box and make absolutely no assumptions about its internal behaviour.</p>
<h3 id="crutch-tests">Crutch Tests</h3>
<p>The <em>crutch</em> tests are particularly useful when you want to tackle messy legacy code and refactor it. The objective is to extract a chunk of code, test it from the outside and rewrite it entirely without touching the tests at all. We can readily notice that these tests will typically include roundtrips to the database. The main challenge of these tests is to find <a href="https://biratkirat.medium.com/working-effectively-with-legacy-code-changing-software-part-1-chapter-4-b997b78fc0a2">seams</a> to separate the code you want to rewrite from the rest. These seams are a good place to put mocks in place and inject data in the system under test. Once the refactoring is over, some of these tests might become redundant and can be removed.</p>
<h3 id="confidence-tests">Confidence Tests</h3>
<p>We often read that we should not test third-party libraries because they are already massively tested and it’s not our place to do it. While this may be true, I think it can be useful to test our <em>assumptions</em> about the libraries we use. The <em>confidence</em> tests make sure you understand how an external library works an ensure that it won’t change its behaviour under you (e.g. during an upgrade). By the way, these tests can also apply to your own legacy code!</p>
<h3 id="documentation-tests">Documentation Tests</h3>
<p>We should always thrive to write the simplest code possible. However, it is sometimes not possible and we have to slip some hacky hacks into the codebase (e.g. optimisations, libraries or language shortcomings, etc.). In this case, I like to write <em>documentation</em> tests that will explain the code’s behaviour so that other developers (or me, in a week) can understand what it does.</p>
<h3 id="scratch-tests">Scratch Tests</h3>
<p><em>Scratch</em> tests are short-lived tests that I sometimes use to check an assumption I have about the code. I use these tests to ask the code questions and see what is its answer. I typically delete them as soon as my assumption is verified or discarded.</p>
<h2 id="takeaways">Takeaways</h2>
<p>For years, I struggled with the granularity of my tests because I had the feeling to write some tests for the sake of it. Also, I was refraining myself from writing other tests that would have been useful, because they did not fit in any of the boxes that the test pyramid provides.</p>
<p>When I started to step aside this test pyramid, I realised that I did not care that much about the number of tests or the balance between unit, integration and end-to-end tests. I just write them when I feel that they could bring something to the table.</p>
<p>Also, I noticed that I am using way less mocks than I used to because I don’t force myself to write “pure” unit tests anymore. As a consequence, I feel that tests enable refactoring instead of impeding it.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>The Blind Golden Master</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/the-blind-golden-master.html"/>
        <id>https://rnowif.github.io/the-blind-golden-master.html</id>
            <category term="testing"/>
            <category term="refactoring"/>

        <updated>2021-01-11T03:44:38+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/1/autumn-219972_1280.jpg" alt="" />
                    As part of my work, I regularly have to refactor/rewrite some part of our system that has little test coverage, if any. Most of the time, the code is too big or complex to write a test suite comprehensive enough to give me the confidence&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/1/autumn-219972_1280.jpg" alt="" />
                <p>As part of my work, I regularly have to refactor/rewrite some part of our system that has little test coverage, if any. Most of the time, the code is too big or complex to write a test suite comprehensive enough to give me the confidence I need in a timely manner. Consequently, I have come to use a characterisation test technique that I called the “Blind Golden Master”.</p>
<!-- more -->

<h2 id="characterisation-tests">Characterisation Tests</h2>
<p>If you know what a characterisation test is, you can skip this section. If not, bear with me for a moment. A characterisation test aims to check that an already existing piece of code always keeps the same behaviour throughout the changes you make. This behaviour does not need to be correct - if there is a bug in the code, these tests will check that it is still here at the end! Characterisation tests are then extremely useful during refactoring efforts since it is not necessary to understand (or even read) the code to write them.</p>
<p>One of the most usual characterisation test techniques is the Golden Master. The idea is to exercise the code and record its output somehow (e.g. in a file). Then, the test will exercise the code with the same input and check the output against the previously recorded one - the golden master. See <a href="https://rnowif.github.io/blog/2017/04/10/trivia-refactoring/">here</a> for an example of this technique.</p>
<h2 id="the-blind-golden-master">The Blind Golden Master</h2>
<p>Sometimes, it is impractical to store the output of the code - or we simply couldn’t be bothered to do it. Sometimes, the new implementation and the legacy one have to co-exist (and evolve) for a while and the only goal is to check that they always both behave the same.</p>
<p>With this technique, the test simply calls both the new and the legacy code and assert that their output is identical. This approach is extremely effective when the method has a limited set of parameters and no side effect.</p>
<p>For instance, I used it to change the template engine for our codebase (C#).</p>
<pre><code class="language-csharp">string newResult = _newEngine.Render(templateName, model);
string legacyResult = _legacyEngine.Render(templateName, model);
Minify(newResult).Should().BeEquivalentTo(Minify(legacyResult));</code></pre>
<p>I also used it to change an algorithm that determine the file extension of a document (see the Java codebase <a href="https://github.com/rnowif/refactoring-with-tests/tree/refacto/socrates">here</a>).</p>
<pre><code class="language-java">FileExtension legacyValue = application.getExtension(country, region);
FileExtension newValue = application.getExtensionV2(country, region);
assertEquals(legacyValue, newValue);</code></pre>
<p>If the algorithm is crucial to the application and there are a lot of potential combinations to test, it is even possible to run the test in production: every time the code is called, it can invoke both the algorithms, compare their output and raise an error if they don’t match, and always return the legacy result. When there is no more error, it is time to switch to the new implementation. This <a href="https://github.blog/2015-12-15-move-fast/">article</a> explains how GitHub rewrote its merge algorithm using this technique.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Blind Golden Master is an extremely simple technique that provides confidence during refactoring without having to spend hours writing tests for the legacy code. It is a powerful enabler for improvement that does not require any specific tooling or overhead. Since I started using it a few years ago, it has proven a precious addition to my testing toolbox.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>ASP.Net Clean Architecture</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/aspnet-clean-architecture.html"/>
        <id>https://rnowif.github.io/aspnet-clean-architecture.html</id>
            <category term="csharp"/>
            <category term="architecture"/>

        <updated>2021-01-11T09:22:38+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/2/architecture-3357028_1920.jpg" alt="" />
                    When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/2/architecture-3357028_1920.jpg" alt="" />
                <p>When creating a new project, it is always a challenge to design a clean, coherent and modular architecture. There are guidelines out there to help us achieve this goal but the implementation is not always straightforward. In this blog post, I will propose an implementation of the Uncle Bob’s <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> on an ASP.Net project. The source code of this project can be found on my <a href="https://github.com/rnowif/Expenses">GitHub</a>.</p>
<!-- more -->

<p>The main idea of the clean architecture is to reduce the coupling between the core business code and the external world (Web, Database, Frameworks). In order to do that, the project can be divided in 3 main modules, that will be described below: <code>Domain</code>, <code>Web</code> and <code>Data</code>.</p>
<h2 id="domain">Domain</h2>
<p>This module contains all the core business code. It does not depend on anything else than the .NET SDK and contains sub-modules.</p>
<h3 id="entities"><code>Entities</code></h3>
<p>They are the building blocks of the domain and encapsulate the business concepts. Entities are not coupled with any ORM framework. Indeed the domain model can be quite different from the database model!</p>
<h3 id="use-cases"><code>Use Cases</code></h3>
<p>Following the Uncle Bob’s definition, they contains application specific business rules and orchestrate the flow of data to and from the entities and implement higher level business rules. </p>
<p>It is important to understand that the domain model should not leak outside of this module. In order to do that, use cases should not take entities are arguments for their methods, but a list of raw arguments. For instance, the use case that submit a new expense looks like the following:</p>
<pre><code class="language-csharp">public interface ISubmitExpense
{
    void Execute(Guid userId, string description, long priceWithoutTax, long priceIncludingTax);
}</code></pre>
<p>It is responsible to build an <code>Expense</code> object and apply the relevant business logic. </p>
<h3 id="repositories"><code>Repositories</code></h3>
<p>In the domain module, repositories are only interfaces that are used by the use cases to access data without any knowledge of the concrete implementations: data can be retrieved from databases, files or external Web APIs, it should not affect the core business logic at all. To reinforce this, repositories take entities as arguments and return entities as well. It is the responsibility of the concrete implementation to handle conversion if needed.</p>
<h2 id="data">Data</h2>
<p>The data module contains the database and ORM configuration and the repositories implementations. Typically, we find the EntityFramework configuration in this module as well as the annotated classes that will be mapped with database entries. Repositories implementation are responsible for converting “database objects” in domain objects:</p>
<pre><code class="language-csharp">public void Create(Expense expense)
{
  // Convert the domain object &quot;Expense&quot; into a database object &quot;DbExpense&quot;
  _dbContext.Expenses.Add(DbExpense.FromExpense(expense));
  _dbContext.SaveChanges();
}</code></pre>
<p>This prevents the ORM framework to leak into the domain.</p>
<h2 id="web">Web</h2>
<p>The web module contains all the controllers. It is responsible for handling HTTP requests, converting JSON or XML payloads to objects and invoking use cases:</p>
<pre><code class="language-csharp">[HttpPost]
public void SubmitExpense([FromBody] SubmitExpenseCommand expense)
{
  // The controller just invoke the use case with data extracted from the body of the HTTP request
  _submitExpense.Execute(expense.UserId, expense.Description, expense.PriceWithoutTax, expense.PriceIncludingTax);
}</code></pre>
<p>It should not contain any business logic whatsoever. As a consequence, controllers are very lightweight and easy to test.</p>
<h2 id="dependency-injection">Dependency injection</h2>
<p>In order to achieve low coupling between the modules, interfaces are injected into the constructor of the different classes:</p>
<pre><code class="language-csharp">public class SubmitExpense : ISubmitExpense
{

    private readonly IExpenseRepository _repository;

    public SubmitExpense(IExpenseRepository repository)
    {
      _repository = repository;
    }
}</code></pre>
<p>The plumbing is handled by the <code>Startup.cs</code> class where all the implementations of the interfaces are declared:</p>
<pre><code class="language-csharp">public void ConfigureServices(IServiceCollection services)
{
  // ...

  // Register &quot;SubmitExpense&quot; as the implementation of &quot;ISubmitExpense&quot;
  services.AddTransient&lt;ISubmitExpense, SubmitExpense&gt;();
  services.AddTransient&lt;IExpenseRepository, ExpenseRepository&gt;();
}</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this architecture, the emphasis is put on the domain. Every other modules should adapt to it but it does not depend on anything. This results in lightweight classes that are very easy to understand and test in isolation.<br>Moreover, the low coupling makes it very easy to change the infrastructure. Indeed, the domain module would not change a bit if we decided to have a CLI instead of a Web App or if the data should be retrieved from an external Web API instead of a PostgreSQL database.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>C# for the Java Developer: Enums</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/c-for-the-java-developer-enums.html"/>
        <id>https://rnowif.github.io/c-for-the-java-developer-enums.html</id>
            <category term="java"/>
            <category term="csharp"/>

        <updated>2021-01-11T09:38:39+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/4/christopher-burns-Kj2SaNHG-hg-unsplash.jpg" alt="" />
                    Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences. In Java, enums are very much like regular classes: they&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/4/christopher-burns-Kj2SaNHG-hg-unsplash.jpg" alt="" />
                <p>Enums is a very common concept. It exists, of course, in Java and C# as well. However, Java and C# enums do not have the same capabilities. This blog post aims to show their differences.</p>
<!-- more -->

<p>In Java, enums are very much like regular classes: they can implement interfaces and have methods. However, they cannot inherit other classes or be explicitly instantiated. They can be viewed as <code>final</code> classes (or <code>sealed</code> classes in C#) that already inherit the virtual “enum” class, have only private constructor(s) and a set of pre-defined instances (the values of the enum).</p>
<p>For instance, let’s take the example of the HTTP status codes. In Java, it is possible to write this code:</p>
<pre><code class="language-java">enum HttpStatus implements Comparable&lt;HttpStatus&gt; {
    OK(200), SERVER_ERROR(500), NOT_FOUND(404);

    private final int code;

    HttpStatus(int code) {
        this.code = code;
    }

    // This is a regular instance method
    int code() {
        return code;
    }

    // This is the implementation of the Comparable interface
    @Override
    int compareTo(HttpStatus o) {
        // Http statuses will be sorted by status code
        return Integer.compare(code, o.code);
    }
}</code></pre>
<pre><code class="language-java">HttpStatus status = HttpStatus.OK;

// The &#39;code&#39; method can be invoked like any other method
int code = status.code();</code></pre>
<p>In C#, enums are just integers in disguise. The previous snippet can be simulated in C# only because the <code>code</code> attribute happens to be an <code>int</code>. Otherwise, it would be very complex to have the same behaviour:</p>
<pre><code class="language-csharp">enum HttpStatus {
    // int value of the enum can be forced to a specific value
    OK = 200,
    NOT_FOUND = 404,
    SERVER_ERROR = 500
}</code></pre>
<pre><code class="language-csharp">HttpStatus status = HttpStatus.OK;

// The enum can be casted to an int to get its value
int code = (int) status;</code></pre>
<p>To sum up, Java enums are much more powerful than their C# counterparts. I often use these features when I write Java code and I think I would miss them if I had to write C# code on a daily basis.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>C# for the Java Developer: Lambdas</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/c-for-the-java-developer-lambdas.html"/>
        <id>https://rnowif.github.io/c-for-the-java-developer-lambdas.html</id>
            <category term="java"/>
            <category term="csharp"/>

        <updated>2021-01-11T09:35:06+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/3/lucas-benjamin-wQLAGv4_OYs-unsplash.jpg" alt="" />
                    A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/3/lucas-benjamin-wQLAGv4_OYs-unsplash.jpg" alt="" />
                <p>A lambda is an anonymous function that can be assigned to a variable, passed as an argument of a method and invoked at any time. We can find lambdas in Java and C# and the resulting code is very similar. A Java lambda can be viewed as the implementation of an interface with only one method (called a <em>functional interface</em>) whereas a C# lambda can be assigned to a <code>delegate</code>, which is a concept that does not exist in Java. This article aims to explain how lambdas work in Java and C# and highlight their differences and similarities.</p>
<!-- more -->

<h2 id="java-functional-interfaces">Java Functional Interfaces</h2>
<p>In Java, a lambda can simply be viewed as an anonymous function that implements an interface with only one method. This kind of interface is called a <em>functional interface</em> and can be annotated with the <code>@FunctionalInterface</code> annotation that tells the compiler to enforce the only-one-method rule:</p>
<pre><code class="language-java">@FunctionalInterface
interface Printer {
    void print(String message);
}</code></pre>
<pre><code class="language-java">// The function interface is implemented with a lambda
Printer standardPrinter = message -&gt; System.out.println(message);

// The print method of standardPrinter can be invoked
standardPrinter.print(&quot;Hello World!&quot;);</code></pre>
<p>From the previous snippet, you should note that the way the interface is implemented makes absolutely no difference. It can be a lambda, a concrete or even an anonymous class. In any ways, you can simply invoke the <code>print</code> method of the interface.</p>
<p>There are some pre-defined <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">generic functional interfaces</a> in the JDK that can be used directly off the shelf. The main ones are described below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Method</th>
<th>Role</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html"><code>Function&lt;T,R&gt;</code></a></td>
<td><code>R apply(T t)</code></td>
<td>Takes an argument of a given type T and returns an object of type R</td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html"><code>Consumer&lt;T&gt;</code></a></td>
<td><code>void accept(T)</code></td>
<td>Takes an argument of a given type T and does something useful (typically with side effects)</td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><code>Predicate&lt;T&gt;</code></a></td>
<td><code>boolean test(T)</code></td>
<td>Takes an argument of a given type T and returns a boolean (similar to <code>Function&lt;T, Boolean&gt;</code>)</td>
</tr>
<tr>
<td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html"><code>Supplier&lt;T&gt;</code></a></td>
<td><code>T get()</code></td>
<td>Returns an object of type T</td>
</tr>
</tbody></table>
<h2 id="c-delegates">C# Delegates</h2>
<p>In C#, a lambda can be assigned to a delegate which is a type that encapsulates a method:</p>
<pre><code class="language-csharp">delegate void Print(string message);</code></pre>
<pre><code>// A lambda is assigned to the delegate
Print print = message =&gt; System.Console.WriteLine(message);

// print can be directly invoked as a method
print(&quot;Hello World!&quot;);</code></pre><p>Like in Java, some delegates are already defined in the .NET framework, the main ones are described below:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Role</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.microsoft.com/en-us/dotnet/api/system.func-2"><code>TResult Func&lt;in T,out TResult&gt;(T arg)</code></a></td>
<td>Takes an argument of a given type T and returns an object of type TResult</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/dotnet/api/system.action-1"><code>void Action&lt;in T&gt;(T obj)</code></a></td>
<td>Takes an argument of a given type T and does something useful (typically with side effects)</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1"><code>bool Predicate&lt;in T&gt;(T obj)</code></a></td>
<td>Takes an argument of a given type T and returns a boolean (similar to <code>Func&lt;T, bool&gt;</code>)</td>
</tr>
</tbody></table>
<h2 id="conclusion">Conclusion</h2>
<p>From a Java perspective, using lambdas in APIs (like Linq for instance) is pretty straightforward. However, when digging a little bit deeper, there are some subtle differences to understand. I find the Java approach simpler as it does not introduce another concept but the C# approach is cleaner because the delegate can be invoked directly like a method.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>C# for the Java Developer: Extension Methods</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/c-for-the-java-developer-extension-methods.html"/>
        <id>https://rnowif.github.io/c-for-the-java-developer-extension-methods.html</id>
            <category term="java"/>
            <category term="csharp"/>

        <updated>2021-01-11T10:05:52+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/6/jeeray-tang-eY2xn59BSyM-unsplash.jpg" alt="" />
                    After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like Kotlin) but not&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/6/jeeray-tang-eY2xn59BSyM-unsplash.jpg" alt="" />
                <p>After spending several years crafting Java code, I recently decided to dive back into C# and share what I learn in the process. In this blog post, I will talk about extensions methods. This concept, which exists in some JVM languages (like <a href="https://kotlinlang.org/docs/reference/extensions.html">Kotlin</a>) but not in Java, let the developer add methods to a class without touching its code (hence the name <em>extension</em> methods).</p>
<!-- more -->

<p>Let’s say you want to create a method that puts the first letter of a string in upper case and returns the new string. You cannot modify (or even inherit) the <code>String</code> class in Java to add this method. Since you don’t necessarily want to create your own custom flavour of the <code>String</code> class for your code base, you would probably create a static function that takes a <code>String</code> as an argument and return another <code>String</code>:</p>
<pre><code class="language-java">class StringExtensions {
    static String capitalize(String word) {
        return Character.toUpperCase(word.charAt(0)) + word.substring(1);
    }
}</code></pre>
<p>Now, you can simply invoke this function like this:</p>
<pre><code class="language-java">String word = &quot;hello&quot;;
String capitalizedWord = StringExtensions.capitalize(word);</code></pre>
<p>Of course, creating a static method is also possible in C#. However, C# has a feature that allows to add new methods to a class without having to modify its code. This feature is called <em>extension methods</em>. In order to create an extension method, you have to create a top-level static class and implement a static method. The first argument of this method specifies the type that the method operates on and should have the <code>this</code> modifier:</p>
<pre><code class="language-csharp">static class StringExtensions 
{
  static string Capitalize(this String word)
  {
      // Note that this cannot access any private data in the String class. 
      return char.ToUpper(word[0]) + word.Substring(1);
  }
}</code></pre>
<p>In order to use it, the namespace that contains the class must be specified with a <code>using</code> directive. Afterwards, the method can be invoked as if it was an instance method of the type:</p>
<pre><code class="language-csharp">string word = &quot;hello&quot;;
string capitalizedWord = word.Capitalize();</code></pre>
<p>Extension methods are very powerful. Beside the fact that the code looks “cleaner”, it is also possible to seamlessly plug new behaviours in existing types by simply importing a namespace. The extension code can be in separate specific modules that can be imported only when needed. </p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>C# for the Java Developer: Generics</title>
        <author>
            <name>Renaud Humbert-Labeaumaz</name>
        </author>
        <link href="https://rnowif.github.io/c-for-the-java-developer-generics.html"/>
        <id>https://rnowif.github.io/c-for-the-java-developer-generics.html</id>
            <category term="java"/>
            <category term="csharp"/>

        <updated>2021-01-11T09:40:26+13:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://rnowif.github.io/media/posts/5/dna-1811955_1920.jpg" alt="" />
                    In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is very different. This blog post aims to explain the differences and the similarities between the two. TL;DR Java generics is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://rnowif.github.io/media/posts/5/dna-1811955_1920.jpg" alt="" />
                <p>In my journey into the C# world, I wanted to talk about generics. Generics exist in both Java and C# languages but their implementation is <em>very</em> different. This blog post aims to explain the differences and the similarities between the two.<br>TL;DR Java generics is a lie, C# generics is not.</p>
<!-- more -->

<h2 id="java-generics-is-a-lie">Java Generics is a Lie</h2>
<p>Generics have been introduced in Java 5. Before that, you had to manipulate <code>Objects</code> and cast them to the desired type:</p>
<pre><code class="language-java">List apples = new ArrayList();
apples.add(new Apple());
// This is really a list of objects, so the cast is required
Apple firstApple = (Apple) apples.get(0);</code></pre>
<p>In the previous snippet, you should note that there is absolutely nothing that prevents you from adding a <code>Banana</code> into the list and make the program crash at runtime. Also, this code is still valid in the latest version of Java (which is Java 11 as we speak). To say the least, this approach is not very safe and do not leverage the type system as much as we could expect.</p>
<p>Since Java 5, it is then possible to use the generic version of the <code>List</code> class:</p>
<pre><code class="language-java">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();
apples.add(new Apple());
// The cast is not required any more thanks to the generics
Apple firstApple = apples.get(0);</code></pre>
<p>The thing is that, at runtime, the two previous snippets are strictly equivalent. Indeed, Java generics are removed during compilation and the resulting bytecode only manipulate <code>Objects</code> and casts. This is called <em>type erasure</em>. As a consequence, it is not possible, in Java, to write code like this:</p>
<pre><code class="language-java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (o instanceof T) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}</code></pre>
<p>Indeed, the type of <code>T</code> is erased at runtime and the <code>instanceof</code> operation cannot be performed. That is why a class object is often passed as an argument of the method:</p>
<pre><code class="language-java">/**
 * Filter objects of the given type
 */
&lt;T&gt; List&lt;T&gt; filterObjectsOfType(List&lt;Object&gt; objects, Class&lt;T&gt; clazz) {
    List&lt;T&gt; filteredObjects = new ArrayList&lt;&gt;();
    for (Object o : objects) {
        if (clazz.isInstance(o)) {
            filteredObjects.add((T) o);
        }
    }
    return filteredObjects;
}</code></pre>
<p>This method can be invoked like this:</p>
<pre><code class="language-java">List&lt;String&gt; stringsOnly = filterObjectsOfType(Arrays.asList(&quot;hello&quot;, 2), String.class);
// stringsOnly contains only &quot;hello&quot;</code></pre>
<h2 id="c-generics-is-a-runtime-feature">C# Generics is a Runtime Feature</h2>
<p>C# generics, on the other hand, is a totally different beast. Indeed, the real type is kept at runtime and it is possible to use this type to write this kind of code:</p>
<pre><code class="language-csharp">/**
 * Filter objects of the given type
 */
public IEnumerable&lt;T&gt; FilterObjectsOfType&lt;T&gt;(IEnumerable&lt;object&gt; objects)
{
    List&lt;T&gt; filteredObjects = new List&lt;T&gt;();
    foreach (var obj in objects)
    {
        if (obj is T)
        {
            filteredObjects.Add((T) obj);    
        }
    }
    return filteredObjects;
} </code></pre>
<p>This method can be invoked like this:</p>
<pre><code class="language-csharp">IEnumerable&lt;String&gt; stringsOnly = FilterObjectsOfType&lt;String&gt;(new List&lt;object&gt;(new object[] { &quot;hello&quot;, 2 }));
// stringsOnly contains only &quot;hello&quot;</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In Java, generics are used to write type-safe code but this feature is limited and the code can be awkward sometimes due to the type erasure mechanism. In C#, it is a runtime feature and its usage is much more straightforward.</p>
<p><em>PS: I realize that the code I wrote in the snippets is not really idiomatic but I wanted to have Java and C# code as similar as possible to be able to focus only on the usage of generics.</em></p>

            ]]>
        </content>
    </entry>
</feed>
